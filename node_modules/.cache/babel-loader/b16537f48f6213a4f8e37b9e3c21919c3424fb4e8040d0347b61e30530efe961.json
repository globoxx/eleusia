{"ast":null,"code":"import _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport var TileProgram = /*#__PURE__*/_createClass(function TileProgram(aShape, reps) {\n  _classCallCheck(this, TileProgram);\n  this.variableNames = ['A'];\n  var outputShape = new Array(aShape.length);\n  for (var i = 0; i < outputShape.length; i++) {\n    outputShape[i] = aShape[i] * reps[i];\n  }\n  this.outputShape = outputShape;\n  this.rank = outputShape.length;\n  var dtype = getCoordsDataType(this.rank);\n  var sourceCoords = getSourceCoords(aShape);\n  this.userCode = \"\\n      void main() {\\n        \".concat(dtype, \" resRC = getOutputCoords();\\n        setOutput(getA(\").concat(sourceCoords, \"));\\n      }\\n    \");\n});\nfunction getSourceCoords(aShape) {\n  var rank = aShape.length;\n  if (rank > 5) {\n    throw Error(\"Tile for rank \".concat(rank, \" is not yet supported\"));\n  }\n  if (rank === 1) {\n    return \"imod(resRC, \".concat(aShape[0], \")\");\n  }\n  var currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n  var sourceCoords = [];\n  for (var i = 0; i < aShape.length; i++) {\n    sourceCoords.push(\"imod(\".concat(currentCoords[i], \", \").concat(aShape[i], \")\"));\n  }\n  return sourceCoords.join();\n}","map":{"version":3,"names":["getCoordsDataType","TileProgram","_createClass","aShape","reps","_classCallCheck","variableNames","outputShape","Array","length","i","rank","dtype","sourceCoords","getSourceCoords","userCode","concat","Error","currentCoords","push","join"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\tile_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TileProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], reps: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[]): string {\n  const rank = aShape.length;\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n  return sourceCoords.join();\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,iBAAiB,QAAO,mBAAmB;AAEnD,WAAaC,WAAW,gBAAAC,YAAA,CAMtB,SAAAD,YAAYE,MAAgB,EAAEC,IAAc;EAAAC,eAAA,OAAAJ,WAAA;EAL5C,KAAAK,aAAa,GAAG,CAAC,GAAG,CAAC;EAMnB,IAAMC,WAAW,GAAa,IAAIC,KAAK,CAACL,MAAM,CAACM,MAAM,CAAC;EACtD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,WAAW,CAACE,MAAM,EAAEC,CAAC,EAAE,EAAE;IAC3CH,WAAW,CAACG,CAAC,CAAC,GAAGP,MAAM,CAACO,CAAC,CAAC,GAAGN,IAAI,CAACM,CAAC,CAAC;;EAEtC,IAAI,CAACH,WAAW,GAAGA,WAAW;EAC9B,IAAI,CAACI,IAAI,GAAGJ,WAAW,CAACE,MAAM;EAC9B,IAAMG,KAAK,GAAGZ,iBAAiB,CAAC,IAAI,CAACW,IAAI,CAAC;EAC1C,IAAME,YAAY,GAAGC,eAAe,CAACX,MAAM,CAAC;EAE5C,IAAI,CAACY,QAAQ,qCAAAC,MAAA,CAEPJ,KAAK,0DAAAI,MAAA,CACUH,YAAY,uBAEhC;AACH,CAAC;AAGH,SAASC,eAAeA,CAACX,MAAgB;EACvC,IAAMQ,IAAI,GAAGR,MAAM,CAACM,MAAM;EAC1B,IAAIE,IAAI,GAAG,CAAC,EAAE;IACZ,MAAMM,KAAK,kBAAAD,MAAA,CAAkBL,IAAI,2BAAwB;;EAE3D,IAAIA,IAAI,KAAK,CAAC,EAAE;IACd,sBAAAK,MAAA,CAAsBb,MAAM,CAAC,CAAC,CAAC;;EAGjC,IAAMe,aAAa,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;EAE7E,IAAML,YAAY,GAAG,EAAE;EACvB,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,MAAM,CAACM,MAAM,EAAEC,CAAC,EAAE,EAAE;IACtCG,YAAY,CAACM,IAAI,SAAAH,MAAA,CAASE,aAAa,CAACR,CAAC,CAAC,QAAAM,MAAA,CAAKb,MAAM,CAACO,CAAC,CAAC,OAAI;;EAE9D,OAAOG,YAAY,CAACO,IAAI,EAAE;AAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}