{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { ExpandDims } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\r\n * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension\r\n * into the tensor's shape.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n * const axis = 1;\r\n * x.expandDims(axis).print();\r\n * ```\r\n *\r\n * @param x The input tensor whose dimensions are to be expanded.\r\n * @param axis The dimension index at which to insert shape of `1`. Defaults\r\n *     to 0 (the first dimension).\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\r\n */\nfunction expandDims_(x) {\n  var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var $x = convertToTensor(x, 'x', 'expandDims', 'string_or_numeric');\n  util.assert(axis <= $x.rank, function () {\n    return 'Axis must be <= rank of the tensor';\n  });\n  var inputs = {\n    input: $x\n  };\n  var attrs = {\n    dim: axis\n  };\n  return ENGINE.runKernel(ExpandDims, inputs, attrs);\n}\nexport var expandDims = /* @__PURE__ */op({\n  expandDims_: expandDims_\n});","map":{"version":3,"names":["ENGINE","ExpandDims","convertToTensor","util","op","expandDims_","x","axis","arguments","length","undefined","$x","assert","rank","inputs","input","attrs","dim","runKernel","expandDims"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\expand_dims.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension\n * into the tensor's shape.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const axis = 1;\n * x.expandDims(axis).print();\n * ```\n *\n * @param x The input tensor whose dimensions are to be expanded.\n * @param axis The dimension index at which to insert shape of `1`. Defaults\n *     to 0 (the first dimension).\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction expandDims_<T extends Tensor>(x: Tensor|TensorLike, axis = 0): T {\n  const $x = convertToTensor(x, 'x', 'expandDims', 'string_or_numeric');\n\n  util.assert(axis <= $x.rank, () => 'Axis must be <= rank of the tensor');\n\n  const inputs: ExpandDimsInputs = {input: $x};\n  const attrs: ExpandDimsAttrs = {dim: axis};\n\n  return ENGINE.runKernel(\n      ExpandDims, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const expandDims = /* @__PURE__ */ op({expandDims_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,UAAU,QAA0C,iBAAiB;AAI7E,SAAQC,eAAe,QAAO,oBAAoB;AAElD,OAAO,KAAKC,IAAI,MAAM,SAAS;AAE/B,SAAQC,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;;;;;;AAgBA,SAASC,WAAWA,CAAmBC,CAAoB,EAAU;EAAA,IAARC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EACnE,IAAMG,EAAE,GAAGT,eAAe,CAACI,CAAC,EAAE,GAAG,EAAE,YAAY,EAAE,mBAAmB,CAAC;EAErEH,IAAI,CAACS,MAAM,CAACL,IAAI,IAAII,EAAE,CAACE,IAAI,EAAE;IAAA,OAAM,oCAAoC;EAAA,EAAC;EAExE,IAAMC,MAAM,GAAqB;IAACC,KAAK,EAAEJ;EAAE,CAAC;EAC5C,IAAMK,KAAK,GAAoB;IAACC,GAAG,EAAEV;EAAI,CAAC;EAE1C,OAAOP,MAAM,CAACkB,SAAS,CACnBjB,UAAU,EAAEa,MAAmC,EAC/CE,KAAgC,CAAC;AACvC;AAEA,OAAO,IAAMG,UAAU,GAAG,eAAgBf,EAAE,CAAC;EAACC,WAAW,EAAXA;AAAW,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}