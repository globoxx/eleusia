{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ResizeNearestNeighbor, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function resizeNearestNeighbor(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var images = inputs.images;\n  var alignCorners = attrs.alignCorners,\n    halfPixelCenters = attrs.halfPixelCenters,\n    size = attrs.size;\n  assertNotComplex(images, 'resizeNearestNeighbor');\n  var imagesStrides = util.computeStrides(images.shape);\n  var _size = _slicedToArray(size, 2),\n    newHeight = _size[0],\n    newWidth = _size[1];\n  var _images$shape = _slicedToArray(images.shape, 4),\n    batch = _images$shape[0],\n    oldHeight = _images$shape[1],\n    oldWidth = _images$shape[2],\n    numChannels = _images$shape[3];\n  var xValues = backend.data.get(images.dataId).values;\n  var output = new Float32Array(batch * newHeight * newWidth * numChannels);\n  var effectiveInputSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];\n  var effectiveOutputSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];\n  var effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  var effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n  var outputOffset = 0;\n  for (var b = 0; b < batch; b++) {\n    var batchOffset = b * imagesStrides[0];\n    for (var r = 0; r < newHeight; r++) {\n      var sourceFracRow = halfPixelCenters ? effectiveRowSizeRatio * (r + 0.5) : effectiveRowSizeRatio * r;\n      var sourceNearestRow = Math.min(oldHeight - 1, alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n      if (halfPixelCenters) {\n        sourceNearestRow = Math.max(0, sourceNearestRow);\n      }\n      var rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];\n      for (var c = 0; c < newWidth; c++) {\n        var sourceFracCol = halfPixelCenters ? effectiveColSizeRatio * (c + 0.5) : effectiveColSizeRatio * c;\n        var sourceNearestCol = Math.min(oldWidth - 1, alignCorners ? Math.round(sourceFracCol) : Math.floor(sourceFracCol));\n        if (halfPixelCenters) {\n          sourceNearestCol = Math.max(0, sourceNearestCol);\n        }\n        var colOffset = rowOffset + sourceNearestCol * imagesStrides[2];\n        for (var d = 0; d < numChannels; d++) {\n          // Begin shader.\n          // Compute the fractional index of the source.\n          var newVal = xValues[colOffset + d];\n          output[outputOffset++] = newVal;\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo([batch, newHeight, newWidth, numChannels], images.dtype, output);\n}\nexport var resizeNearestNeighborConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighbor\n};","map":{"version":3,"names":["ResizeNearestNeighbor","util","assertNotComplex","resizeNearestNeighbor","args","inputs","backend","attrs","images","alignCorners","halfPixelCenters","size","imagesStrides","computeStrides","shape","_size","_slicedToArray","newHeight","newWidth","_images$shape","batch","oldHeight","oldWidth","numChannels","xValues","data","get","dataId","values","output","Float32Array","effectiveInputSize","effectiveOutputSize","effectiveRowSizeRatio","effectiveColSizeRatio","outputOffset","b","batchOffset","r","sourceFracRow","sourceNearestRow","Math","min","round","floor","max","rowOffset","c","sourceFracCol","sourceNearestCol","colOffset","d","newVal","makeTensorInfo","dtype","resizeNearestNeighborConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-cpu\\src\\kernels\\ResizeNearestNeighbor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeNearestNeighbor');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n\n  let outputOffset = 0;\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < newHeight; r++) {\n      const sourceFracRow = halfPixelCenters ?\n          effectiveRowSizeRatio * (r + 0.5) :\n          effectiveRowSizeRatio * r;\n      let sourceNearestRow = Math.min(\n          oldHeight - 1,\n          alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n      if (halfPixelCenters) {\n        sourceNearestRow = Math.max(0, sourceNearestRow);\n      }\n      const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        const sourceFracCol = halfPixelCenters ?\n            effectiveColSizeRatio * (c + 0.5) :\n            effectiveColSizeRatio * c;\n        let sourceNearestCol = Math.min(\n            oldWidth - 1,\n            alignCorners ? Math.round(sourceFracCol) :\n                           Math.floor(sourceFracCol));\n        if (halfPixelCenters) {\n          sourceNearestCol = Math.max(0, sourceNearestCol);\n        }\n        const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n          // Compute the fractional index of the source.\n          const newVal = xValues[colOffset + d];\n          output[outputOffset++] = newVal;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], images.dtype, output);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighbor as unknown as KernelFunc\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}