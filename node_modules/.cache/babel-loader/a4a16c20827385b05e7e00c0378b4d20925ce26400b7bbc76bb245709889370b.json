{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { StringNGrams } from '@tensorflow/tfjs-core';\nimport { stringNGramsImplCPU } from '../kernel_utils/shared';\nexport function stringNGrams(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var separator = attrs.separator,\n    nGramWidths = attrs.nGramWidths,\n    leftPad = attrs.leftPad,\n    rightPad = attrs.rightPad,\n    padWidth = attrs.padWidth,\n    preserveShortSequences = attrs.preserveShortSequences;\n  var data = inputs.data,\n    dataSplits = inputs.dataSplits;\n  var $data = backend.readSync(data.dataId);\n  var $dataSplits = backend.readSync(dataSplits.dataId);\n  var _stringNGramsImplCPU = stringNGramsImplCPU($data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences),\n    _stringNGramsImplCPU2 = _slicedToArray(_stringNGramsImplCPU, 2),\n    nGrams = _stringNGramsImplCPU2[0],\n    nGramsSplits = _stringNGramsImplCPU2[1];\n  return [backend.makeTensorInfo([nGrams.length], 'string', nGrams), backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits)];\n}\nexport var stringNGramsConfig = {\n  kernelName: StringNGrams,\n  backendName: 'webgl',\n  kernelFunc: stringNGrams\n};","map":{"version":3,"names":["StringNGrams","stringNGramsImplCPU","stringNGrams","args","inputs","backend","attrs","separator","nGramWidths","leftPad","rightPad","padWidth","preserveShortSequences","data","dataSplits","$data","readSync","dataId","$dataSplits","_stringNGramsImplCPU","_stringNGramsImplCPU2","_slicedToArray","nGrams","nGramsSplits","makeTensorInfo","length","shape","stringNGramsConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\kernels\\StringNGrams.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringNGramsImplCPU} from '../kernel_utils/shared';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendWebGL,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.readSync(data.dataId) as Uint8Array[];\n  const $dataSplits = backend.readSync(dataSplits.dataId) as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'webgl',\n  kernelFunc: stringNGrams as unknown as KernelFunc,\n};\n"],"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,YAAY,QAA0D,uBAAuB;AAG/H,SAAQC,mBAAmB,QAAO,wBAAwB;AAE1D,OAAM,SAAUC,YAAYA,CAACC,IAI5B;EACC,IAAOC,MAAM,GAAoBD,IAAI,CAA9BC,MAAM;IAAEC,OAAO,GAAWF,IAAI,CAAtBE,OAAO;IAAEC,KAAK,GAAIH,IAAI,CAAbG,KAAK;EAC7B,IACEC,SAAS,GAMPD,KAAK,CANPC,SAAS;IACTC,WAAW,GAKTF,KAAK,CALPE,WAAW;IACXC,OAAO,GAILH,KAAK,CAJPG,OAAO;IACPC,QAAQ,GAGNJ,KAAK,CAHPI,QAAQ;IACRC,QAAQ,GAENL,KAAK,CAFPK,QAAQ;IACRC,sBAAsB,GACpBN,KAAK,CADPM,sBAAsB;EAExB,IAAOC,IAAI,GAAgBT,MAAM,CAA1BS,IAAI;IAAEC,UAAU,GAAIV,MAAM,CAApBU,UAAU;EACvB,IAAMC,KAAK,GAAGV,OAAO,CAACW,QAAQ,CAACH,IAAI,CAACI,MAAM,CAAiB;EAC3D,IAAMC,WAAW,GAAGb,OAAO,CAACW,QAAQ,CAACF,UAAU,CAACG,MAAM,CAAe;EAErE,IAAAE,oBAAA,GAA+BlB,mBAAmB,CAC9Cc,KAAK,EAAEG,WAAW,EAAEX,SAAS,EAAEC,WAAW,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,QAAQ,EACvEC,sBAAsB,CAAC;IAAAQ,qBAAA,GAAAC,cAAA,CAAAF,oBAAA;IAFpBG,MAAM,GAAAF,qBAAA;IAAEG,YAAY,GAAAH,qBAAA;EAG3B,OAAO,CACLf,OAAO,CAACmB,cAAc,CAAC,CAACF,MAAM,CAACG,MAAM,CAAC,EAAE,QAAQ,EAAEH,MAAM,CAAC,EACzDjB,OAAO,CAACmB,cAAc,CAACV,UAAU,CAACY,KAAK,EAAE,OAAO,EAAEH,YAAY,CAAC,CAChE;AACH;AAEA,OAAO,IAAMI,kBAAkB,GAAiB;EAC9CC,UAAU,EAAE5B,YAAY;EACxB6B,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAE5B;CACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}