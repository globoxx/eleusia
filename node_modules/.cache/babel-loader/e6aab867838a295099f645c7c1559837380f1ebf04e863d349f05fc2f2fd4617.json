{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { reshape } from '../../ops/reshape';\nimport { getGlobalTensorClass } from '../../tensor';\n/**\r\n * Flatten a Tensor to a 1D array.\r\n * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n */\ngetGlobalTensorClass().prototype.flatten = function () {\n  this.throwIfDisposed();\n  return reshape(this, [this.size]);\n};","map":{"version":3,"names":["reshape","getGlobalTensorClass","prototype","flatten","throwIfDisposed","size"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\public\\chained_ops\\flatten.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {reshape} from '../../ops/reshape';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    flatten<T extends Tensor>(): Tensor1D;\n  }\n}\n\n/**\n * Flatten a Tensor to a 1D array.\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\ngetGlobalTensorClass().prototype.flatten = function<T extends Tensor>(): T {\n  this.throwIfDisposed();\n  return reshape(this, [this.size]) as T;\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,OAAO,QAAO,mBAAmB;AACzC,SAAQC,oBAAoB,QAAe,cAAc;AASzD;;;;AAIAA,oBAAoB,EAAE,CAACC,SAAS,CAACC,OAAO,GAAG;EACzC,IAAI,CAACC,eAAe,EAAE;EACtB,OAAOJ,OAAO,CAAC,IAAI,EAAE,CAAC,IAAI,CAACK,IAAI,CAAC,CAAM;AACxC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}