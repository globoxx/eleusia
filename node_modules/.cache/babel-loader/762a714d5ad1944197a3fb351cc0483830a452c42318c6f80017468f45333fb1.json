{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Classes and functions for model management across multiple storage mediums.\n *\n * Supported client actions:\n * - Listing models on all registered storage mediums.\n * - Remove model by URL from any registered storage mediums, by using URL\n *   string.\n * - Moving or copying model from one path to another in the same medium or from\n *   one medium to another, by using URL strings.\n */\nimport { assert } from '../util';\nimport { IORouterRegistry } from './router_registry';\nvar URL_SCHEME_SUFFIX = '://';\nexport var ModelStoreManagerRegistry = /*#__PURE__*/function () {\n  function ModelStoreManagerRegistry() {\n    _classCallCheck(this, ModelStoreManagerRegistry);\n    this.managers = {};\n  }\n  _createClass(ModelStoreManagerRegistry, null, [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (ModelStoreManagerRegistry.instance == null) {\n        ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();\n      }\n      return ModelStoreManagerRegistry.instance;\n    }\n    /**\n     * Register a save-handler router.\n     *\n     * @param saveRouter A function that maps a URL-like string onto an instance\n     * of `IOHandler` with the `save` method defined or `null`.\n     */\n  }, {\n    key: \"registerManager\",\n    value: function registerManager(scheme, manager) {\n      assert(scheme != null, function () {\n        return 'scheme must not be undefined or null.';\n      });\n      if (scheme.endsWith(URL_SCHEME_SUFFIX)) {\n        scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));\n      }\n      assert(scheme.length > 0, function () {\n        return 'scheme must not be an empty string.';\n      });\n      var registry = ModelStoreManagerRegistry.getInstance();\n      assert(registry.managers[scheme] == null, function () {\n        return \"A model store manager is already registered for scheme '\".concat(scheme, \"'.\");\n      });\n      registry.managers[scheme] = manager;\n    }\n  }, {\n    key: \"getManager\",\n    value: function getManager(scheme) {\n      var manager = ModelStoreManagerRegistry.getInstance().managers[scheme];\n      if (manager == null) {\n        throw new Error(\"Cannot find model manager for scheme '\".concat(scheme, \"'\"));\n      }\n      return manager;\n    }\n  }, {\n    key: \"getSchemes\",\n    value: function getSchemes() {\n      return Object.keys(ModelStoreManagerRegistry.getInstance().managers);\n    }\n  }]);\n  return ModelStoreManagerRegistry;\n}();\n/**\n * Helper method for parsing a URL string into a scheme and a path.\n *\n * @param url E.g., 'localstorage://my-model'\n * @returns A dictionary with two fields: scheme and path.\n *   Scheme: e.g., 'localstorage' in the example above.\n *   Path: e.g., 'my-model' in the example above.\n */\nfunction parseURL(url) {\n  if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {\n    throw new Error(\"The url string provided does not contain a scheme. \" + \"Supported schemes are: \" + \"\".concat(ModelStoreManagerRegistry.getSchemes().join(',')));\n  }\n  return {\n    scheme: url.split(URL_SCHEME_SUFFIX)[0],\n    path: url.split(URL_SCHEME_SUFFIX)[1]\n  };\n}\nfunction cloneModelInternal(_x, _x2) {\n  return _cloneModelInternal.apply(this, arguments);\n}\n/**\n * List all models stored in registered storage mediums.\n *\n * For a web browser environment, the registered mediums are Local Storage and\n * IndexedDB.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @returns A `Promise` of a dictionary mapping URLs of existing models to\n * their model artifacts info. URLs include medium-specific schemes, e.g.,\n *   'indexeddb://my/model/1'. Model artifacts info include type of the\n * model's topology, byte sizes of the topology, weights, etc.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nfunction _cloneModelInternal() {\n  _cloneModelInternal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(sourceURL, destURL) {\n    var deleteSource,\n      loadHandlers,\n      loadHandler,\n      saveHandlers,\n      saveHandler,\n      sourceScheme,\n      sourcePath,\n      sameMedium,\n      modelArtifacts,\n      saveResult,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          deleteSource = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;\n          assert(sourceURL !== destURL, function () {\n            return \"Old path and new path are the same: '\".concat(sourceURL, \"'\");\n          });\n          loadHandlers = IORouterRegistry.getLoadHandlers(sourceURL);\n          assert(loadHandlers.length > 0, function () {\n            return \"Copying failed because no load handler is found for source URL \".concat(sourceURL, \".\");\n          });\n          assert(loadHandlers.length < 2, function () {\n            return \"Copying failed because more than one (\".concat(loadHandlers.length, \") \") + \"load handlers for source URL \".concat(sourceURL, \".\");\n          });\n          loadHandler = loadHandlers[0];\n          saveHandlers = IORouterRegistry.getSaveHandlers(destURL);\n          assert(saveHandlers.length > 0, function () {\n            return \"Copying failed because no save handler is found for destination \" + \"URL \".concat(destURL, \".\");\n          });\n          assert(saveHandlers.length < 2, function () {\n            return \"Copying failed because more than one (\".concat(loadHandlers.length, \") \") + \"save handlers for destination URL \".concat(destURL, \".\");\n          });\n          saveHandler = saveHandlers[0];\n          sourceScheme = parseURL(sourceURL).scheme;\n          sourcePath = parseURL(sourceURL).path;\n          sameMedium = sourceScheme === parseURL(sourceURL).scheme;\n          _context.next = 15;\n          return loadHandler.load();\n        case 15:\n          modelArtifacts = _context.sent;\n          if (!(deleteSource && sameMedium)) {\n            _context.next = 19;\n            break;\n          }\n          _context.next = 19;\n          return ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath);\n        case 19:\n          _context.next = 21;\n          return saveHandler.save(modelArtifacts);\n        case 21:\n          saveResult = _context.sent;\n          if (!(deleteSource && !sameMedium)) {\n            _context.next = 25;\n            break;\n          }\n          _context.next = 25;\n          return ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath);\n        case 25:\n          return _context.abrupt(\"return\", saveResult.modelArtifactsInfo);\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _cloneModelInternal.apply(this, arguments);\n}\nfunction listModels() {\n  return _listModels.apply(this, arguments);\n}\n/**\n * Remove a model specified by URL from a registered storage medium.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @param url A URL to a stored model, with a scheme prefix, e.g.,\n *   'localstorage://my-model-1', 'indexeddb://my/model/2'.\n * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\n *   is successful).\n * @throws Error if deletion fails, e.g., if no model exists at `path`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nfunction _listModels() {\n  _listModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var schemes, out, _iterator, _step, scheme, schemeOut, path, url;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          schemes = ModelStoreManagerRegistry.getSchemes();\n          out = {};\n          _iterator = _createForOfIteratorHelper(schemes);\n          _context2.prev = 3;\n          _iterator.s();\n        case 5:\n          if ((_step = _iterator.n()).done) {\n            _context2.next = 13;\n            break;\n          }\n          scheme = _step.value;\n          _context2.next = 9;\n          return ModelStoreManagerRegistry.getManager(scheme).listModels();\n        case 9:\n          schemeOut = _context2.sent;\n          for (path in schemeOut) {\n            url = scheme + URL_SCHEME_SUFFIX + path;\n            out[url] = schemeOut[path];\n          }\n        case 11:\n          _context2.next = 5;\n          break;\n        case 13:\n          _context2.next = 18;\n          break;\n        case 15:\n          _context2.prev = 15;\n          _context2.t0 = _context2[\"catch\"](3);\n          _iterator.e(_context2.t0);\n        case 18:\n          _context2.prev = 18;\n          _iterator.f();\n          return _context2.finish(18);\n        case 21:\n          return _context2.abrupt(\"return\", out);\n        case 22:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[3, 15, 18, 21]]);\n  }));\n  return _listModels.apply(this, arguments);\n}\nfunction removeModel(_x3) {\n  return _removeModel.apply(this, arguments);\n}\n/**\n * Copy a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Copying within a storage medium, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Copying between two storage mediums, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Copy the model, from Local Storage to IndexedDB.\n * await tf.io.copyModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove both models.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of copying.\n * @param destURL Destination URL of copying.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nfunction _removeModel() {\n  _removeModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(url) {\n    var schemeAndPath, manager;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          schemeAndPath = parseURL(url);\n          manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);\n          return _context3.abrupt(\"return\", manager.removeModel(schemeAndPath.path));\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _removeModel.apply(this, arguments);\n}\nfunction copyModel(_x4, _x5) {\n  return _copyModel.apply(this, arguments);\n}\n/**\n * Move a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Moving within a storage medium, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Moving between two storage mediums, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Move the model, from Local Storage to IndexedDB.\n * await tf.io.moveModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove the moved model.\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of moving.\n * @param destURL Destination URL of moving.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nfunction _copyModel() {\n  _copyModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(sourceURL, destURL) {\n    var deleteSource;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          deleteSource = false;\n          return _context4.abrupt(\"return\", cloneModelInternal(sourceURL, destURL, deleteSource));\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return _copyModel.apply(this, arguments);\n}\nfunction moveModel(_x6, _x7) {\n  return _moveModel.apply(this, arguments);\n}\nfunction _moveModel() {\n  _moveModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(sourceURL, destURL) {\n    var deleteSource;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          deleteSource = true;\n          return _context5.abrupt(\"return\", cloneModelInternal(sourceURL, destURL, deleteSource));\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n  return _moveModel.apply(this, arguments);\n}\nexport { moveModel, copyModel, removeModel, listModels };","map":{"version":3,"names":["assert","IORouterRegistry","URL_SCHEME_SUFFIX","ModelStoreManagerRegistry","_classCallCheck","managers","_createClass","key","value","getInstance","instance","registerManager","scheme","manager","endsWith","slice","indexOf","length","registry","concat","getManager","Error","getSchemes","Object","keys","parseURL","url","join","split","path","cloneModelInternal","_x","_x2","_cloneModelInternal","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","sourceURL","destURL","deleteSource","loadHandlers","loadHandler","saveHandlers","saveHandler","sourceScheme","sourcePath","sameMedium","modelArtifacts","saveResult","_args","wrap","_callee$","_context","prev","next","undefined","getLoadHandlers","getSaveHandlers","load","sent","removeModel","save","abrupt","modelArtifactsInfo","stop","listModels","_listModels","_callee2","schemes","out","_iterator","_step","schemeOut","_callee2$","_context2","_createForOfIteratorHelper","s","n","done","t0","e","f","finish","_x3","_removeModel","_callee3","schemeAndPath","_callee3$","_context3","copyModel","_x4","_x5","_copyModel","_callee4","_callee4$","_context4","moveModel","_x6","_x7","_moveModel","_callee5","_callee5$","_context5"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\io\\model_management.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Classes and functions for model management across multiple storage mediums.\n *\n * Supported client actions:\n * - Listing models on all registered storage mediums.\n * - Remove model by URL from any registered storage mediums, by using URL\n *   string.\n * - Moving or copying model from one path to another in the same medium or from\n *   one medium to another, by using URL strings.\n */\n\nimport {assert} from '../util';\n\nimport {IORouterRegistry} from './router_registry';\nimport {ModelArtifactsInfo, ModelStoreManager} from './types';\n\nconst URL_SCHEME_SUFFIX = '://';\n\nexport class ModelStoreManagerRegistry {\n  // Singleton instance.\n  private static instance: ModelStoreManagerRegistry;\n\n  private managers: {[scheme: string]: ModelStoreManager};\n\n  private constructor() {\n    this.managers = {};\n  }\n\n  private static getInstance(): ModelStoreManagerRegistry {\n    if (ModelStoreManagerRegistry.instance == null) {\n      ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();\n    }\n    return ModelStoreManagerRegistry.instance;\n  }\n\n  /**\n   * Register a save-handler router.\n   *\n   * @param saveRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `save` method defined or `null`.\n   */\n  static registerManager(scheme: string, manager: ModelStoreManager) {\n    assert(scheme != null, () => 'scheme must not be undefined or null.');\n    if (scheme.endsWith(URL_SCHEME_SUFFIX)) {\n      scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));\n    }\n    assert(scheme.length > 0, () => 'scheme must not be an empty string.');\n    const registry = ModelStoreManagerRegistry.getInstance();\n    assert(\n        registry.managers[scheme] == null,\n        () => `A model store manager is already registered for scheme '${\n            scheme}'.`);\n    registry.managers[scheme] = manager;\n  }\n\n  static getManager(scheme: string): ModelStoreManager {\n    const manager = ModelStoreManagerRegistry.getInstance().managers[scheme];\n    if (manager == null) {\n      throw new Error(`Cannot find model manager for scheme '${scheme}'`);\n    }\n    return manager;\n  }\n\n  static getSchemes(): string[] {\n    return Object.keys(ModelStoreManagerRegistry.getInstance().managers);\n  }\n}\n\n/**\n * Helper method for parsing a URL string into a scheme and a path.\n *\n * @param url E.g., 'localstorage://my-model'\n * @returns A dictionary with two fields: scheme and path.\n *   Scheme: e.g., 'localstorage' in the example above.\n *   Path: e.g., 'my-model' in the example above.\n */\nfunction parseURL(url: string): {scheme: string, path: string} {\n  if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {\n    throw new Error(\n        `The url string provided does not contain a scheme. ` +\n        `Supported schemes are: ` +\n        `${ModelStoreManagerRegistry.getSchemes().join(',')}`);\n  }\n  return {\n    scheme: url.split(URL_SCHEME_SUFFIX)[0],\n    path: url.split(URL_SCHEME_SUFFIX)[1],\n  };\n}\n\nasync function cloneModelInternal(\n    sourceURL: string, destURL: string,\n    deleteSource = false): Promise<ModelArtifactsInfo> {\n  assert(\n      sourceURL !== destURL,\n      () => `Old path and new path are the same: '${sourceURL}'`);\n\n  const loadHandlers = IORouterRegistry.getLoadHandlers(sourceURL);\n  assert(\n      loadHandlers.length > 0,\n      () => `Copying failed because no load handler is found for source URL ${\n          sourceURL}.`);\n  assert(\n      loadHandlers.length < 2,\n      () => `Copying failed because more than one (${loadHandlers.length}) ` +\n          `load handlers for source URL ${sourceURL}.`);\n  const loadHandler = loadHandlers[0];\n\n  const saveHandlers = IORouterRegistry.getSaveHandlers(destURL);\n  assert(\n      saveHandlers.length > 0,\n      () => `Copying failed because no save handler is found for destination ` +\n          `URL ${destURL}.`);\n  assert(\n      saveHandlers.length < 2,\n      () => `Copying failed because more than one (${loadHandlers.length}) ` +\n          `save handlers for destination URL ${destURL}.`);\n  const saveHandler = saveHandlers[0];\n\n  const sourceScheme = parseURL(sourceURL).scheme;\n  const sourcePath = parseURL(sourceURL).path;\n  const sameMedium = sourceScheme === parseURL(sourceURL).scheme;\n\n  const modelArtifacts = await loadHandler.load();\n\n  // If moving within the same storage medium, remove the old model as soon as\n  // the loading is done. Without doing this, it is possible that the combined\n  // size of the two models will cause the cloning to fail.\n  if (deleteSource && sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme)\n        .removeModel(sourcePath);\n  }\n\n  const saveResult = await saveHandler.save(modelArtifacts);\n\n  // If moving between mediums, the deletion is done after the save succeeds.\n  // This guards against the case in which saving to the destination medium\n  // fails.\n  if (deleteSource && !sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme)\n        .removeModel(sourcePath);\n  }\n\n  return saveResult.modelArtifactsInfo;\n}\n\n/**\n * List all models stored in registered storage mediums.\n *\n * For a web browser environment, the registered mediums are Local Storage and\n * IndexedDB.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @returns A `Promise` of a dictionary mapping URLs of existing models to\n * their model artifacts info. URLs include medium-specific schemes, e.g.,\n *   'indexeddb://my/model/1'. Model artifacts info include type of the\n * model's topology, byte sizes of the topology, weights, etc.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function listModels(): Promise<{[url: string]: ModelArtifactsInfo}> {\n  const schemes = ModelStoreManagerRegistry.getSchemes();\n  const out: {[url: string]: ModelArtifactsInfo} = {};\n  for (const scheme of schemes) {\n    const schemeOut =\n        await ModelStoreManagerRegistry.getManager(scheme).listModels();\n    for (const path in schemeOut) {\n      const url = scheme + URL_SCHEME_SUFFIX + path;\n      out[url] = schemeOut[path];\n    }\n  }\n  return out;\n}\n\n/**\n * Remove a model specified by URL from a registered storage medium.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @param url A URL to a stored model, with a scheme prefix, e.g.,\n *   'localstorage://my-model-1', 'indexeddb://my/model/2'.\n * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\n *   is successful).\n * @throws Error if deletion fails, e.g., if no model exists at `path`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function removeModel(url: string): Promise<ModelArtifactsInfo> {\n  const schemeAndPath = parseURL(url);\n  const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);\n  return manager.removeModel(schemeAndPath.path);\n}\n\n/**\n * Copy a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Copying within a storage medium, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Copying between two storage mediums, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Copy the model, from Local Storage to IndexedDB.\n * await tf.io.copyModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove both models.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of copying.\n * @param destURL Destination URL of copying.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function copyModel(\n    sourceURL: string, destURL: string): Promise<ModelArtifactsInfo> {\n  const deleteSource = false;\n  return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n\n/**\n * Move a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Moving within a storage medium, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Moving between two storage mediums, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Move the model, from Local Storage to IndexedDB.\n * await tf.io.moveModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove the moved model.\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of moving.\n * @param destURL Destination URL of moving.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function moveModel(\n    sourceURL: string, destURL: string): Promise<ModelArtifactsInfo> {\n  const deleteSource = true;\n  return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n\nexport {moveModel, copyModel, removeModel, listModels};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}