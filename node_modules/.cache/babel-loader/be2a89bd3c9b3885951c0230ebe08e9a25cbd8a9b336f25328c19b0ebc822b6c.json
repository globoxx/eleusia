{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Gets the new shape of the input Tensor after it's been reshaped\n * to:\n * [blockShape[0], ..., blockShape[M-1], batch / prod(blockShape),\n * inputShape[1], ..., inputShape[N-1]]\n *\n * See step 1: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getReshaped(inputShape, blockShape, prod) {\n  var batchToSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var reshaped = [];\n  if (batchToSpace) {\n    reshaped = reshaped.concat(blockShape.slice(0));\n    reshaped.push(inputShape[0] / prod);\n    reshaped = reshaped.concat(inputShape.slice(1));\n  } else {\n    reshaped = reshaped.concat(inputShape[0]);\n    var spatialLength = blockShape.length;\n    for (var i = 0; i < spatialLength; ++i) {\n      reshaped = reshaped.concat([inputShape[i + 1] / blockShape[i], blockShape[i]]);\n    }\n    reshaped = reshaped.concat(inputShape.slice(spatialLength + 1));\n  }\n  return reshaped;\n}\n/**\n * Gets the permutation that will transpose the dimensions of the\n * reshaped tensor to shape:\n *\n * [batch / prod(block_shape),inputShape[1], blockShape[0], ...,\n * inputShape[M], blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * see step 2: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getPermuted(reshapedRank, blockShapeRank) {\n  var batchToSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var permuted = [];\n  if (batchToSpace) {\n    permuted.push(blockShapeRank);\n    for (var i = blockShapeRank + 1; i < reshapedRank; ++i) {\n      if (i <= 2 * blockShapeRank) {\n        permuted.push(i);\n        permuted.push(i - (blockShapeRank + 1));\n      } else {\n        permuted.push(i);\n      }\n    }\n  } else {\n    var permutedBeforeBatch = [];\n    var permutedAfterBatch = [];\n    for (var _i = 1; _i < reshapedRank; ++_i) {\n      if (_i >= blockShapeRank * 2 + 1 || _i % 2 === 1) {\n        permutedAfterBatch.push(_i);\n      } else {\n        permutedBeforeBatch.push(_i);\n      }\n    }\n    permuted.push.apply(permuted, permutedBeforeBatch);\n    permuted.push(0);\n    permuted.push.apply(permuted, permutedAfterBatch);\n  }\n  return permuted;\n}\n/**\n * Gets the shape of the reshaped and permuted input Tensor before any cropping\n * is applied.  The new shape will be:\n *\n * [batch / prod(blockShape),inputShape[1] * blockShape[0], ...,\n * inputShape[M] * blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * See step 3: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getReshapedPermuted(inputShape, blockShape, prod) {\n  var batchToSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var reshapedPermuted = [];\n  if (batchToSpace) {\n    reshapedPermuted.push(inputShape[0] / prod);\n  } else {\n    reshapedPermuted.push(inputShape[0] * prod);\n  }\n  for (var i = 1; i < inputShape.length; ++i) {\n    if (i <= blockShape.length) {\n      if (batchToSpace) {\n        reshapedPermuted.push(blockShape[i - 1] * inputShape[i]);\n      } else {\n        reshapedPermuted.push(inputShape[i] / blockShape[i - 1]);\n      }\n    } else {\n      reshapedPermuted.push(inputShape[i]);\n    }\n  }\n  return reshapedPermuted;\n}\n/**\n * Converts the crops argument into the beginning coordinates of a slice\n * operation.\n */\nexport function getSliceBeginCoords(crops, blockShape) {\n  var sliceBeginCoords = [0];\n  for (var i = 0; i < blockShape; ++i) {\n    sliceBeginCoords.push(crops[i][0]);\n  }\n  return sliceBeginCoords;\n}\n/**\n * Converts the crops argument into the size of a slice operation.  When\n * combined with getSliceBeginCoords this function allows the reshaped and\n * permuted Tensor to be cropped to its final output shape of:\n *\n * inputShape[1] * blockShape[0] - crops[0,0] - crops[0,1], ...,\n * inputShape[M] * blockShape[M-1] -crops[M-1,0] -\n * crops[M-1,1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * See step 4: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getSliceSize(uncroppedShape, crops, blockShape) {\n  var sliceSize = uncroppedShape.slice(0, 1);\n  for (var i = 0; i < blockShape; ++i) {\n    sliceSize.push(uncroppedShape[i + 1] - crops[i][0] - crops[i][1]);\n  }\n  return sliceSize;\n}","map":{"version":3,"names":["getReshaped","inputShape","blockShape","prod","batchToSpace","arguments","length","undefined","reshaped","concat","slice","push","spatialLength","i","getPermuted","reshapedRank","blockShapeRank","permuted","permutedBeforeBatch","permutedAfterBatch","apply","getReshapedPermuted","reshapedPermuted","getSliceBeginCoords","crops","sliceBeginCoords","getSliceSize","uncroppedShape","sliceSize"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\array_ops_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Gets the new shape of the input Tensor after it's been reshaped\n * to:\n * [blockShape[0], ..., blockShape[M-1], batch / prod(blockShape),\n * inputShape[1], ..., inputShape[N-1]]\n *\n * See step 1: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getReshaped(\n    inputShape: number[], blockShape: number[], prod: number,\n    batchToSpace = true): number[] {\n  let reshaped: number[] = [];\n  if (batchToSpace) {\n    reshaped = reshaped.concat(blockShape.slice(0));\n    reshaped.push(inputShape[0] / prod);\n    reshaped = reshaped.concat(inputShape.slice(1));\n  } else {\n    reshaped = reshaped.concat(inputShape[0]);\n    const spatialLength = blockShape.length;\n    for (let i = 0; i < spatialLength; ++i) {\n      reshaped =\n          reshaped.concat([inputShape[i + 1] / blockShape[i], blockShape[i]]);\n    }\n    reshaped = reshaped.concat(inputShape.slice(spatialLength + 1));\n  }\n  return reshaped;\n}\n\n/**\n * Gets the permutation that will transpose the dimensions of the\n * reshaped tensor to shape:\n *\n * [batch / prod(block_shape),inputShape[1], blockShape[0], ...,\n * inputShape[M], blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * see step 2: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getPermuted(\n    reshapedRank: number, blockShapeRank: number,\n    batchToSpace = true): number[] {\n  const permuted = [];\n  if (batchToSpace) {\n    permuted.push(blockShapeRank);\n    for (let i = blockShapeRank + 1; i < reshapedRank; ++i) {\n      if (i <= 2 * blockShapeRank) {\n        permuted.push(i);\n        permuted.push(i - (blockShapeRank + 1));\n      } else {\n        permuted.push(i);\n      }\n    }\n  } else {\n    const permutedBeforeBatch = [];\n    const permutedAfterBatch = [];\n    for (let i = 1; i < reshapedRank; ++i) {\n      if (i >= blockShapeRank * 2 + 1 || i % 2 === 1) {\n        permutedAfterBatch.push(i);\n      } else {\n        permutedBeforeBatch.push(i);\n      }\n    }\n    permuted.push(...permutedBeforeBatch);\n    permuted.push(0);\n    permuted.push(...permutedAfterBatch);\n  }\n  return permuted;\n}\n\n/**\n * Gets the shape of the reshaped and permuted input Tensor before any cropping\n * is applied.  The new shape will be:\n *\n * [batch / prod(blockShape),inputShape[1] * blockShape[0], ...,\n * inputShape[M] * blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * See step 3: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getReshapedPermuted(\n    inputShape: number[], blockShape: number[], prod: number,\n    batchToSpace = true): number[] {\n  const reshapedPermuted = [];\n\n  if (batchToSpace) {\n    reshapedPermuted.push(inputShape[0] / prod);\n  } else {\n    reshapedPermuted.push(inputShape[0] * prod);\n  }\n\n  for (let i = 1; i < inputShape.length; ++i) {\n    if (i <= blockShape.length) {\n      if (batchToSpace) {\n        reshapedPermuted.push(blockShape[i - 1] * inputShape[i]);\n      } else {\n        reshapedPermuted.push(inputShape[i] / blockShape[i - 1]);\n      }\n    } else {\n      reshapedPermuted.push(inputShape[i]);\n    }\n  }\n\n  return reshapedPermuted;\n}\n\n/**\n * Converts the crops argument into the beginning coordinates of a slice\n * operation.\n */\nexport function getSliceBeginCoords(\n    crops: number[][], blockShape: number): number[] {\n  const sliceBeginCoords = [0];\n  for (let i = 0; i < blockShape; ++i) {\n    sliceBeginCoords.push(crops[i][0]);\n  }\n  return sliceBeginCoords;\n}\n\n/**\n * Converts the crops argument into the size of a slice operation.  When\n * combined with getSliceBeginCoords this function allows the reshaped and\n * permuted Tensor to be cropped to its final output shape of:\n *\n * inputShape[1] * blockShape[0] - crops[0,0] - crops[0,1], ...,\n * inputShape[M] * blockShape[M-1] -crops[M-1,0] -\n * crops[M-1,1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * See step 4: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getSliceSize(\n    uncroppedShape: number[], crops: number[][], blockShape: number): number[] {\n  const sliceSize = uncroppedShape.slice(0, 1);\n  for (let i = 0; i < blockShape; ++i) {\n    sliceSize.push(uncroppedShape[i + 1] - crops[i][0] - crops[i][1]);\n  }\n\n  return sliceSize;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}