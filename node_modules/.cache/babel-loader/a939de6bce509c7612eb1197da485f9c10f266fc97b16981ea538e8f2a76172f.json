{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nonMaxSuppressionV3Impl } from '../../backends/non_max_suppression_impl';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { tensor1d } from '../tensor1d';\n/**\n * Performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This is the async version of `nonMaxSuppression`\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @return A 1D tensor with the selected box indices.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction nonMaxSuppressionAsync_(_x, _x2, _x3) {\n  return _nonMaxSuppressionAsync_.apply(this, arguments);\n}\nfunction _nonMaxSuppressionAsync_() {\n  _nonMaxSuppressionAsync_ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(boxes, scores, maxOutputSize) {\n    var iouThreshold,\n      scoreThreshold,\n      $boxes,\n      $scores,\n      inputs,\n      boxesAndScores,\n      boxesVals,\n      scoresVals,\n      _nonMaxSuppressionV3I,\n      selectedIndices,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          iouThreshold = _args.length > 3 && _args[3] !== undefined ? _args[3] : 0.5;\n          scoreThreshold = _args.length > 4 && _args[4] !== undefined ? _args[4] : Number.NEGATIVE_INFINITY;\n          $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n          $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n          inputs = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\n          maxOutputSize = inputs.maxOutputSize;\n          iouThreshold = inputs.iouThreshold;\n          scoreThreshold = inputs.scoreThreshold;\n          _context.next = 10;\n          return Promise.all([$boxes.data(), $scores.data()]);\n        case 10:\n          boxesAndScores = _context.sent;\n          boxesVals = boxesAndScores[0];\n          scoresVals = boxesAndScores[1]; // We call a cpu based impl directly with the typedarray data  here rather\n          // than a kernel because all kernels are synchronous (and thus cannot await\n          // .data()).\n          _nonMaxSuppressionV3I = nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold), selectedIndices = _nonMaxSuppressionV3I.selectedIndices;\n          if ($boxes !== boxes) {\n            $boxes.dispose();\n          }\n          if ($scores !== scores) {\n            $scores.dispose();\n          }\n          return _context.abrupt(\"return\", tensor1d(selectedIndices, 'int32'));\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _nonMaxSuppressionAsync_.apply(this, arguments);\n}\nexport var nonMaxSuppressionAsync = nonMaxSuppressionAsync_;","map":{"version":3,"names":["nonMaxSuppressionV3Impl","convertToTensor","nonMaxSuppSanityCheck","tensor1d","nonMaxSuppressionAsync_","_x","_x2","_x3","_nonMaxSuppressionAsync_","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","$boxes","$scores","inputs","boxesAndScores","boxesVals","scoresVals","_nonMaxSuppressionV3I","selectedIndices","_args","wrap","_callee$","_context","prev","next","length","undefined","Number","NEGATIVE_INFINITY","Promise","all","data","sent","dispose","abrupt","stop","nonMaxSuppressionAsync"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\image\\non_max_suppression_async.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {nonMaxSuppressionV3Impl} from '../../backends/non_max_suppression_impl';\nimport {Tensor1D, Tensor2D} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {nonMaxSuppSanityCheck} from '../nonmax_util';\nimport {tensor1d} from '../tensor1d';\n\n/**\n * Performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This is the async version of `nonMaxSuppression`\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @return A 1D tensor with the selected box indices.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nasync function nonMaxSuppressionAsync_(\n    boxes: Tensor2D|TensorLike, scores: Tensor1D|TensorLike,\n    maxOutputSize: number, iouThreshold = 0.5,\n    scoreThreshold = Number.NEGATIVE_INFINITY): Promise<Tensor1D> {\n  const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n  const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n\n  const inputs = nonMaxSuppSanityCheck(\n      $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\n  maxOutputSize = inputs.maxOutputSize;\n  iouThreshold = inputs.iouThreshold;\n  scoreThreshold = inputs.scoreThreshold;\n\n  const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);\n  const boxesVals = boxesAndScores[0];\n  const scoresVals = boxesAndScores[1];\n\n  // We call a cpu based impl directly with the typedarray data  here rather\n  // than a kernel because all kernels are synchronous (and thus cannot await\n  // .data()).\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n  if ($boxes !== boxes) {\n    $boxes.dispose();\n  }\n  if ($scores !== scores) {\n    $scores.dispose();\n  }\n\n  return tensor1d(selectedIndices, 'int32');\n}\n\nexport const nonMaxSuppressionAsync = nonMaxSuppressionAsync_;\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,uBAAuB,QAAO,yCAAyC;AAE/E,SAAQC,eAAe,QAAO,uBAAuB;AAErD,SAAQC,qBAAqB,QAAO,gBAAgB;AACpD,SAAQC,QAAQ,QAAO,aAAa;AAEpC;;;;;;;;;;;;;;;;;;;;AAAA,SAoBeC,uBAAuBA,CAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,wBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,yBAAA;EAAAA,wBAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAtC,SAAAC,QACIC,KAA0B,EAAEC,MAA2B,EACvDC,aAAqB;IAAA,IAAAC,YAAA;MAAAC,cAAA;MAAAC,MAAA;MAAAC,OAAA;MAAAC,MAAA;MAAAC,cAAA;MAAAC,SAAA;MAAAC,UAAA;MAAAC,qBAAA;MAAAC,eAAA;MAAAC,KAAA,GAAAlB,SAAA;IAAA,OAAAE,mBAAA,GAAAiB,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAEf,YAAY,GAAAU,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAG,GAAG;UACzCT,cAAc,GAAAS,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAGQ,MAAM,CAACC,iBAAiB;UACrCjB,MAAM,GAAGnB,eAAe,CAACc,KAAK,EAAE,OAAO,EAAE,wBAAwB,CAAC;UAClEM,OAAO,GAAGpB,eAAe,CAACe,MAAM,EAAE,QAAQ,EAAE,wBAAwB,CAAC;UAErEM,MAAM,GAAGpB,qBAAqB,CAChCkB,MAAM,EAAEC,OAAO,EAAEJ,aAAa,EAAEC,YAAY,EAAEC,cAAc,CAAC;UACjEF,aAAa,GAAGK,MAAM,CAACL,aAAa;UACpCC,YAAY,GAAGI,MAAM,CAACJ,YAAY;UAClCC,cAAc,GAAGG,MAAM,CAACH,cAAc;UAACY,QAAA,CAAAE,IAAA;UAAA,OAEVK,OAAO,CAACC,GAAG,CAAC,CAACnB,MAAM,CAACoB,IAAI,EAAE,EAAEnB,OAAO,CAACmB,IAAI,EAAE,CAAC,CAAC;QAAA;UAAnEjB,cAAc,GAAAQ,QAAA,CAAAU,IAAA;UACdjB,SAAS,GAAGD,cAAc,CAAC,CAAC,CAAC;UAC7BE,UAAU,GAAGF,cAAc,CAAC,CAAC,CAAC,EAEpC;UACA;UACA;UAAAG,qBAAA,GAC0B1B,uBAAuB,CAC7CwB,SAAS,EAAEC,UAAU,EAAER,aAAa,EAAEC,YAAY,EAAEC,cAAc,CAAC,EADhEQ,eAAe,GAAAD,qBAAA,CAAfC,eAAe;UAEtB,IAAIP,MAAM,KAAKL,KAAK,EAAE;YACpBK,MAAM,CAACsB,OAAO,EAAE;;UAElB,IAAIrB,OAAO,KAAKL,MAAM,EAAE;YACtBK,OAAO,CAACqB,OAAO,EAAE;;UAClB,OAAAX,QAAA,CAAAY,MAAA,WAEMxC,QAAQ,CAACwB,eAAe,EAAE,OAAO,CAAC;QAAA;QAAA;UAAA,OAAAI,QAAA,CAAAa,IAAA;MAAA;IAAA,GAAA9B,OAAA;EAAA,CAC1C;EAAA,OAAAN,wBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAED,OAAO,IAAMmC,sBAAsB,GAAGzC,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}