{"ast":null,"code":"import _toConsumableArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { Diag, util } from '@tensorflow/tfjs-core';\nimport { DiagProgram } from '../diag_gpu';\nimport { reshape } from './Reshape';\nexport function diag(args) {\n  var inputs = args.inputs,\n    backend = args.backend;\n  var x = inputs.x;\n  var outShape = [].concat(_toConsumableArray(x.shape), _toConsumableArray(x.shape));\n  var xSize = util.sizeFromShape(x.shape);\n  var flat = reshape({\n    inputs: {\n      x: x\n    },\n    backend: backend,\n    attrs: {\n      shape: [xSize]\n    }\n  });\n  var program = new DiagProgram(xSize);\n  var res = backend.runWebGLProgram(program, [flat], flat.dtype);\n  var out = reshape({\n    inputs: {\n      x: res\n    },\n    backend: backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(flat);\n  backend.disposeIntermediateTensorInfo(res);\n  return out;\n}\nexport var diagConfig = {\n  kernelName: Diag,\n  backendName: 'webgl',\n  kernelFunc: diag\n};","map":{"version":3,"names":["Diag","util","DiagProgram","reshape","diag","args","inputs","backend","x","outShape","concat","_toConsumableArray","shape","xSize","sizeFromShape","flat","attrs","program","res","runWebGLProgram","dtype","out","disposeIntermediateTensorInfo","diagConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\kernels\\Diag.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DiagProgram} from '../diag_gpu';\nimport {reshape} from './Reshape';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const outShape = [...x.shape, ...x.shape];\n  const xSize = util.sizeFromShape(x.shape);\n\n  const flat = reshape({inputs: {x}, backend, attrs: {shape: [xSize]}});\n\n  const program = new DiagProgram(xSize);\n  const res = backend.runWebGLProgram(program, [flat], flat.dtype);\n\n  const out = reshape({inputs: {x: res}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo(flat);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return out;\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'webgl',\n  kernelFunc: diag as unknown as KernelFunc\n};\n"],"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,IAAI,EAAoDC,IAAI,QAAO,uBAAuB;AAGlG,SAAQC,WAAW,QAAO,aAAa;AACvC,SAAQC,OAAO,QAAO,WAAW;AAEjC,OAAM,SAAUC,IAAIA,CAACC,IAAqD;EAExE,IAAOC,MAAM,GAAaD,IAAI,CAAvBC,MAAM;IAAEC,OAAO,GAAIF,IAAI,CAAfE,OAAO;EACtB,IAAOC,CAAC,GAAIF,MAAM,CAAXE,CAAC;EAER,IAAMC,QAAQ,MAAAC,MAAA,CAAAC,kBAAA,CAAOH,CAAC,CAACI,KAAK,GAAAD,kBAAA,CAAKH,CAAC,CAACI,KAAK,EAAC;EACzC,IAAMC,KAAK,GAAGZ,IAAI,CAACa,aAAa,CAACN,CAAC,CAACI,KAAK,CAAC;EAEzC,IAAMG,IAAI,GAAGZ,OAAO,CAAC;IAACG,MAAM,EAAE;MAACE,CAAC,EAADA;IAAC,CAAC;IAAED,OAAO,EAAPA,OAAO;IAAES,KAAK,EAAE;MAACJ,KAAK,EAAE,CAACC,KAAK;IAAC;EAAC,CAAC,CAAC;EAErE,IAAMI,OAAO,GAAG,IAAIf,WAAW,CAACW,KAAK,CAAC;EACtC,IAAMK,GAAG,GAAGX,OAAO,CAACY,eAAe,CAACF,OAAO,EAAE,CAACF,IAAI,CAAC,EAAEA,IAAI,CAACK,KAAK,CAAC;EAEhE,IAAMC,GAAG,GAAGlB,OAAO,CAAC;IAACG,MAAM,EAAE;MAACE,CAAC,EAAEU;IAAG,CAAC;IAAEX,OAAO,EAAPA,OAAO;IAAES,KAAK,EAAE;MAACJ,KAAK,EAAEH;IAAQ;EAAC,CAAC,CAAC;EAE1EF,OAAO,CAACe,6BAA6B,CAACP,IAAI,CAAC;EAC3CR,OAAO,CAACe,6BAA6B,CAACJ,GAAG,CAAC;EAE1C,OAAOG,GAAG;AACZ;AAEA,OAAO,IAAME,UAAU,GAAiB;EACtCC,UAAU,EAAExB,IAAI;EAChByB,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAEtB;CACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}