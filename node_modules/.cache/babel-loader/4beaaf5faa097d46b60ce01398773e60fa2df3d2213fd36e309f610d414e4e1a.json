{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport var executeOp = function executeOp(node, tensorMap, context) {\n  var ops = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : tfOps;\n  switch (node.op) {\n    case 'SparseFillEmptyRows':\n      {\n        var _ops$sparse$sparseFil = ops.sparse.sparseFillEmptyRows(getParamValue('indices', node, tensorMap, context), getParamValue('values', node, tensorMap, context), getParamValue('denseShape', node, tensorMap, context), getParamValue('defaultValue', node, tensorMap, context)),\n          outputIndices = _ops$sparse$sparseFil.outputIndices,\n          outputValues = _ops$sparse$sparseFil.outputValues,\n          emptyRowIndicator = _ops$sparse$sparseFil.emptyRowIndicator,\n          reverseIndexMap = _ops$sparse$sparseFil.reverseIndexMap;\n        return [outputIndices, outputValues, emptyRowIndicator, reverseIndexMap];\n      }\n    case 'SparseReshape':\n      {\n        var _ops$sparse$sparseRes = ops.sparse.sparseReshape(getParamValue('inputIndices', node, tensorMap, context), getParamValue('inputShape', node, tensorMap, context), getParamValue('newShape', node, tensorMap, context)),\n          _outputIndices = _ops$sparse$sparseRes.outputIndices,\n          outputShape = _ops$sparse$sparseRes.outputShape;\n        return [_outputIndices, outputShape];\n      }\n    case 'SparseSegmentMean':\n      {\n        var outputData = ops.sparse.sparseSegmentMean(getParamValue('data', node, tensorMap, context), getParamValue('indices', node, tensorMap, context), getParamValue('segmentIds', node, tensorMap, context));\n        return [outputData];\n      }\n    case 'SparseSegmentSum':\n      {\n        var _outputData = ops.sparse.sparseSegmentSum(getParamValue('data', node, tensorMap, context), getParamValue('indices', node, tensorMap, context), getParamValue('segmentIds', node, tensorMap, context));\n        return [_outputData];\n      }\n    default:\n      throw TypeError(\"Node type \".concat(node.op, \" is not implemented\"));\n  }\n};\nexport var CATEGORY = 'sparse';","map":{"version":3,"names":["tfOps","getParamValue","executeOp","node","tensorMap","context","ops","arguments","length","undefined","op","_ops$sparse$sparseFil","sparse","sparseFillEmptyRows","outputIndices","outputValues","emptyRowIndicator","reverseIndexMap","_ops$sparse$sparseRes","sparseReshape","outputShape","outputData","sparseSegmentMean","sparseSegmentSum","TypeError","concat","CATEGORY"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-converter\\src\\operations\\executors\\sparse_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'SparseFillEmptyRows': {\n          const {\n            outputIndices,\n            outputValues,\n            emptyRowIndicator,\n            reverseIndexMap\n          } =\n              ops.sparse.sparseFillEmptyRows(\n                  getParamValue('indices', node, tensorMap, context) as\n                      Tensor2D,\n                  getParamValue('values', node, tensorMap, context) as Tensor1D,\n                  getParamValue('denseShape', node, tensorMap, context) as\n                      Tensor1D,\n                  getParamValue('defaultValue', node, tensorMap, context) as\n                      Scalar);\n          return [\n            outputIndices, outputValues, emptyRowIndicator, reverseIndexMap\n          ];\n        }\n        case 'SparseReshape': {\n          const {outputIndices, outputShape} = ops.sparse.sparseReshape(\n              getParamValue('inputIndices', node, tensorMap, context) as\n                  Tensor2D,\n              getParamValue('inputShape', node, tensorMap, context) as Tensor1D,\n              getParamValue('newShape', node, tensorMap, context) as Tensor1D);\n          return [outputIndices, outputShape];\n        }\n        case 'SparseSegmentMean': {\n          const outputData = ops.sparse.sparseSegmentMean(\n              getParamValue('data', node, tensorMap, context) as Tensor,\n              getParamValue('indices', node, tensorMap, context) as Tensor1D,\n              getParamValue('segmentIds', node, tensorMap, context) as\n                  Tensor1D);\n          return [outputData];\n        }\n        case 'SparseSegmentSum': {\n          const outputData = ops.sparse.sparseSegmentSum(\n              getParamValue('data', node, tensorMap, context) as Tensor,\n              getParamValue('indices', node, tensorMap, context) as Tensor1D,\n              getParamValue('segmentIds', node, tensorMap, context) as\n                  Tensor1D);\n          return [outputData];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'sparse';\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA;AACA,OAAO,KAAKA,KAAK,MAAM,kDAAkD;AAMzE,SAAQC,aAAa,QAAO,SAAS;AAErC,OAAO,IAAMC,SAAS,GAClB,SADSA,SAASA,CACjBC,IAAU,EAAEC,SAA0B,EACtCC,OAAyB,EAA2B;EAAA,IAAzBC,GAAG,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGP,KAAK;EACrC,QAAQG,IAAI,CAACO,EAAE;IACb,KAAK,qBAAqB;MAAE;QAC1B,IAAAC,qBAAA,GAMIL,GAAG,CAACM,MAAM,CAACC,mBAAmB,CAC1BZ,aAAa,CAAC,SAAS,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CACrC,EACZJ,aAAa,CAAC,QAAQ,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAa,EAC7DJ,aAAa,CAAC,YAAY,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CACxC,EACZJ,aAAa,CAAC,cAAc,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAC5C,CAAC;UAZjBS,aAAa,GAAAH,qBAAA,CAAbG,aAAa;UACbC,YAAY,GAAAJ,qBAAA,CAAZI,YAAY;UACZC,iBAAiB,GAAAL,qBAAA,CAAjBK,iBAAiB;UACjBC,eAAe,GAAAN,qBAAA,CAAfM,eAAe;QAUjB,OAAO,CACLH,aAAa,EAAEC,YAAY,EAAEC,iBAAiB,EAAEC,eAAe,CAChE;;IAEH,KAAK,eAAe;MAAE;QACpB,IAAAC,qBAAA,GAAqCZ,GAAG,CAACM,MAAM,CAACO,aAAa,CACzDlB,aAAa,CAAC,cAAc,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAC1C,EACZJ,aAAa,CAAC,YAAY,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAa,EACjEJ,aAAa,CAAC,UAAU,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAa,CAAC;UAJ7DS,cAAa,GAAAI,qBAAA,CAAbJ,aAAa;UAAEM,WAAW,GAAAF,qBAAA,CAAXE,WAAW;QAKjC,OAAO,CAACN,cAAa,EAAEM,WAAW,CAAC;;IAErC,KAAK,mBAAmB;MAAE;QACxB,IAAMC,UAAU,GAAGf,GAAG,CAACM,MAAM,CAACU,iBAAiB,CAC3CrB,aAAa,CAAC,MAAM,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAW,EACzDJ,aAAa,CAAC,SAAS,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAa,EAC9DJ,aAAa,CAAC,YAAY,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CACxC,CAAC;QACjB,OAAO,CAACgB,UAAU,CAAC;;IAErB,KAAK,kBAAkB;MAAE;QACvB,IAAMA,WAAU,GAAGf,GAAG,CAACM,MAAM,CAACW,gBAAgB,CAC1CtB,aAAa,CAAC,MAAM,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAW,EACzDJ,aAAa,CAAC,SAAS,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAa,EAC9DJ,aAAa,CAAC,YAAY,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CACxC,CAAC;QACjB,OAAO,CAACgB,WAAU,CAAC;;IAErB;MACE,MAAMG,SAAS,cAAAC,MAAA,CAActB,IAAI,CAACO,EAAE,yBAAsB;EAAC;AAEjE,CAAC;AAEL,OAAO,IAAMgB,QAAQ,GAAG,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}