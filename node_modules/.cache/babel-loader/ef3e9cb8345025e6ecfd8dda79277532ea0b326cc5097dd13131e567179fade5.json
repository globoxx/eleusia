{"ast":null,"code":"import _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport var TransposeProgram = /*#__PURE__*/_createClass(function TransposeProgram(aShape, newDim) {\n  _classCallCheck(this, TransposeProgram);\n  this.variableNames = ['A'];\n  var outputShape = new Array(aShape.length);\n  for (var i = 0; i < outputShape.length; i++) {\n    outputShape[i] = aShape[newDim[i]];\n  }\n  this.outputShape = outputShape;\n  this.rank = outputShape.length;\n  var dtype = getCoordsDataType(this.rank);\n  var switched = getSwitchedCoords(newDim);\n  this.userCode = \"\\n    void main() {\\n      \".concat(dtype, \" resRC = getOutputCoords();\\n      setOutput(getA(\").concat(switched, \"));\\n    }\\n    \");\n});\nfunction getSwitchedCoords(newDim) {\n  var rank = newDim.length;\n  if (rank > 6) {\n    throw Error(\"Transpose for rank \".concat(rank, \" is not yet supported\"));\n  }\n  var originalOrder = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n  var switchedCoords = new Array(rank);\n  for (var i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = originalOrder[i];\n  }\n  return switchedCoords.join();\n}","map":{"version":3,"names":["getCoordsDataType","TransposeProgram","_createClass","aShape","newDim","_classCallCheck","variableNames","outputShape","Array","length","i","rank","dtype","switched","getSwitchedCoords","userCode","concat","Error","originalOrder","switchedCoords","join"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\transpose_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposeProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const switched = getSwitchedCoords(newDim);\n\n    this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n  }\n}\n\nfunction getSwitchedCoords(newDim: number[]): string {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const originalOrder =\n      ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = originalOrder[i];\n  }\n  return switchedCoords.join();\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,iBAAiB,QAAO,mBAAmB;AAEnD,WAAaC,gBAAgB,gBAAAC,YAAA,CAM3B,SAAAD,iBAAYE,MAAgB,EAAEC,MAAgB;EAAAC,eAAA,OAAAJ,gBAAA;EAL9C,KAAAK,aAAa,GAAG,CAAC,GAAG,CAAC;EAMnB,IAAMC,WAAW,GAAa,IAAIC,KAAK,CAACL,MAAM,CAACM,MAAM,CAAC;EACtD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,WAAW,CAACE,MAAM,EAAEC,CAAC,EAAE,EAAE;IAC3CH,WAAW,CAACG,CAAC,CAAC,GAAGP,MAAM,CAACC,MAAM,CAACM,CAAC,CAAC,CAAC;;EAEpC,IAAI,CAACH,WAAW,GAAGA,WAAW;EAC9B,IAAI,CAACI,IAAI,GAAGJ,WAAW,CAACE,MAAM;EAC9B,IAAMG,KAAK,GAAGZ,iBAAiB,CAAC,IAAI,CAACW,IAAI,CAAC;EAC1C,IAAME,QAAQ,GAAGC,iBAAiB,CAACV,MAAM,CAAC;EAE1C,IAAI,CAACW,QAAQ,iCAAAC,MAAA,CAETJ,KAAK,wDAAAI,MAAA,CACUH,QAAQ,qBAE1B;AACH,CAAC;AAGH,SAASC,iBAAiBA,CAACV,MAAgB;EACzC,IAAMO,IAAI,GAAGP,MAAM,CAACK,MAAM;EAC1B,IAAIE,IAAI,GAAG,CAAC,EAAE;IACZ,MAAMM,KAAK,uBAAAD,MAAA,CAAuBL,IAAI,2BAAwB;;EAEhE,IAAMO,aAAa,GACf,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;EACtE,IAAMC,cAAc,GAAG,IAAIX,KAAK,CAACG,IAAI,CAAC;EACtC,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,MAAM,CAACK,MAAM,EAAEC,CAAC,EAAE,EAAE;IACtCS,cAAc,CAACf,MAAM,CAACM,CAAC,CAAC,CAAC,GAAGQ,aAAa,CAACR,CAAC,CAAC;;EAE9C,OAAOS,cAAc,CAACC,IAAI,EAAE;AAC9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}