{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { nonMaxSuppressionV5Impl } from '../../backends/non_max_suppression_impl';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { tensor1d } from '../tensor1d';\n/**\r\n * Asynchronously performs non maximum suppression of bounding boxes based on\r\n * iou (intersection over union).\r\n *\r\n * This op also supports a Soft-NMS mode (cf.\r\n * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score\r\n * of other overlapping boxes, therefore favoring different regions of the image\r\n * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`\r\n * parameter to be larger than 0.\r\n *\r\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\r\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\r\n *     the bounding box.\r\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\r\n * @param maxOutputSize The maximum number of boxes to be selected.\r\n * @param iouThreshold A float representing the threshold for deciding whether\r\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\r\n *     Defaults to 0.5 (50% box overlap).\r\n * @param scoreThreshold A threshold for deciding when to remove boxes based\r\n *     on score. Defaults to -inf, which means any score is accepted.\r\n * @param softNmsSigma A float representing the sigma parameter for Soft NMS.\r\n *     When sigma is 0, it falls back to nonMaxSuppression.\r\n * @return A map with the following properties:\r\n *     - selectedIndices: A 1D tensor with the selected box indices.\r\n *     - selectedScores: A 1D tensor with the corresponding scores for each\r\n *       selected box.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\r\n */\nfunction nonMaxSuppressionWithScoreAsync_(_x, _x2, _x3) {\n  return _nonMaxSuppressionWithScoreAsync_.apply(this, arguments);\n}\nfunction _nonMaxSuppressionWithScoreAsync_() {\n  _nonMaxSuppressionWithScoreAsync_ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(boxes, scores, maxOutputSize) {\n    var iouThreshold,\n      scoreThreshold,\n      softNmsSigma,\n      $boxes,\n      $scores,\n      params,\n      boxesAndScores,\n      boxesVals,\n      scoresVals,\n      _nonMaxSuppressionV5I,\n      selectedIndices,\n      selectedScores,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          iouThreshold = _args.length > 3 && _args[3] !== undefined ? _args[3] : 0.5;\n          scoreThreshold = _args.length > 4 && _args[4] !== undefined ? _args[4] : Number.NEGATIVE_INFINITY;\n          softNmsSigma = _args.length > 5 && _args[5] !== undefined ? _args[5] : 0.0;\n          $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n          $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n          params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n          maxOutputSize = params.maxOutputSize;\n          iouThreshold = params.iouThreshold;\n          scoreThreshold = params.scoreThreshold;\n          softNmsSigma = params.softNmsSigma;\n          _context.next = 12;\n          return Promise.all([$boxes.data(), $scores.data()]);\n        case 12:\n          boxesAndScores = _context.sent;\n          boxesVals = boxesAndScores[0];\n          scoresVals = boxesAndScores[1]; // We call a cpu based impl directly with the typedarray data  here rather\n          // than a kernel because all kernels are synchronous (and thus cannot await\n          // .data()).\n          _nonMaxSuppressionV5I = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma), selectedIndices = _nonMaxSuppressionV5I.selectedIndices, selectedScores = _nonMaxSuppressionV5I.selectedScores;\n          if ($boxes !== boxes) {\n            $boxes.dispose();\n          }\n          if ($scores !== scores) {\n            $scores.dispose();\n          }\n          return _context.abrupt(\"return\", {\n            selectedIndices: tensor1d(selectedIndices, 'int32'),\n            selectedScores: tensor1d(selectedScores)\n          });\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _nonMaxSuppressionWithScoreAsync_.apply(this, arguments);\n}\nexport var nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;","map":{"version":3,"names":["nonMaxSuppressionV5Impl","convertToTensor","nonMaxSuppSanityCheck","tensor1d","nonMaxSuppressionWithScoreAsync_","_x","_x2","_x3","_nonMaxSuppressionWithScoreAsync_","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","$boxes","$scores","params","boxesAndScores","boxesVals","scoresVals","_nonMaxSuppressionV5I","selectedIndices","selectedScores","_args","wrap","_callee$","_context","prev","next","length","undefined","Number","NEGATIVE_INFINITY","Promise","all","data","sent","dispose","abrupt","stop","nonMaxSuppressionWithScoreAsync"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\image\\non_max_suppression_with_score_async.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {nonMaxSuppressionV5Impl} from '../../backends/non_max_suppression_impl';\nimport {Tensor1D, Tensor2D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {nonMaxSuppSanityCheck} from '../nonmax_util';\nimport {tensor1d} from '../tensor1d';\n\n/**\n * Asynchronously performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This op also supports a Soft-NMS mode (cf.\n * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score\n * of other overlapping boxes, therefore favoring different regions of the image\n * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`\n * parameter to be larger than 0.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param softNmsSigma A float representing the sigma parameter for Soft NMS.\n *     When sigma is 0, it falls back to nonMaxSuppression.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - selectedScores: A 1D tensor with the corresponding scores for each\n *       selected box.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nasync function nonMaxSuppressionWithScoreAsync_(\n    boxes: Tensor2D|TensorLike, scores: Tensor1D|TensorLike,\n    maxOutputSize: number, iouThreshold = 0.5,\n    scoreThreshold = Number.NEGATIVE_INFINITY,\n    softNmsSigma = 0.0): Promise<NamedTensorMap> {\n  const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n  const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n\n  const params = nonMaxSuppSanityCheck(\n      $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold,\n      softNmsSigma);\n  maxOutputSize = params.maxOutputSize;\n  iouThreshold = params.iouThreshold;\n  scoreThreshold = params.scoreThreshold;\n  softNmsSigma = params.softNmsSigma;\n\n  const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);\n  const boxesVals = boxesAndScores[0];\n  const scoresVals = boxesAndScores[1];\n\n  // We call a cpu based impl directly with the typedarray data  here rather\n  // than a kernel because all kernels are synchronous (and thus cannot await\n  // .data()).\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      softNmsSigma);\n\n  if ($boxes !== boxes) {\n    $boxes.dispose();\n  }\n  if ($scores !== scores) {\n    $scores.dispose();\n  }\n\n  return {\n    selectedIndices: tensor1d(selectedIndices, 'int32'),\n    selectedScores: tensor1d(selectedScores)\n  };\n}\n\nexport const nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}