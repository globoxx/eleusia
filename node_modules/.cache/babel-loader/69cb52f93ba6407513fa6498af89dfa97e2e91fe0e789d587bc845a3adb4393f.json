{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _asyncToGenerator from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nvar DATABASE_NAME = 'tensorflowjs';\nvar DATABASE_VERSION = 1;\n// Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\nvar MODEL_STORE_NAME = 'models_store';\n// 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\nvar INFO_STORE_NAME = 'model_info_store';\n/**\r\n * Delete the entire database for tensorflow.js, including the models store.\r\n */\nexport function deleteDatabase() {\n  return _deleteDatabase.apply(this, arguments);\n}\nfunction _deleteDatabase() {\n  _deleteDatabase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n    var idbFactory;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          idbFactory = getIndexedDBFactory();\n          return _context5.abrupt(\"return\", new Promise(function (resolve, reject) {\n            var deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n            deleteRequest.onsuccess = function () {\n              return resolve();\n            };\n            deleteRequest.onerror = function (error) {\n              return reject(error);\n            };\n          }));\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n  return _deleteDatabase.apply(this, arguments);\n}\nfunction getIndexedDBFactory() {\n  if (!env().getBool('IS_BROWSER')) {\n    // TODO(cais): Add more info about what IOHandler subtypes are available.\n    //   Maybe point to a doc page on the web and/or automatically determine\n    //   the available IOHandlers and print them in the error message.\n    throw new Error('Failed to obtain IndexedDB factory because the current environment' + 'is not a web browser.');\n  }\n  // tslint:disable-next-line:no-any\n  var theWindow = typeof window === 'undefined' ? self : window;\n  var factory = theWindow.indexedDB || theWindow.mozIndexedDB || theWindow.webkitIndexedDB || theWindow.msIndexedDB || theWindow.shimIndexedDB;\n  if (factory == null) {\n    throw new Error('The current browser does not appear to support IndexedDB.');\n  }\n  return factory;\n}\nfunction setUpDatabase(openRequest) {\n  var db = openRequest.result;\n  db.createObjectStore(MODEL_STORE_NAME, {\n    keyPath: 'modelPath'\n  });\n  db.createObjectStore(INFO_STORE_NAME, {\n    keyPath: 'modelPath'\n  });\n}\n/**\r\n * IOHandler subclass: Browser IndexedDB.\r\n *\r\n * See the doc string of `browserIndexedDB` for more details.\r\n */\nexport var BrowserIndexedDB = /*#__PURE__*/function () {\n  function BrowserIndexedDB(modelPath) {\n    _classCallCheck(this, BrowserIndexedDB);\n    this.indexedDB = getIndexedDBFactory();\n    if (modelPath == null || !modelPath) {\n      throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n  }\n  _createClass(BrowserIndexedDB, [{\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(modelArtifacts) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(modelArtifacts.modelTopology instanceof ArrayBuffer)) {\n                _context.next = 2;\n                break;\n              }\n              throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');\n            case 2:\n              return _context.abrupt(\"return\", this.databaseAction(this.modelPath, modelArtifacts));\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function save(_x) {\n        return _save.apply(this, arguments);\n      }\n      return save;\n    }()\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", this.databaseAction(this.modelPath));\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function load() {\n        return _load.apply(this, arguments);\n      }\n      return load;\n    }()\n    /**\r\n     * Perform database action to put model artifacts into or read model artifacts\r\n     * from IndexedDB object store.\r\n     *\r\n     * Whether the action is put or get depends on whether `modelArtifacts` is\r\n     * specified. If it is specified, the action will be put; otherwise the action\r\n     * will be get.\r\n     *\r\n     * @param modelPath A unique string path for the model.\r\n     * @param modelArtifacts If specified, it will be the model artifacts to be\r\n     *   stored in IndexedDB.\r\n     * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\r\n     *   of `ModelArtifacts`, if the action is get.\r\n     */\n  }, {\n    key: \"databaseAction\",\n    value: function databaseAction(modelPath, modelArtifacts) {\n      var _this = this;\n      return new Promise(function (resolve, reject) {\n        var openRequest = _this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n        openRequest.onupgradeneeded = function () {\n          return setUpDatabase(openRequest);\n        };\n        openRequest.onsuccess = function () {\n          var db = openRequest.result;\n          if (modelArtifacts == null) {\n            // Read model out from object store.\n            var modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n            var modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n            var getRequest = modelStore.get(_this.modelPath);\n            getRequest.onsuccess = function () {\n              if (getRequest.result == null) {\n                db.close();\n                return reject(new Error(\"Cannot find model with path '\".concat(_this.modelPath, \"' \") + \"in IndexedDB.\"));\n              } else {\n                resolve(getRequest.result.modelArtifacts);\n              }\n            };\n            getRequest.onerror = function (error) {\n              db.close();\n              return reject(getRequest.error);\n            };\n            modelTx.oncomplete = function () {\n              return db.close();\n            };\n          } else {\n            // Put model into object store.\n            var modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n            // First, put ModelArtifactsInfo into info store.\n            var infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n            var infoStore = infoTx.objectStore(INFO_STORE_NAME);\n            var putInfoRequest;\n            try {\n              putInfoRequest = infoStore.put({\n                modelPath: _this.modelPath,\n                modelArtifactsInfo: modelArtifactsInfo\n              });\n            } catch (error) {\n              return reject(error);\n            }\n            var _modelTx;\n            putInfoRequest.onsuccess = function () {\n              // Second, put model data into model store.\n              _modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n              var modelStore = _modelTx.objectStore(MODEL_STORE_NAME);\n              var putModelRequest;\n              try {\n                putModelRequest = modelStore.put({\n                  modelPath: _this.modelPath,\n                  modelArtifacts: modelArtifacts,\n                  modelArtifactsInfo: modelArtifactsInfo\n                });\n              } catch (error) {\n                // Sometimes, the serialized value is too large to store.\n                return reject(error);\n              }\n              putModelRequest.onsuccess = function () {\n                return resolve({\n                  modelArtifactsInfo: modelArtifactsInfo\n                });\n              };\n              putModelRequest.onerror = function (error) {\n                // If the put-model request fails, roll back the info entry as\n                // well.\n                infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                var deleteInfoRequest = infoStore.delete(_this.modelPath);\n                deleteInfoRequest.onsuccess = function () {\n                  db.close();\n                  return reject(putModelRequest.error);\n                };\n                deleteInfoRequest.onerror = function (error) {\n                  db.close();\n                  return reject(putModelRequest.error);\n                };\n              };\n            };\n            putInfoRequest.onerror = function (error) {\n              db.close();\n              return reject(putInfoRequest.error);\n            };\n            infoTx.oncomplete = function () {\n              if (_modelTx == null) {\n                db.close();\n              } else {\n                _modelTx.oncomplete = function () {\n                  return db.close();\n                };\n              }\n            };\n          }\n        };\n        openRequest.onerror = function (error) {\n          return reject(openRequest.error);\n        };\n      });\n    }\n  }]);\n  return BrowserIndexedDB;\n}();\nBrowserIndexedDB.URL_SCHEME = 'indexeddb://';\nexport var indexedDBRouter = function indexedDBRouter(url) {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n      return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\n/**\r\n * Creates a browser IndexedDB IOHandler for saving and loading models.\r\n *\r\n * ```js\r\n * const model = tf.sequential();\r\n * model.add(\r\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\r\n *\r\n * const saveResult = await model.save('indexeddb://MyModel'));\r\n * console.log(saveResult);\r\n * ```\r\n *\r\n * @param modelPath A unique identifier for the model to be saved. Must be a\r\n *   non-empty string.\r\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\r\n *   which can be used with, e.g., `tf.Model.save`.\r\n */\nexport function browserIndexedDB(modelPath) {\n  return new BrowserIndexedDB(modelPath);\n}\nfunction maybeStripScheme(key) {\n  return key.startsWith(BrowserIndexedDB.URL_SCHEME) ? key.slice(BrowserIndexedDB.URL_SCHEME.length) : key;\n}\nexport var BrowserIndexedDBManager = /*#__PURE__*/function () {\n  function BrowserIndexedDBManager() {\n    _classCallCheck(this, BrowserIndexedDBManager);\n    this.indexedDB = getIndexedDBFactory();\n  }\n  _createClass(BrowserIndexedDBManager, [{\n    key: \"listModels\",\n    value: function () {\n      var _listModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _this2 = this;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n                var openRequest = _this2.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n                openRequest.onupgradeneeded = function () {\n                  return setUpDatabase(openRequest);\n                };\n                openRequest.onsuccess = function () {\n                  var db = openRequest.result;\n                  var tx = db.transaction(INFO_STORE_NAME, 'readonly');\n                  var store = tx.objectStore(INFO_STORE_NAME);\n                  // tslint:disable:max-line-length\n                  // Need to cast `store` as `any` here because TypeScript's DOM\n                  // library does not have the `getAll()` method even though the\n                  // method is supported in the latest version of most mainstream\n                  // browsers:\n                  // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n                  // tslint:enable:max-line-length\n                  // tslint:disable-next-line:no-any\n                  var getAllInfoRequest = store.getAll();\n                  getAllInfoRequest.onsuccess = function () {\n                    var out = {};\n                    var _iterator = _createForOfIteratorHelper(getAllInfoRequest.result),\n                      _step;\n                    try {\n                      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                        var item = _step.value;\n                        out[item.modelPath] = item.modelArtifactsInfo;\n                      }\n                    } catch (err) {\n                      _iterator.e(err);\n                    } finally {\n                      _iterator.f();\n                    }\n                    resolve(out);\n                  };\n                  getAllInfoRequest.onerror = function (error) {\n                    db.close();\n                    return reject(getAllInfoRequest.error);\n                  };\n                  tx.oncomplete = function () {\n                    return db.close();\n                  };\n                };\n                openRequest.onerror = function (error) {\n                  return reject(openRequest.error);\n                };\n              }));\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      function listModels() {\n        return _listModels.apply(this, arguments);\n      }\n      return listModels;\n    }()\n  }, {\n    key: \"removeModel\",\n    value: function () {\n      var _removeModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(path) {\n        var _this3 = this;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              path = maybeStripScheme(path);\n              return _context4.abrupt(\"return\", new Promise(function (resolve, reject) {\n                var openRequest = _this3.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n                openRequest.onupgradeneeded = function () {\n                  return setUpDatabase(openRequest);\n                };\n                openRequest.onsuccess = function () {\n                  var db = openRequest.result;\n                  var infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n                  var infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                  var getInfoRequest = infoStore.get(path);\n                  var modelTx;\n                  getInfoRequest.onsuccess = function () {\n                    if (getInfoRequest.result == null) {\n                      db.close();\n                      return reject(new Error(\"Cannot find model with path '\".concat(path, \"' \") + \"in IndexedDB.\"));\n                    } else {\n                      // First, delete the entry in the info store.\n                      var deleteInfoRequest = infoStore.delete(path);\n                      var deleteModelData = function deleteModelData() {\n                        // Second, delete the entry in the model store.\n                        modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n                        var modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n                        var deleteModelRequest = modelStore.delete(path);\n                        deleteModelRequest.onsuccess = function () {\n                          return resolve(getInfoRequest.result.modelArtifactsInfo);\n                        };\n                        deleteModelRequest.onerror = function (error) {\n                          return reject(getInfoRequest.error);\n                        };\n                      };\n                      // Proceed with deleting model data regardless of whether deletion\n                      // of info data succeeds or not.\n                      deleteInfoRequest.onsuccess = deleteModelData;\n                      deleteInfoRequest.onerror = function (error) {\n                        deleteModelData();\n                        db.close();\n                        return reject(getInfoRequest.error);\n                      };\n                    }\n                  };\n                  getInfoRequest.onerror = function (error) {\n                    db.close();\n                    return reject(getInfoRequest.error);\n                  };\n                  infoTx.oncomplete = function () {\n                    if (modelTx == null) {\n                      db.close();\n                    } else {\n                      modelTx.oncomplete = function () {\n                        return db.close();\n                      };\n                    }\n                  };\n                };\n                openRequest.onerror = function (error) {\n                  return reject(openRequest.error);\n                };\n              }));\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }));\n      function removeModel(_x2) {\n        return _removeModel.apply(this, arguments);\n      }\n      return removeModel;\n    }()\n  }]);\n  return BrowserIndexedDBManager;\n}();","map":{"version":3,"names":["env","getModelArtifactsInfoForJSON","IORouterRegistry","DATABASE_NAME","DATABASE_VERSION","MODEL_STORE_NAME","INFO_STORE_NAME","deleteDatabase","_deleteDatabase","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee5","idbFactory","wrap","_callee5$","_context5","prev","next","getIndexedDBFactory","abrupt","Promise","resolve","reject","deleteRequest","onsuccess","onerror","error","stop","getBool","Error","theWindow","window","self","factory","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","shimIndexedDB","setUpDatabase","openRequest","db","result","createObjectStore","keyPath","BrowserIndexedDB","modelPath","_classCallCheck","_createClass","key","value","_save","_callee","modelArtifacts","_callee$","_context","modelTopology","ArrayBuffer","databaseAction","save","_x","_load","_callee2","_callee2$","_context2","load","_this","open","onupgradeneeded","modelTx","transaction","modelStore","objectStore","getRequest","get","close","concat","oncomplete","modelArtifactsInfo","infoTx","infoStore","putInfoRequest","put","putModelRequest","deleteInfoRequest","delete","URL_SCHEME","indexedDBRouter","url","Array","isArray","startsWith","browserIndexedDB","slice","length","registerSaveRouter","registerLoadRouter","maybeStripScheme","BrowserIndexedDBManager","_listModels","_callee3","_this2","_callee3$","_context3","tx","store","getAllInfoRequest","getAll","out","_iterator","_createForOfIteratorHelper","_step","s","n","done","item","err","e","f","listModels","_removeModel","_callee4","path","_this3","_callee4$","_context4","getInfoRequest","deleteModelData","deleteModelRequest","removeModel","_x2"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\io\\indexed_db.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport '../flags';\n\nimport {env} from '../environment';\n\nimport {getModelArtifactsInfoForJSON} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelArtifactsInfo, ModelStoreManager, SaveResult} from './types';\n\nconst DATABASE_NAME = 'tensorflowjs';\nconst DATABASE_VERSION = 1;\n\n// Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\nconst MODEL_STORE_NAME = 'models_store';\n// 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\nconst INFO_STORE_NAME = 'model_info_store';\n\n/**\n * Delete the entire database for tensorflow.js, including the models store.\n */\nexport async function deleteDatabase(): Promise<void> {\n  const idbFactory = getIndexedDBFactory();\n\n  return new Promise<void>((resolve, reject) => {\n    const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n    deleteRequest.onsuccess = () => resolve();\n    deleteRequest.onerror = error => reject(error);\n  });\n}\n\nfunction getIndexedDBFactory(): IDBFactory {\n  if (!env().getBool('IS_BROWSER')) {\n    // TODO(cais): Add more info about what IOHandler subtypes are available.\n    //   Maybe point to a doc page on the web and/or automatically determine\n    //   the available IOHandlers and print them in the error message.\n    throw new Error(\n        'Failed to obtain IndexedDB factory because the current environment' +\n        'is not a web browser.');\n  }\n  // tslint:disable-next-line:no-any\n  const theWindow: any = typeof window === 'undefined' ? self : window;\n  const factory = theWindow.indexedDB || theWindow.mozIndexedDB ||\n      theWindow.webkitIndexedDB || theWindow.msIndexedDB ||\n      theWindow.shimIndexedDB;\n  if (factory == null) {\n    throw new Error(\n        'The current browser does not appear to support IndexedDB.');\n  }\n  return factory;\n}\n\nfunction setUpDatabase(openRequest: IDBRequest) {\n  const db = openRequest.result as IDBDatabase;\n  db.createObjectStore(MODEL_STORE_NAME, {keyPath: 'modelPath'});\n  db.createObjectStore(INFO_STORE_NAME, {keyPath: 'modelPath'});\n}\n\n/**\n * IOHandler subclass: Browser IndexedDB.\n *\n * See the doc string of `browserIndexedDB` for more details.\n */\nexport class BrowserIndexedDB implements IOHandler {\n  protected readonly indexedDB: IDBFactory;\n  protected readonly modelPath: string;\n\n  static readonly URL_SCHEME = 'indexeddb://';\n\n  constructor(modelPath: string) {\n    this.indexedDB = getIndexedDBFactory();\n\n    if (modelPath == null || !modelPath) {\n      throw new Error(\n          'For IndexedDB, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    // TODO(cais): Support saving GraphDef models.\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserLocalStorage.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    }\n\n    return this.databaseAction(this.modelPath, modelArtifacts) as\n        Promise<SaveResult>;\n  }\n\n  async load(): Promise<ModelArtifacts> {\n    return this.databaseAction(this.modelPath) as Promise<ModelArtifacts>;\n  }\n\n  /**\n   * Perform database action to put model artifacts into or read model artifacts\n   * from IndexedDB object store.\n   *\n   * Whether the action is put or get depends on whether `modelArtifacts` is\n   * specified. If it is specified, the action will be put; otherwise the action\n   * will be get.\n   *\n   * @param modelPath A unique string path for the model.\n   * @param modelArtifacts If specified, it will be the model artifacts to be\n   *   stored in IndexedDB.\n   * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\n   *   of `ModelArtifacts`, if the action is get.\n   */\n  private databaseAction(modelPath: string, modelArtifacts?: ModelArtifacts):\n      Promise<ModelArtifacts|SaveResult> {\n    return new Promise<ModelArtifacts|SaveResult>((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n\n        if (modelArtifacts == null) {\n          // Read model out from object store.\n          const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n          const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n          const getRequest = modelStore.get(this.modelPath);\n          getRequest.onsuccess = () => {\n            if (getRequest.result == null) {\n              db.close();\n              return reject(new Error(\n                  `Cannot find model with path '${this.modelPath}' ` +\n                  `in IndexedDB.`));\n            } else {\n              resolve(getRequest.result.modelArtifacts);\n            }\n          };\n          getRequest.onerror = error => {\n            db.close();\n            return reject(getRequest.error);\n          };\n          modelTx.oncomplete = () => db.close();\n        } else {\n          // Put model into object store.\n          const modelArtifactsInfo: ModelArtifactsInfo =\n              getModelArtifactsInfoForJSON(modelArtifacts);\n          // First, put ModelArtifactsInfo into info store.\n          const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n          let infoStore = infoTx.objectStore(INFO_STORE_NAME);\n          let putInfoRequest: IDBRequest<IDBValidKey>;\n          try {\n            putInfoRequest =\n              infoStore.put({modelPath: this.modelPath, modelArtifactsInfo});\n          } catch (error) {\n            return reject(error);\n          }\n          let modelTx: IDBTransaction;\n          putInfoRequest.onsuccess = () => {\n            // Second, put model data into model store.\n            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n            let putModelRequest: IDBRequest<IDBValidKey>;\n            try {\n              putModelRequest = modelStore.put({\n                modelPath: this.modelPath,\n                modelArtifacts,\n                modelArtifactsInfo\n              });\n            } catch (error) {\n              // Sometimes, the serialized value is too large to store.\n              return reject(error);\n            }\n            putModelRequest.onsuccess = () => resolve({modelArtifactsInfo});\n            putModelRequest.onerror = error => {\n              // If the put-model request fails, roll back the info entry as\n              // well.\n              infoStore = infoTx.objectStore(INFO_STORE_NAME);\n              const deleteInfoRequest = infoStore.delete(this.modelPath);\n              deleteInfoRequest.onsuccess = () => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n              deleteInfoRequest.onerror = error => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n            };\n          };\n          putInfoRequest.onerror = error => {\n            db.close();\n            return reject(putInfoRequest.error);\n          };\n          infoTx.oncomplete = () => {\n            if (modelTx == null) {\n              db.close();\n            } else {\n              modelTx.oncomplete = () => db.close();\n            }\n          };\n        }\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n}\n\nexport const indexedDBRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n      return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\n\n/**\n * Creates a browser IndexedDB IOHandler for saving and loading models.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save('indexeddb://MyModel'));\n * console.log(saveResult);\n * ```\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\n *   which can be used with, e.g., `tf.Model.save`.\n */\nexport function browserIndexedDB(modelPath: string): IOHandler {\n  return new BrowserIndexedDB(modelPath);\n}\n\nfunction maybeStripScheme(key: string) {\n  return key.startsWith(BrowserIndexedDB.URL_SCHEME) ?\n      key.slice(BrowserIndexedDB.URL_SCHEME.length) :\n      key;\n}\n\nexport class BrowserIndexedDBManager implements ModelStoreManager {\n  private indexedDB: IDBFactory;\n\n  constructor() {\n    this.indexedDB = getIndexedDBFactory();\n  }\n\n  async listModels(): Promise<{[path: string]: ModelArtifactsInfo}> {\n    return new Promise<{[path: string]: ModelArtifactsInfo}>(\n        (resolve, reject) => {\n          const openRequest =\n              this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n          openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n          openRequest.onsuccess = () => {\n            const db = openRequest.result;\n            const tx = db.transaction(INFO_STORE_NAME, 'readonly');\n            const store = tx.objectStore(INFO_STORE_NAME);\n            // tslint:disable:max-line-length\n            // Need to cast `store` as `any` here because TypeScript's DOM\n            // library does not have the `getAll()` method even though the\n            // method is supported in the latest version of most mainstream\n            // browsers:\n            // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n            // tslint:enable:max-line-length\n            // tslint:disable-next-line:no-any\n            const getAllInfoRequest = (store as any).getAll() as IDBRequest;\n            getAllInfoRequest.onsuccess = () => {\n              const out: {[path: string]: ModelArtifactsInfo} = {};\n              for (const item of getAllInfoRequest.result) {\n                out[item.modelPath] = item.modelArtifactsInfo;\n              }\n              resolve(out);\n            };\n            getAllInfoRequest.onerror = error => {\n              db.close();\n              return reject(getAllInfoRequest.error);\n            };\n            tx.oncomplete = () => db.close();\n          };\n          openRequest.onerror = error => reject(openRequest.error);\n        });\n  }\n\n  async removeModel(path: string): Promise<ModelArtifactsInfo> {\n    path = maybeStripScheme(path);\n    return new Promise<ModelArtifactsInfo>((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n        const infoStore = infoTx.objectStore(INFO_STORE_NAME);\n\n        const getInfoRequest = infoStore.get(path);\n        let modelTx: IDBTransaction;\n        getInfoRequest.onsuccess = () => {\n          if (getInfoRequest.result == null) {\n            db.close();\n            return reject(new Error(\n                `Cannot find model with path '${path}' ` +\n                `in IndexedDB.`));\n          } else {\n            // First, delete the entry in the info store.\n            const deleteInfoRequest = infoStore.delete(path);\n            const deleteModelData = () => {\n              // Second, delete the entry in the model store.\n              modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n              const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n              const deleteModelRequest = modelStore.delete(path);\n              deleteModelRequest.onsuccess = () =>\n                  resolve(getInfoRequest.result.modelArtifactsInfo);\n              deleteModelRequest.onerror = error =>\n                  reject(getInfoRequest.error);\n            };\n            // Proceed with deleting model data regardless of whether deletion\n            // of info data succeeds or not.\n            deleteInfoRequest.onsuccess = deleteModelData;\n            deleteInfoRequest.onerror = error => {\n              deleteModelData();\n              db.close();\n              return reject(getInfoRequest.error);\n            };\n          }\n        };\n        getInfoRequest.onerror = error => {\n          db.close();\n          return reject(getInfoRequest.error);\n        };\n\n        infoTx.oncomplete = () => {\n          if (modelTx == null) {\n            db.close();\n          } else {\n            modelTx.oncomplete = () => db.close();\n          }\n        };\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}