{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { gather } from './gather';\nimport { reshape } from './reshape';\nimport { squeeze } from './squeeze';\nimport { whereAsync } from './where_async';\n/**\n * Apply boolean mask to tensor.\n *\n * ```js\n * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);\n * const mask = tf.tensor1d([1, 0, 1], 'bool');\n * const result = await tf.booleanMaskAsync(tensor, mask);\n * result.print();\n * ```\n *\n * @param tensor N-D tensor.\n * @param mask K-D boolean tensor, K <= N and K must be known statically.\n * @param axis A 0-D int Tensor representing the axis in tensor to mask from.\n *     By default, axis is 0 which will mask from the first dimension.\n *     Otherwise K + axis <= N.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction booleanMaskAsync_(_x, _x2, _x3) {\n  return _booleanMaskAsync_.apply(this, arguments);\n}\nfunction _booleanMaskAsync_() {\n  _booleanMaskAsync_ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(tensor, mask, axis) {\n    var $tensor, $mask, axisFrom, maskDim, tensorShape, leadingSize, i, targetTensorShape, reshapedTensor, reshapedMask, positivePositions, indices, res;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          $tensor = convertToTensor(tensor, 'tensor', 'boolMask');\n          $mask = convertToTensor(mask, 'mask', 'boolMask', 'bool');\n          axisFrom = axis == null ? 0 : axis;\n          maskDim = $mask.rank;\n          tensorShape = $tensor.shape;\n          util.assert(maskDim > 0, function () {\n            return 'mask cannot be scalar';\n          });\n          util.assertShapesMatch(tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape, \"mask's shape must match the first K dimensions of tensor's shape,\");\n          leadingSize = 1;\n          for (i = axisFrom; i < axisFrom + maskDim; i++) {\n            leadingSize *= tensorShape[i];\n          }\n          targetTensorShape = tensorShape.slice(0, axisFrom).concat([leadingSize], tensorShape.slice(axisFrom + maskDim));\n          reshapedTensor = reshape($tensor, targetTensorShape);\n          reshapedMask = reshape($mask, [-1]);\n          _context.next = 14;\n          return whereAsync(reshapedMask);\n        case 14:\n          positivePositions = _context.sent;\n          indices = squeeze(positivePositions, [1]);\n          res = gather(reshapedTensor, indices, axisFrom); // Ensure no memory leak.\n          if (tensor !== $tensor) {\n            $tensor.dispose();\n          }\n          if (mask !== $mask) {\n            $mask.dispose();\n          }\n          indices.dispose();\n          reshapedTensor.dispose();\n          reshapedMask.dispose();\n          positivePositions.dispose();\n          return _context.abrupt(\"return\", res);\n        case 24:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _booleanMaskAsync_.apply(this, arguments);\n}\nexport var booleanMaskAsync = booleanMaskAsync_;","map":{"version":3,"names":["convertToTensor","util","gather","reshape","squeeze","whereAsync","booleanMaskAsync_","_x","_x2","_x3","_booleanMaskAsync_","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","tensor","mask","axis","$tensor","$mask","axisFrom","maskDim","tensorShape","leadingSize","i","targetTensorShape","reshapedTensor","reshapedMask","positivePositions","indices","res","wrap","_callee$","_context","prev","next","rank","shape","assert","assertShapesMatch","slice","concat","sent","dispose","abrupt","stop","booleanMaskAsync"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\boolean_mask.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {gather} from './gather';\nimport {reshape} from './reshape';\nimport {squeeze} from './squeeze';\nimport {whereAsync} from './where_async';\n\n/**\n * Apply boolean mask to tensor.\n *\n * ```js\n * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);\n * const mask = tf.tensor1d([1, 0, 1], 'bool');\n * const result = await tf.booleanMaskAsync(tensor, mask);\n * result.print();\n * ```\n *\n * @param tensor N-D tensor.\n * @param mask K-D boolean tensor, K <= N and K must be known statically.\n * @param axis A 0-D int Tensor representing the axis in tensor to mask from.\n *     By default, axis is 0 which will mask from the first dimension.\n *     Otherwise K + axis <= N.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nasync function booleanMaskAsync_(\n    tensor: Tensor|TensorLike, mask: Tensor|TensorLike,\n    axis?: number): Promise<Tensor> {\n  const $tensor = convertToTensor(tensor, 'tensor', 'boolMask');\n  const $mask = convertToTensor(mask, 'mask', 'boolMask', 'bool');\n\n  const axisFrom = axis == null ? 0 : axis;\n  const maskDim = $mask.rank;\n  const tensorShape = $tensor.shape;\n\n  util.assert(maskDim > 0, () => 'mask cannot be scalar');\n  util.assertShapesMatch(\n      tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape,\n      `mask's shape must match the first K dimensions of tensor's shape,`);\n\n  let leadingSize = 1;\n  for (let i = axisFrom; i < axisFrom + maskDim; i++) {\n    leadingSize *= tensorShape[i];\n  }\n  const targetTensorShape =\n      tensorShape.slice(0, axisFrom)\n          .concat([leadingSize], tensorShape.slice(axisFrom + maskDim));\n  const reshapedTensor = reshape($tensor, targetTensorShape);\n  const reshapedMask = reshape($mask, [-1]);\n  const positivePositions = await whereAsync(reshapedMask);\n  const indices = squeeze(positivePositions, [1]);\n\n  const res = gather(reshapedTensor, indices, axisFrom);\n\n  // Ensure no memory leak.\n  if (tensor !== $tensor) {\n    $tensor.dispose();\n  }\n  if (mask !== $mask) {\n    $mask.dispose();\n  }\n  indices.dispose();\n  reshapedTensor.dispose();\n  reshapedMask.dispose();\n  positivePositions.dispose();\n\n  return res;\n}\n\nexport const booleanMaskAsync = booleanMaskAsync_;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}