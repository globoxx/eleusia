{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SparseToDense, util } from '@tensorflow/tfjs-core';\nimport { scatterImplCPU } from '../kernel_utils/shared';\nimport { ScatterProgram } from '../scatter_gpu';\nimport { reshape } from './Reshape';\nexport function sparseToDense(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var sparseIndices = inputs.sparseIndices,\n    sparseValues = inputs.sparseValues,\n    defaultValue = inputs.defaultValue;\n  var outputShape = attrs.outputShape;\n  var _backend_util$calcula = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape),\n    sliceRank = _backend_util$calcula.sliceRank,\n    numUpdates = _backend_util$calcula.numUpdates,\n    sliceSize = _backend_util$calcula.sliceSize,\n    strides = _backend_util$calcula.strides,\n    outputSize = _backend_util$calcula.outputSize;\n  var sumDupeIndices = false;\n  if (sparseValues.dtype === 'string') {\n    var indicesBuf = backend.bufferSync(sparseIndices);\n    var updatesBuf = backend.bufferSync(sparseValues);\n    var $defaultValue = util.decodeString(backend.readSync(defaultValue.dataId)[0]);\n    var outBuf = scatterImplCPU(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n  }\n  var program = new ScatterProgram(numUpdates, sliceRank, sparseIndices.shape.length, sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n  var res = backend.runWebGLProgram(program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n  var reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend: backend,\n    attrs: {\n      shape: outputShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\nexport var sparseToDenseConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgl',\n  kernelFunc: sparseToDense\n};","map":{"version":3,"names":["backend_util","SparseToDense","util","scatterImplCPU","ScatterProgram","reshape","sparseToDense","args","inputs","backend","attrs","sparseIndices","sparseValues","defaultValue","outputShape","_backend_util$calcula","calculateShapes","sliceRank","numUpdates","sliceSize","strides","outputSize","sumDupeIndices","dtype","indicesBuf","bufferSync","updatesBuf","$defaultValue","decodeString","readSync","dataId","outBuf","makeTensorInfo","values","program","shape","length","res","runWebGLProgram","reshaped","x","disposeIntermediateTensorInfo","sparseToDenseConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\kernels\\SparseToDense.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {scatterImplCPU} from '../kernel_utils/shared';\nimport {ScatterProgram} from '../scatter_gpu';\n\nimport {reshape} from './Reshape';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendWebGL,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  if (sparseValues.dtype === 'string') {\n    const indicesBuf = backend.bufferSync<Rank, 'int32'>(sparseIndices);\n    const updatesBuf = backend.bufferSync<Rank, 'string'>(sparseValues);\n    const $defaultValue = util.decodeString(\n        backend.readSync(defaultValue.dataId)[0] as Uint8Array);\n    const outBuf = scatterImplCPU(\n        indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n        sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n  }\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, sparseIndices.shape.length,\n      sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n\n  const res = backend.runWebGLProgram(\n      program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: outputShape}});\n\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgl',\n  kernelFunc: sparseToDense as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAkCC,aAAa,EAAuDC,IAAI,QAAO,uBAAuB;AAG5J,SAAQC,cAAc,QAAO,wBAAwB;AACrD,SAAQC,cAAc,QAAO,gBAAgB;AAE7C,SAAQC,OAAO,QAAO,WAAW;AAEjC,OAAM,SAAUC,aAAaA,CAACC,IAI7B;EACC,IAAOC,MAAM,GAAoBD,IAAI,CAA9BC,MAAM;IAAEC,OAAO,GAAWF,IAAI,CAAtBE,OAAO;IAAEC,KAAK,GAAIH,IAAI,CAAbG,KAAK;EAC7B,IAAOC,aAAa,GAAgCH,MAAM,CAAnDG,aAAa;IAAEC,YAAY,GAAkBJ,MAAM,CAApCI,YAAY;IAAEC,YAAY,GAAIL,MAAM,CAAtBK,YAAY;EAChD,IAAOC,WAAW,GAAIJ,KAAK,CAApBI,WAAW;EAElB,IAAAC,qBAAA,GACIf,YAAY,CAACgB,eAAe,CAACJ,YAAY,EAAED,aAAa,EAAEG,WAAW,CAAC;IADnEG,SAAS,GAAAF,qBAAA,CAATE,SAAS;IAAEC,UAAU,GAAAH,qBAAA,CAAVG,UAAU;IAAEC,SAAS,GAAAJ,qBAAA,CAATI,SAAS;IAAEC,OAAO,GAAAL,qBAAA,CAAPK,OAAO;IAAEC,UAAU,GAAAN,qBAAA,CAAVM,UAAU;EAE5D,IAAMC,cAAc,GAAG,KAAK;EAE5B,IAAIV,YAAY,CAACW,KAAK,KAAK,QAAQ,EAAE;IACnC,IAAMC,UAAU,GAAGf,OAAO,CAACgB,UAAU,CAAgBd,aAAa,CAAC;IACnE,IAAMe,UAAU,GAAGjB,OAAO,CAACgB,UAAU,CAAiBb,YAAY,CAAC;IACnE,IAAMe,aAAa,GAAGzB,IAAI,CAAC0B,YAAY,CACnCnB,OAAO,CAACoB,QAAQ,CAAChB,YAAY,CAACiB,MAAM,CAAC,CAAC,CAAC,CAAe,CAAC;IAC3D,IAAMC,MAAM,GAAG5B,cAAc,CACzBqB,UAAU,EAAEE,UAAU,EAAEZ,WAAW,EAAEO,UAAU,EAAEF,SAAS,EAAED,UAAU,EACtED,SAAS,EAAEG,OAAO,EAAEO,aAAa,EAAEL,cAAc,CAAC;IACtD,OAAOb,OAAO,CAACuB,cAAc,CAAClB,WAAW,EAAEiB,MAAM,CAACR,KAAK,EAAEQ,MAAM,CAACE,MAAM,CAAC;;EAEzE,IAAMC,OAAO,GAAG,IAAI9B,cAAc,CAC9Bc,UAAU,EAAED,SAAS,EAAEN,aAAa,CAACwB,KAAK,CAACC,MAAM,EACjDxB,YAAY,CAACuB,KAAK,CAACC,MAAM,EAAEhB,OAAO,EAAE,CAACC,UAAU,EAAE,CAAC,CAAC,EAAEC,cAAc,CAAC;EAExE,IAAMe,GAAG,GAAG5B,OAAO,CAAC6B,eAAe,CAC/BJ,OAAO,EAAE,CAACtB,YAAY,EAAED,aAAa,EAAEE,YAAY,CAAC,EAAED,YAAY,CAACW,KAAK,CAAC;EAE7E,IAAMgB,QAAQ,GACVlC,OAAO,CAAC;IAACG,MAAM,EAAE;MAACgC,CAAC,EAAEH;IAAG,CAAC;IAAE5B,OAAO,EAAPA,OAAO;IAAEC,KAAK,EAAE;MAACyB,KAAK,EAAErB;IAAW;EAAC,CAAC,CAAC;EAErEL,OAAO,CAACgC,6BAA6B,CAACJ,GAAG,CAAC;EAC1C,OAAOE,QAAQ;AACjB;AAEA,OAAO,IAAMG,mBAAmB,GAAiB;EAC/CC,UAAU,EAAE1C,aAAa;EACzB2C,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAEvC;CACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}