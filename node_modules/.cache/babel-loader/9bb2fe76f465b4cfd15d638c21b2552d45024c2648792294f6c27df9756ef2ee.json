{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Draw } from '@tensorflow/tfjs-core';\nexport function draw(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var image = inputs.image;\n  var canvas = attrs.canvas,\n    options = attrs.options;\n  var _ref = options || {},\n    contextOptions = _ref.contextOptions,\n    imageOptions = _ref.imageOptions;\n  var alpha = (imageOptions === null || imageOptions === void 0 ? void 0 : imageOptions.alpha) || 1;\n  var contextType = (contextOptions === null || contextOptions === void 0 ? void 0 : contextOptions.contextType) || '2d';\n  if (contextType !== '2d') {\n    throw new Error(\"Context type \".concat(contextOptions.contextType, \" is not supported by the CPU backend.\"));\n  }\n  var ctx = canvas.getContext(contextType, (contextOptions === null || contextOptions === void 0 ? void 0 : contextOptions.contextAttributes) || {});\n  if (ctx == null) {\n    throw new Error(\"Could not get the context with \".concat(contextType, \" type.\"));\n  }\n  var _image$shape$slice = image.shape.slice(0, 2),\n    _image$shape$slice2 = _slicedToArray(_image$shape$slice, 2),\n    height = _image$shape$slice2[0],\n    width = _image$shape$slice2[1];\n  var depth = image.shape.length === 2 ? 1 : image.shape[2];\n  var data = backend.data.get(image.dataId).values;\n  var multiplier = image.dtype === 'float32' ? 255 : 1;\n  var bytes = new Uint8ClampedArray(width * height * 4);\n  for (var i = 0; i < height * width; ++i) {\n    var rgba = [0, 0, 0, 255 * alpha];\n    for (var d = 0; d < depth; d++) {\n      var value = data[i * depth + d];\n      if (image.dtype === 'float32') {\n        if (value < 0 || value > 1) {\n          throw new Error(\"Tensor values for a float32 Tensor must be in the \" + \"range [0 - 1] but encountered \".concat(value, \".\"));\n        }\n      } else if (image.dtype === 'int32') {\n        if (value < 0 || value > 255) {\n          throw new Error(\"Tensor values for a int32 Tensor must be in the \" + \"range [0 - 255] but encountered \".concat(value, \".\"));\n        }\n      }\n      if (depth === 1) {\n        rgba[0] = value * multiplier;\n        rgba[1] = value * multiplier;\n        rgba[2] = value * multiplier;\n      } else {\n        rgba[d] = value * multiplier;\n      }\n    }\n    var j = i * 4;\n    bytes[j + 0] = Math.round(rgba[0]);\n    bytes[j + 1] = Math.round(rgba[1]);\n    bytes[j + 2] = Math.round(rgba[2]);\n    bytes[j + 3] = Math.round(rgba[3]);\n  }\n  canvas.width = width;\n  canvas.height = height;\n  var imageData = new ImageData(bytes, width, height);\n  ctx.putImageData(imageData, 0, 0);\n  return image;\n}\nexport var drawConfig = {\n  kernelName: Draw,\n  backendName: 'cpu',\n  kernelFunc: draw\n};","map":{"version":3,"names":["Draw","draw","args","inputs","backend","attrs","image","canvas","options","_ref","contextOptions","imageOptions","alpha","contextType","Error","concat","ctx","getContext","contextAttributes","_image$shape$slice","shape","slice","_image$shape$slice2","_slicedToArray","height","width","depth","length","data","get","dataId","values","multiplier","dtype","bytes","Uint8ClampedArray","i","rgba","d","value","j","Math","round","imageData","ImageData","putImageData","drawConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-cpu\\src\\kernels\\Draw.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Draw, DrawAttrs, DrawInputs, KernelConfig, KernelFunc, TypedArray} from '@tensorflow/tfjs-core';\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function draw(\n    args: {inputs: DrawInputs, backend: MathBackendCPU, attrs: DrawAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image} = inputs;\n  const {canvas, options} = attrs;\n  const {contextOptions, imageOptions} = options || {};\n  const alpha = imageOptions ?.alpha || 1;\n\n  const contextType = contextOptions ?.contextType || '2d';\n  if (contextType !== '2d') {\n    throw new Error(`Context type ${\n        contextOptions.contextType} is not supported by the CPU backend.`);\n  }\n  const ctx = canvas.getContext(contextType,\n    contextOptions?.contextAttributes || {}) as CanvasRenderingContext2D ;\n  if (ctx == null) {\n    throw new Error(`Could not get the context with ${contextType} type.`);\n  }\n\n  const [height, width] = image.shape.slice(0, 2);\n  const depth = image.shape.length === 2 ? 1 : image.shape[2];\n  const data = backend.data.get(image.dataId).values as TypedArray;\n  const multiplier = image.dtype === 'float32' ? 255 : 1;\n  const bytes = new Uint8ClampedArray(width * height * 4);\n\n  for (let i = 0; i < height * width; ++i) {\n    const rgba = [0, 0, 0, 255 * alpha];\n\n    for (let d = 0; d < depth; d++) {\n      const value = data[i * depth + d];\n\n      if (image.dtype === 'float32') {\n        if (value < 0 || value > 1) {\n          throw new Error(\n              `Tensor values for a float32 Tensor must be in the ` +\n              `range [0 - 1] but encountered ${value}.`);\n        }\n      } else if (image.dtype === 'int32') {\n        if (value < 0 || value > 255) {\n          throw new Error(\n              `Tensor values for a int32 Tensor must be in the ` +\n              `range [0 - 255] but encountered ${value}.`);\n        }\n      }\n\n      if (depth === 1) {\n        rgba[0] = value * multiplier;\n        rgba[1] = value * multiplier;\n        rgba[2] = value * multiplier;\n      } else {\n        rgba[d] = value * multiplier;\n      }\n    }\n\n    const j = i * 4;\n    bytes[j + 0] = Math.round(rgba[0]);\n    bytes[j + 1] = Math.round(rgba[1]);\n    bytes[j + 2] = Math.round(rgba[2]);\n    bytes[j + 3] = Math.round(rgba[3]);\n  }\n\n  canvas.width = width;\n  canvas.height = height;\n  const imageData = new ImageData(bytes, width, height);\n  ctx.putImageData(imageData, 0, 0);\n  return image;\n}\n\nexport const drawConfig: KernelConfig = {\n  kernelName: Draw,\n  backendName: 'cpu',\n  kernelFunc: draw as unknown as KernelFunc\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}