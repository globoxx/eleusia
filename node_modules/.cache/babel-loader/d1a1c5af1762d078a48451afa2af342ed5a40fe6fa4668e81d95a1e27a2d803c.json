{"ast":null,"code":"import _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */\n/* Original source: keras/contraints.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { epsilon } from './backend/common';\nimport { deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\n/**\r\n * Helper function used by many of the Constraints to find the L2Norms.\r\n */\nfunction calcL2Norms(w, axis) {\n  return tidy(function () {\n    return tfc.sqrt(tfc.sum(tfc.mul(w, w), axis, true));\n  });\n}\n/**\r\n * Base class for functions that impose constraints on weight values\r\n *\r\n * @doc {\r\n *   heading: 'Constraints',\r\n *   subheading: 'Classes',\r\n *   namespace: 'constraints'\r\n * }\r\n */\nexport var Constraint = /*#__PURE__*/function (_serialization$Serial) {\n  _inherits(Constraint, _serialization$Serial);\n  var _super = _createSuper(Constraint);\n  function Constraint() {\n    _classCallCheck(this, Constraint);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Constraint, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {};\n    }\n  }]);\n  return Constraint;\n}(serialization.Serializable);\nexport var MaxNorm = /*#__PURE__*/function (_Constraint) {\n  _inherits(MaxNorm, _Constraint);\n  var _super2 = _createSuper(MaxNorm);\n  function MaxNorm(args) {\n    var _this;\n    _classCallCheck(this, MaxNorm);\n    _this = _super2.call(this);\n    _this.defaultMaxValue = 2;\n    _this.defaultAxis = 0;\n    _this.maxValue = args.maxValue != null ? args.maxValue : _this.defaultMaxValue;\n    _this.axis = args.axis != null ? args.axis : _this.defaultAxis;\n    return _this;\n  }\n  _createClass(MaxNorm, [{\n    key: \"apply\",\n    value: function apply(w) {\n      var _this2 = this;\n      return tidy(function () {\n        var norms = calcL2Norms(w, _this2.axis);\n        var desired = tfc.clipByValue(norms, 0, _this2.maxValue);\n        return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        maxValue: this.maxValue,\n        axis: this.axis\n      };\n    }\n  }]);\n  return MaxNorm;\n}(Constraint);\n/** @nocollapse */\nMaxNorm.className = 'MaxNorm';\nserialization.registerClass(MaxNorm);\nexport var UnitNorm = /*#__PURE__*/function (_Constraint2) {\n  _inherits(UnitNorm, _Constraint2);\n  var _super3 = _createSuper(UnitNorm);\n  function UnitNorm(args) {\n    var _this3;\n    _classCallCheck(this, UnitNorm);\n    _this3 = _super3.call(this);\n    _this3.defaultAxis = 0;\n    _this3.axis = args.axis != null ? args.axis : _this3.defaultAxis;\n    return _this3;\n  }\n  _createClass(UnitNorm, [{\n    key: \"apply\",\n    value: function apply(w) {\n      var _this4 = this;\n      return tidy(function () {\n        return tfc.div(w, tfc.add(epsilon(), calcL2Norms(w, _this4.axis)));\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        axis: this.axis\n      };\n    }\n  }]);\n  return UnitNorm;\n}(Constraint);\n/** @nocollapse */\nUnitNorm.className = 'UnitNorm';\nserialization.registerClass(UnitNorm);\nexport var NonNeg = /*#__PURE__*/function (_Constraint3) {\n  _inherits(NonNeg, _Constraint3);\n  var _super4 = _createSuper(NonNeg);\n  function NonNeg() {\n    _classCallCheck(this, NonNeg);\n    return _super4.apply(this, arguments);\n  }\n  _createClass(NonNeg, [{\n    key: \"apply\",\n    value: function apply(w) {\n      return tfc.relu(w);\n    }\n  }]);\n  return NonNeg;\n}(Constraint);\n/** @nocollapse */\nNonNeg.className = 'NonNeg';\nserialization.registerClass(NonNeg);\nexport var MinMaxNorm = /*#__PURE__*/function (_Constraint4) {\n  _inherits(MinMaxNorm, _Constraint4);\n  var _super5 = _createSuper(MinMaxNorm);\n  function MinMaxNorm(args) {\n    var _this5;\n    _classCallCheck(this, MinMaxNorm);\n    _this5 = _super5.call(this);\n    _this5.defaultMinValue = 0.0;\n    _this5.defaultMaxValue = 1.0;\n    _this5.defaultRate = 1.0;\n    _this5.defaultAxis = 0;\n    _this5.minValue = args.minValue != null ? args.minValue : _this5.defaultMinValue;\n    _this5.maxValue = args.maxValue != null ? args.maxValue : _this5.defaultMaxValue;\n    _this5.rate = args.rate != null ? args.rate : _this5.defaultRate;\n    _this5.axis = args.axis != null ? args.axis : _this5.defaultAxis;\n    return _this5;\n  }\n  _createClass(MinMaxNorm, [{\n    key: \"apply\",\n    value: function apply(w) {\n      var _this6 = this;\n      return tidy(function () {\n        var norms = calcL2Norms(w, _this6.axis);\n        var desired = tfc.add(tfc.mul(_this6.rate, tfc.clipByValue(norms, _this6.minValue, _this6.maxValue)), tfc.mul(1.0 - _this6.rate, norms));\n        return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        minValue: this.minValue,\n        maxValue: this.maxValue,\n        rate: this.rate,\n        axis: this.axis\n      };\n    }\n  }]);\n  return MinMaxNorm;\n}(Constraint);\n/** @nocollapse */\nMinMaxNorm.className = 'MinMaxNorm';\nserialization.registerClass(MinMaxNorm);\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport var CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n  'maxNorm': 'MaxNorm',\n  'minMaxNorm': 'MinMaxNorm',\n  'nonNeg': 'NonNeg',\n  'unitNorm': 'UnitNorm'\n};\nexport function serializeConstraint(constraint) {\n  return serializeKerasObject(constraint);\n}\nexport function deserializeConstraint(config) {\n  var customObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'constraint');\n}\nexport function getConstraint(identifier) {\n  if (identifier == null) {\n    return null;\n  }\n  if (typeof identifier === 'string') {\n    var className = identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ? CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n    var config = {\n      className: className,\n      config: {}\n    };\n    return deserializeConstraint(config);\n  } else if (identifier instanceof Constraint) {\n    return identifier;\n  } else {\n    return deserializeConstraint(identifier);\n  }\n}","map":{"version":3,"names":["tfc","serialization","tidy","epsilon","deserializeKerasObject","serializeKerasObject","calcL2Norms","w","axis","sqrt","sum","mul","Constraint","_serialization$Serial","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","getConfig","Serializable","MaxNorm","_Constraint","_super2","args","_this","call","defaultMaxValue","defaultAxis","maxValue","_this2","norms","desired","clipByValue","div","add","className","registerClass","UnitNorm","_Constraint2","_super3","_this3","_this4","NonNeg","_Constraint3","_super4","relu","MinMaxNorm","_Constraint4","_super5","_this5","defaultMinValue","defaultRate","minValue","rate","_this6","CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP","serializeConstraint","constraint","deserializeConstraint","config","customObjects","length","undefined","SerializationMap","getMap","classNameMap","getConstraint","identifier"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-layers\\src\\constraints.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/contraints.py */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\nimport {epsilon} from './backend/common';\nimport {deserializeKerasObject, serializeKerasObject} from './utils/generic_utils';\n\n/**\n * Helper function used by many of the Constraints to find the L2Norms.\n */\nfunction calcL2Norms(w: Tensor, axis: number): Tensor {\n  return tidy(() => tfc.sqrt(tfc.sum(tfc.mul(w, w), axis, true)));\n}\n\n/**\n * Base class for functions that impose constraints on weight values\n *\n * @doc {\n *   heading: 'Constraints',\n *   subheading: 'Classes',\n *   namespace: 'constraints'\n * }\n */\nexport abstract class Constraint extends serialization.Serializable {\n  /* Porting note: was __call__, apply chosen to match other similar choices */\n  abstract apply(w: Tensor): Tensor;\n  getConfig(): serialization.ConfigDict {\n    return {};\n  }\n}\n\nexport interface MaxNormArgs {\n  /**\n   * Maximum norm for incoming weights\n   */\n  maxValue?: number;\n  /**\n   * Axis along which to calculate norms.\n   *\n   *  For instance, in a `Dense` layer the weight matrix\n   *  has shape `[inputDim, outputDim]`,\n   *  set `axis` to `0` to constrain each weight vector\n   *  of length `[inputDim,]`.\n   *  In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n   *  the weight tensor has shape\n   *  `[rows, cols, inputDepth, outputDepth]`,\n   *  set `axis` to `[0, 1, 2]`\n   *  to constrain the weights of each filter tensor of size\n   *  `[rows, cols, inputDepth]`.\n   */\n  axis?: number;\n}\n\nexport class MaxNorm extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'MaxNorm';\n  private maxValue: number;\n  private axis: number;\n  private readonly defaultMaxValue = 2;\n  private readonly defaultAxis = 0;\n\n  constructor(args: MaxNormArgs) {\n    super();\n    this.maxValue =\n        args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w: Tensor): Tensor {\n    return tidy(() => {\n      const norms = calcL2Norms(w, this.axis);\n      const desired = tfc.clipByValue(norms, 0, this.maxValue);\n      return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {maxValue: this.maxValue, axis: this.axis};\n  }\n}\nserialization.registerClass(MaxNorm);\n\nexport interface UnitNormArgs {\n  /**\n   * Axis along which to calculate norms.\n   *\n   * For instance, in a `Dense` layer the weight matrix\n   * has shape `[inputDim, outputDim]`,\n   * set `axis` to `0` to constrain each weight vector\n   * of length `[inputDim,]`.\n   * In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n   * the weight tensor has shape\n   * `[rows, cols, inputDepth, outputDepth]`,\n   * set `axis` to `[0, 1, 2]`\n   * to constrain the weights of each filter tensor of size\n   * `[rows, cols, inputDepth]`.\n   */\n  axis?: number;\n}\n\nexport class UnitNorm extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'UnitNorm';\n  private axis: number;\n  private readonly defaultAxis = 0;\n  constructor(args: UnitNormArgs) {\n    super();\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w: Tensor): Tensor {\n    return tidy(\n        () => tfc.div(w, tfc.add(epsilon(), calcL2Norms(w, this.axis))));\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {axis: this.axis};\n  }\n}\nserialization.registerClass(UnitNorm);\n\nexport class NonNeg extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'NonNeg';\n\n  apply(w: Tensor): Tensor {\n    return tfc.relu(w);\n  }\n}\nserialization.registerClass(NonNeg);\n\nexport interface MinMaxNormArgs {\n  /**\n   * Minimum norm for incoming weights\n   */\n  minValue?: number;\n  /**\n   * Maximum norm for incoming weights\n   */\n  maxValue?: number;\n  /**\n   * Axis along which to calculate norms.\n   * For instance, in a `Dense` layer the weight matrix\n   * has shape `[inputDim, outputDim]`,\n   * set `axis` to `0` to constrain each weight vector\n   * of length `[inputDim,]`.\n   * In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n   * the weight tensor has shape\n   * `[rows, cols, inputDepth, outputDepth]`,\n   * set `axis` to `[0, 1, 2]`\n   * to constrain the weights of each filter tensor of size\n   * `[rows, cols, inputDepth]`.\n   */\n  axis?: number;\n  /**\n   * Rate for enforcing the constraint: weights will be rescaled to yield:\n   * `(1 - rate) * norm + rate * norm.clip(minValue, maxValue)`.\n   * Effectively, this means that rate=1.0 stands for strict\n   * enforcement of the constraint, while rate<1.0 means that\n   * weights will be rescaled at each step to slowly move\n   * towards a value inside the desired interval.\n   */\n  rate?: number;\n}\n\nexport class MinMaxNorm extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'MinMaxNorm';\n  private minValue: number;\n  private maxValue: number;\n  private rate: number;\n  private axis: number;\n  private readonly defaultMinValue = 0.0;\n  private readonly defaultMaxValue = 1.0;\n  private readonly defaultRate = 1.0;\n  private readonly defaultAxis = 0;\n\n  constructor(args: MinMaxNormArgs) {\n    super();\n    this.minValue =\n        args.minValue != null ? args.minValue : this.defaultMinValue;\n    this.maxValue =\n        args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n    this.rate = args.rate != null ? args.rate : this.defaultRate;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w: Tensor): Tensor {\n    return tidy(() => {\n      const norms = calcL2Norms(w, this.axis);\n      const desired = tfc.add(\n          tfc.mul(\n              this.rate, tfc.clipByValue(norms, this.minValue, this.maxValue)),\n          tfc.mul(1.0 - this.rate, norms));\n      return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {\n      minValue: this.minValue,\n      maxValue: this.maxValue,\n      rate: this.rate,\n      axis: this.axis\n    };\n  }\n}\nserialization.registerClass(MinMaxNorm);\n\n/** @docinline */\nexport type ConstraintIdentifier =\n    'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string;\n\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP:\n    {[identifier in ConstraintIdentifier]: string} = {\n      'maxNorm': 'MaxNorm',\n      'minMaxNorm': 'MinMaxNorm',\n      'nonNeg': 'NonNeg',\n      'unitNorm': 'UnitNorm'\n    };\n\nexport function serializeConstraint(constraint: Constraint):\n    serialization.ConfigDictValue {\n  return serializeKerasObject(constraint);\n}\n\nexport function deserializeConstraint(\n    config: serialization.ConfigDict,\n    customObjects: serialization.ConfigDict = {}): Constraint {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'constraint');\n}\n\nexport function getConstraint(identifier: ConstraintIdentifier|\n                              serialization.ConfigDict|Constraint): Constraint {\n  if (identifier == null) {\n    return null;\n  }\n  if (typeof identifier === 'string') {\n    const className = identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n        CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n        identifier;\n    const config = {className, config: {}};\n    return deserializeConstraint(config);\n  } else if (identifier instanceof Constraint) {\n    return identifier;\n  } else {\n    return deserializeConstraint(identifier);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}