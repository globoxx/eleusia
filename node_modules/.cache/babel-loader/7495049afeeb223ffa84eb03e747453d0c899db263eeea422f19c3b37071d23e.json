{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { backend_util, sumOutType, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from './Reshape';\nimport { transposeImpl } from './Transpose_impl';\nexport function sumImpl(x, axis, keepDims, backend) {\n  var reductionIndices = axis;\n  var xRank = x.shape.length;\n  var origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  var axes = origAxes;\n  var permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  var sumInputIsTransposed = permutedAxes != null;\n  var sumInput = x;\n  if (sumInputIsTransposed) {\n    sumInput = transposeImpl(x, permutedAxes, backend);\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n  backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n  var _backend_util$compute = backend_util.computeOutAndReduceShapes(sumInput.shape, axes),\n    _backend_util$compute2 = _slicedToArray(_backend_util$compute, 2),\n    sumOutShape = _backend_util$compute2[0],\n    reduceShape = _backend_util$compute2[1];\n  var outShape = sumOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(sumOutShape, origAxes);\n  }\n  var inSize = util.sizeFromShape(reduceShape);\n  var xSize = util.sizeFromShape(x.shape);\n  var batchSize = xSize / inSize;\n  var reshapedInput = reshape({\n    inputs: {\n      x: sumInput\n    },\n    attrs: {\n      shape: [batchSize, inSize]\n    },\n    backend: backend\n  });\n  var outType = sumOutType(x.dtype);\n  var reduced = reduce(reshapedInput, outType, 'sum', backend);\n  var out = reshape({\n    inputs: {\n      x: reduced\n    },\n    attrs: {\n      shape: outShape\n    },\n    backend: backend\n  });\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n  if (sumInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(sumInput);\n  }\n  return out;\n}","map":{"version":3,"names":["backend_util","sumOutType","util","reduce","reshape","transposeImpl","sumImpl","x","axis","keepDims","backend","reductionIndices","xRank","shape","length","origAxes","parseAxisParam","axes","permutedAxes","getAxesPermutation","sumInputIsTransposed","sumInput","getInnerMostAxes","assertAxesAreInnerMostDims","_backend_util$compute","computeOutAndReduceShapes","_backend_util$compute2","_slicedToArray","sumOutShape","reduceShape","outShape","expandShapeToKeepDim","inSize","sizeFromShape","xSize","batchSize","reshapedInput","inputs","attrs","outType","dtype","reduced","out","disposeIntermediateTensorInfo"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\kernels\\Sum_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, sumOutType, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function sumImpl(\n    x: TensorInfo, axis: number|number[], keepDims: boolean,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionIndices = axis;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const sumInputIsTransposed = permutedAxes != null;\n\n  let sumInput = x;\n  if (sumInputIsTransposed) {\n    sumInput = transposeImpl(x, permutedAxes, backend);\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n  const [sumOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(sumInput.shape, axes);\n\n  let outShape = sumOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(sumOutShape, origAxes);\n  }\n\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput = reshape(\n      {inputs: {x: sumInput}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const outType = sumOutType(x.dtype);\n\n  const reduced = reduce(reshapedInput, outType, 'sum', backend);\n  const out =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n  if (sumInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(sumInput);\n  }\n\n  return out;\n}\n"],"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAEC,UAAU,EAAcC,IAAI,QAAO,uBAAuB;AAGhF,SAAQC,MAAM,QAAO,wBAAwB;AAC7C,SAAQC,OAAO,QAAO,WAAW;AAEjC,SAAQC,aAAa,QAAO,kBAAkB;AAE9C,OAAM,SAAUC,OAAOA,CACnBC,CAAa,EAAEC,IAAqB,EAAEC,QAAiB,EACvDC,OAAyB;EAC3B,IAAMC,gBAAgB,GAAGH,IAAI;EAE7B,IAAMI,KAAK,GAAGL,CAAC,CAACM,KAAK,CAACC,MAAM;EAE5B,IAAMC,QAAQ,GAAGb,IAAI,CAACc,cAAc,CAACL,gBAAgB,EAAEJ,CAAC,CAACM,KAAK,CAAC;EAC/D,IAAII,IAAI,GAAGF,QAAQ;EACnB,IAAMG,YAAY,GAAGlB,YAAY,CAACmB,kBAAkB,CAACF,IAAI,EAAEL,KAAK,CAAC;EACjE,IAAMQ,oBAAoB,GAAGF,YAAY,IAAI,IAAI;EAEjD,IAAIG,QAAQ,GAAGd,CAAC;EAChB,IAAIa,oBAAoB,EAAE;IACxBC,QAAQ,GAAGhB,aAAa,CAACE,CAAC,EAAEW,YAAY,EAAER,OAAO,CAAC;IAElDO,IAAI,GAAGjB,YAAY,CAACsB,gBAAgB,CAACL,IAAI,CAACH,MAAM,EAAEF,KAAK,CAAC;;EAG1DZ,YAAY,CAACuB,0BAA0B,CAAC,KAAK,EAAEN,IAAI,EAAEL,KAAK,CAAC;EAC3D,IAAAY,qBAAA,GACIxB,YAAY,CAACyB,yBAAyB,CAACJ,QAAQ,CAACR,KAAK,EAAEI,IAAI,CAAC;IAAAS,sBAAA,GAAAC,cAAA,CAAAH,qBAAA;IADzDI,WAAW,GAAAF,sBAAA;IAAEG,WAAW,GAAAH,sBAAA;EAG/B,IAAII,QAAQ,GAAGF,WAAW;EAC1B,IAAInB,QAAQ,EAAE;IACZ;IACAqB,QAAQ,GAAG9B,YAAY,CAAC+B,oBAAoB,CAACH,WAAW,EAAEb,QAAQ,CAAC;;EAGrE,IAAMiB,MAAM,GAAG9B,IAAI,CAAC+B,aAAa,CAACJ,WAAW,CAAC;EAC9C,IAAMK,KAAK,GAAGhC,IAAI,CAAC+B,aAAa,CAAC1B,CAAC,CAACM,KAAK,CAAC;EACzC,IAAMsB,SAAS,GAAGD,KAAK,GAAGF,MAAM;EAChC,IAAMI,aAAa,GAAGhC,OAAO,CACzB;IAACiC,MAAM,EAAE;MAAC9B,CAAC,EAAEc;IAAQ,CAAC;IAAEiB,KAAK,EAAE;MAACzB,KAAK,EAAE,CAACsB,SAAS,EAAEH,MAAM;IAAC,CAAC;IAAEtB,OAAO,EAAPA;EAAO,CAAC,CAAC;EAE1E,IAAM6B,OAAO,GAAGtC,UAAU,CAACM,CAAC,CAACiC,KAAK,CAAC;EAEnC,IAAMC,OAAO,GAAGtC,MAAM,CAACiC,aAAa,EAAEG,OAAO,EAAE,KAAK,EAAE7B,OAAO,CAAC;EAC9D,IAAMgC,GAAG,GACLtC,OAAO,CAAC;IAACiC,MAAM,EAAE;MAAC9B,CAAC,EAAEkC;IAAO,CAAC;IAAEH,KAAK,EAAE;MAACzB,KAAK,EAAEiB;IAAQ,CAAC;IAAEpB,OAAO,EAAPA;EAAO,CAAC,CAAC;EAEtEA,OAAO,CAACiC,6BAA6B,CAACP,aAAa,CAAC;EACpD1B,OAAO,CAACiC,6BAA6B,CAACF,OAAO,CAAC;EAC9C,IAAIrB,oBAAoB,EAAE;IACxBV,OAAO,CAACiC,6BAA6B,CAACtB,QAAQ,CAAC;;EAGjD,OAAOqB,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}