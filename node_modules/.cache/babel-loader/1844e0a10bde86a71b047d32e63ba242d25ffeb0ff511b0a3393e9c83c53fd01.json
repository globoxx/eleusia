{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { StridedSlice } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Extracts a strided slice of a tensor.\r\n *\r\n * Roughly speaking, this op extracts a slice of size (end-begin)/stride from\r\n * the given input tensor (x). Starting at the location specified by begin the\r\n * slice continues by adding stride to the index until all dimensions are not\r\n * less than end. Note that a stride can be negative, which causes a reverse\r\n * slice.\r\n *\r\n * ```js\r\n * const t = tf.tensor3d([1, 1, 1 ,2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6],\r\n *    [3, 2, 3]);\r\n * t.stridedSlice([1, 0, 0], [2, 1, 3], [1, 1, 1]).print()  // [[[3, 3, 3]]]\r\n * t.stridedSlice([1, 0, 0], [2, 2, 3], [1, 1, 1]).print()  // [[[3, 3, 3],\r\n *                                                     // [4, 4, 4]]]\r\n * t.stridedSlice([1, -1, 0], [2, -3, 3], [1, -1, 1]).print() // [[[4, 4, 4],\r\n *                                                     // [3, 3, 3]]]\r\n * ```\r\n *\r\n * @param x The tensor to stride slice.\r\n * @param begin The coordinates to start the slice from.\r\n * @param end: The coordinates to end the slice at.\r\n * @param strides: The size of the slice.\r\n * @param beginMask: If the ith bit of beginMask is set, begin[i] is ignored\r\n *      and the fullest possible range in that dimension is used instead.\r\n * @param endMask: If the ith bit of endMask is set, end[i] is ignored\r\n *      and the fullest possible range in that dimension is used instead.\r\n * @param shrinkAxisMask: a bitmask where bit i implies that\r\n * the ith specification should shrink the dimensionality. begin and end must\r\n * imply a slice of size 1 in the dimension.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\r\n */\nfunction stridedSlice_(x, begin, end, strides) {\n  var beginMask = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  var endMask = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n  var ellipsisMask = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n  var newAxisMask = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n  var shrinkAxisMask = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;\n  var $x = convertToTensor(x, 'x', 'stridedSlice', 'string_or_numeric');\n  var inputs = {\n    x: $x\n  };\n  var attrs = {\n    begin: begin,\n    end: end,\n    strides: strides,\n    beginMask: beginMask,\n    endMask: endMask,\n    ellipsisMask: ellipsisMask,\n    newAxisMask: newAxisMask,\n    shrinkAxisMask: shrinkAxisMask\n  };\n  return ENGINE.runKernel(StridedSlice, inputs, attrs);\n}\nexport var stridedSlice = /* @__PURE__ */op({\n  stridedSlice_: stridedSlice_\n});","map":{"version":3,"names":["ENGINE","StridedSlice","convertToTensor","op","stridedSlice_","x","begin","end","strides","beginMask","arguments","length","undefined","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","$x","inputs","attrs","runKernel","stridedSlice"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\strided_slice.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {StridedSlice, StridedSliceAttrs, StridedSliceInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Extracts a strided slice of a tensor.\n *\n * Roughly speaking, this op extracts a slice of size (end-begin)/stride from\n * the given input tensor (x). Starting at the location specified by begin the\n * slice continues by adding stride to the index until all dimensions are not\n * less than end. Note that a stride can be negative, which causes a reverse\n * slice.\n *\n * ```js\n * const t = tf.tensor3d([1, 1, 1 ,2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6],\n *    [3, 2, 3]);\n * t.stridedSlice([1, 0, 0], [2, 1, 3], [1, 1, 1]).print()  // [[[3, 3, 3]]]\n * t.stridedSlice([1, 0, 0], [2, 2, 3], [1, 1, 1]).print()  // [[[3, 3, 3],\n *                                                     // [4, 4, 4]]]\n * t.stridedSlice([1, -1, 0], [2, -3, 3], [1, -1, 1]).print() // [[[4, 4, 4],\n *                                                     // [3, 3, 3]]]\n * ```\n *\n * @param x The tensor to stride slice.\n * @param begin The coordinates to start the slice from.\n * @param end: The coordinates to end the slice at.\n * @param strides: The size of the slice.\n * @param beginMask: If the ith bit of beginMask is set, begin[i] is ignored\n *      and the fullest possible range in that dimension is used instead.\n * @param endMask: If the ith bit of endMask is set, end[i] is ignored\n *      and the fullest possible range in that dimension is used instead.\n * @param shrinkAxisMask: a bitmask where bit i implies that\n * the ith specification should shrink the dimensionality. begin and end must\n * imply a slice of size 1 in the dimension.\n *\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\n */\nfunction stridedSlice_(\n    x: Tensor|TensorLike, begin: number[], end: number[], strides?: number[],\n    beginMask = 0, endMask = 0, ellipsisMask = 0, newAxisMask = 0,\n    shrinkAxisMask = 0): Tensor {\n  const $x = convertToTensor(x, 'x', 'stridedSlice', 'string_or_numeric');\n\n  const inputs: StridedSliceInputs = {x: $x};\n  const attrs: StridedSliceAttrs = {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  };\n\n  return ENGINE.runKernel(\n      StridedSlice, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const stridedSlice = /* @__PURE__ */ op({stridedSlice_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,YAAY,QAA8C,iBAAiB;AAInF,SAAQC,eAAe,QAAO,oBAAoB;AAGlD,SAAQC,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,SAASC,aAAaA,CAClBC,CAAoB,EAAEC,KAAe,EAAEC,GAAa,EAAEC,OAAkB,EAEtD;EAAA,IADlBC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EAAA,IAAEG,OAAO,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EAAA,IAAEI,YAAY,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EAAA,IAAEK,WAAW,GAAAL,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EAAA,IAC7DM,cAAc,GAAAN,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EACpB,IAAMO,EAAE,GAAGf,eAAe,CAACG,CAAC,EAAE,GAAG,EAAE,cAAc,EAAE,mBAAmB,CAAC;EAEvE,IAAMa,MAAM,GAAuB;IAACb,CAAC,EAAEY;EAAE,CAAC;EAC1C,IAAME,KAAK,GAAsB;IAC/Bb,KAAK,EAALA,KAAK;IACLC,GAAG,EAAHA,GAAG;IACHC,OAAO,EAAPA,OAAO;IACPC,SAAS,EAATA,SAAS;IACTI,OAAO,EAAPA,OAAO;IACPC,YAAY,EAAZA,YAAY;IACZC,WAAW,EAAXA,WAAW;IACXC,cAAc,EAAdA;GACD;EAED,OAAOhB,MAAM,CAACoB,SAAS,CACnBnB,YAAY,EAAEiB,MAAmC,EACjDC,KAAgC,CAAC;AACvC;AAEA,OAAO,IAAME,YAAY,GAAG,eAAgBlB,EAAE,CAAC;EAACC,aAAa,EAAbA;AAAa,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}