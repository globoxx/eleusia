{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transform } from '@tensorflow/tfjs-core';\nimport { TransformProgram } from '../transform_gpu';\nexport function transform(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var image = inputs.image,\n    transforms = inputs.transforms;\n  var interpolation = attrs.interpolation,\n    fillMode = attrs.fillMode,\n    fillValue = attrs.fillValue,\n    outputShape = attrs.outputShape;\n  var _image$shape = _slicedToArray(image.shape, 4),\n    batch = _image$shape[0],\n    imageHeight = _image$shape[1],\n    imageWidth = _image$shape[2],\n    numChannels = _image$shape[3];\n  var _ref = outputShape != null ? outputShape : [imageHeight, imageWidth],\n    _ref2 = _slicedToArray(_ref, 2),\n    outHeight = _ref2[0],\n    outWidth = _ref2[1];\n  var outShape = [batch, outHeight, outWidth, numChannels];\n  var program = new TransformProgram(imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape);\n  return backend.runWebGLProgram(program, [image, transforms], 'float32');\n}\nexport var transformConfig = {\n  kernelName: Transform,\n  backendName: 'webgl',\n  kernelFunc: transform\n};","map":{"version":3,"names":["Transform","TransformProgram","transform","args","inputs","backend","attrs","image","transforms","interpolation","fillMode","fillValue","outputShape","_image$shape","_slicedToArray","shape","batch","imageHeight","imageWidth","numChannels","_ref","_ref2","outHeight","outWidth","outShape","program","runWebGLProgram","transformConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\kernels\\Transform.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transform, TransformAttrs, TransformInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TransformProgram} from '../transform_gpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  backend: MathBackendWebGL,\n  attrs: TransformAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape =\n      [batch, outHeight, outWidth,\n       numChannels] as [number, number, number, number];\n\n  const program = new TransformProgram(\n      imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape);\n  return backend.runWebGLProgram(program, [image, transforms], 'float32');\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'webgl',\n  kernelFunc: transform as unknown as KernelFunc\n};\n"],"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAA8CA,SAAS,QAAwC,uBAAuB;AAGtH,SAAQC,gBAAgB,QAAO,kBAAkB;AAEjD,OAAM,SAAUC,SAASA,CAACC,IAIzB;EACC,IAAOC,MAAM,GAAoBD,IAAI,CAA9BC,MAAM;IAAEC,OAAO,GAAWF,IAAI,CAAtBE,OAAO;IAAEC,KAAK,GAAIH,IAAI,CAAbG,KAAK;EAC7B,IAAOC,KAAK,GAAgBH,MAAM,CAA3BG,KAAK;IAAEC,UAAU,GAAIJ,MAAM,CAApBI,UAAU;EACxB,IAAOC,aAAa,GAAsCH,KAAK,CAAxDG,aAAa;IAAEC,QAAQ,GAA4BJ,KAAK,CAAzCI,QAAQ;IAAEC,SAAS,GAAiBL,KAAK,CAA/BK,SAAS;IAAEC,WAAW,GAAIN,KAAK,CAApBM,WAAW;EAEtD,IAAAC,YAAA,GAAAC,cAAA,CAAsDP,KAAK,CAACQ,KAAK;IAA1DC,KAAK,GAAAH,YAAA;IAAEI,WAAW,GAAAJ,YAAA;IAAEK,UAAU,GAAAL,YAAA;IAAEM,WAAW,GAAAN,YAAA;EAClD,IAAAO,IAAA,GACIR,WAAW,IAAI,IAAI,GAAGA,WAAW,GAAG,CAACK,WAAW,EAAEC,UAAU,CAAC;IAAAG,KAAA,GAAAP,cAAA,CAAAM,IAAA;IAD1DE,SAAS,GAAAD,KAAA;IAAEE,QAAQ,GAAAF,KAAA;EAE1B,IAAMG,QAAQ,GACV,CAACR,KAAK,EAAEM,SAAS,EAAEC,QAAQ,EAC1BJ,WAAW,CAAqC;EAErD,IAAMM,OAAO,GAAG,IAAIxB,gBAAgB,CAChCgB,WAAW,EAAEC,UAAU,EAAET,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEa,QAAQ,CAAC;EAC1E,OAAOnB,OAAO,CAACqB,eAAe,CAACD,OAAO,EAAE,CAAClB,KAAK,EAAEC,UAAU,CAAC,EAAE,SAAS,CAAC;AACzE;AAEA,OAAO,IAAMmB,eAAe,GAAiB;EAC3CC,UAAU,EAAE5B,SAAS;EACrB6B,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAE5B;CACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}