{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nfunction nmsParams(node, tensorMap, context) {\n  var boxes = getParamValue('boxes', node, tensorMap, context);\n  var scores = getParamValue('scores', node, tensorMap, context);\n  var maxOutputSize = getParamValue('maxOutputSize', node, tensorMap, context);\n  var iouThreshold = getParamValue('iouThreshold', node, tensorMap, context);\n  var scoreThreshold = getParamValue('scoreThreshold', node, tensorMap, context);\n  var softNmsSigma = getParamValue('softNmsSigma', node, tensorMap, context);\n  return {\n    boxes: boxes,\n    scores: scores,\n    maxOutputSize: maxOutputSize,\n    iouThreshold: iouThreshold,\n    scoreThreshold: scoreThreshold,\n    softNmsSigma: softNmsSigma\n  };\n}\nexport var executeOp = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(node, tensorMap, context, resourceManager) {\n    var ops,\n      _nmsParams,\n      boxes,\n      scores,\n      maxOutputSize,\n      iouThreshold,\n      scoreThreshold,\n      softNmsSigma,\n      result,\n      _nmsParams2,\n      _boxes,\n      _scores,\n      _maxOutputSize,\n      _iouThreshold,\n      _scoreThreshold,\n      padToMaxOutputSize,\n      _result,\n      _nmsParams3,\n      _boxes2,\n      _scores2,\n      _maxOutputSize2,\n      _iouThreshold2,\n      _scoreThreshold2,\n      condition,\n      _result2,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          ops = _args.length > 4 && _args[4] !== undefined ? _args[4] : tfOps;\n          _context.t0 = node.op;\n          _context.next = _context.t0 === 'NonMaxSuppressionV5' ? 4 : _context.t0 === 'NonMaxSuppressionV4' ? 9 : _context.t0 === 'NonMaxSuppressionV3' ? 15 : _context.t0 === 'NonMaxSuppressionV2' ? 15 : _context.t0 === 'Where' ? 20 : _context.t0 === 'ListDiff' ? 27 : 28;\n          break;\n        case 4:\n          _nmsParams = nmsParams(node, tensorMap, context), boxes = _nmsParams.boxes, scores = _nmsParams.scores, maxOutputSize = _nmsParams.maxOutputSize, iouThreshold = _nmsParams.iouThreshold, scoreThreshold = _nmsParams.scoreThreshold, softNmsSigma = _nmsParams.softNmsSigma;\n          _context.next = 7;\n          return ops.image.nonMaxSuppressionWithScoreAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n        case 7:\n          result = _context.sent;\n          return _context.abrupt(\"return\", [result.selectedIndices, result.selectedScores]);\n        case 9:\n          _nmsParams2 = nmsParams(node, tensorMap, context), _boxes = _nmsParams2.boxes, _scores = _nmsParams2.scores, _maxOutputSize = _nmsParams2.maxOutputSize, _iouThreshold = _nmsParams2.iouThreshold, _scoreThreshold = _nmsParams2.scoreThreshold;\n          padToMaxOutputSize = getParamValue('padToMaxOutputSize', node, tensorMap, context);\n          _context.next = 13;\n          return ops.image.nonMaxSuppressionPaddedAsync(_boxes, _scores, _maxOutputSize, _iouThreshold, _scoreThreshold, padToMaxOutputSize);\n        case 13:\n          _result = _context.sent;\n          return _context.abrupt(\"return\", [_result.selectedIndices, _result.validOutputs]);\n        case 15:\n          _nmsParams3 = nmsParams(node, tensorMap, context), _boxes2 = _nmsParams3.boxes, _scores2 = _nmsParams3.scores, _maxOutputSize2 = _nmsParams3.maxOutputSize, _iouThreshold2 = _nmsParams3.iouThreshold, _scoreThreshold2 = _nmsParams3.scoreThreshold;\n          _context.next = 18;\n          return ops.image.nonMaxSuppressionAsync(_boxes2, _scores2, _maxOutputSize2, _iouThreshold2, _scoreThreshold2);\n        case 18:\n          _context.t1 = _context.sent;\n          return _context.abrupt(\"return\", [_context.t1]);\n        case 20:\n          condition = ops.cast(getParamValue('condition', node, tensorMap, context), 'bool');\n          _context.next = 23;\n          return ops.whereAsync(condition);\n        case 23:\n          _context.t2 = _context.sent;\n          _result2 = [_context.t2];\n          condition.dispose();\n          return _context.abrupt(\"return\", _result2);\n        case 27:\n          return _context.abrupt(\"return\", ops.setdiff1dAsync(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context)));\n        case 28:\n          throw TypeError(\"Node type \".concat(node.op, \" is not implemented\"));\n        case 29:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function executeOp(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var CATEGORY = 'dynamic';","map":{"version":3,"names":["tfOps","getParamValue","nmsParams","node","tensorMap","context","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","executeOp","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","resourceManager","ops","_nmsParams","result","_nmsParams2","_boxes","_scores","_maxOutputSize","_iouThreshold","_scoreThreshold","padToMaxOutputSize","_result","_nmsParams3","_boxes2","_scores2","_maxOutputSize2","_iouThreshold2","_scoreThreshold2","condition","_result2","_args","arguments","wrap","_callee$","_context","prev","next","length","undefined","t0","op","image","nonMaxSuppressionWithScoreAsync","sent","abrupt","selectedIndices","selectedScores","nonMaxSuppressionPaddedAsync","validOutputs","nonMaxSuppressionAsync","t1","cast","whereAsync","t2","dispose","setdiff1dAsync","TypeError","concat","stop","_x","_x2","_x3","_x4","apply","CATEGORY"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-converter\\src\\operations\\executors\\dynamic_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport { ResourceManager } from '../../executor/resource_manager';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nfunction nmsParams(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) {\n  const boxes = getParamValue('boxes', node, tensorMap, context) as Tensor;\n  const scores = getParamValue('scores', node, tensorMap, context) as Tensor;\n  const maxOutputSize =\n      getParamValue('maxOutputSize', node, tensorMap, context) as number;\n  const iouThreshold =\n      getParamValue('iouThreshold', node, tensorMap, context) as number;\n  const scoreThreshold =\n      getParamValue('scoreThreshold', node, tensorMap, context) as number;\n  const softNmsSigma =\n      getParamValue('softNmsSigma', node, tensorMap, context) as number;\n\n  return {\n    boxes,\n    scores,\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext, resourceManager: ResourceManager,\n    ops = tfOps): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'NonMaxSuppressionV5': {\n      const {\n        boxes,\n        scores,\n        maxOutputSize,\n        iouThreshold,\n        scoreThreshold,\n        softNmsSigma\n      } = nmsParams(node, tensorMap, context);\n\n      const result = await ops.image.nonMaxSuppressionWithScoreAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold, softNmsSigma);\n\n      return [result.selectedIndices, result.selectedScores];\n    }\n    case 'NonMaxSuppressionV4': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      const padToMaxOutputSize =\n          getParamValue('padToMaxOutputSize', node, tensorMap, context) as\n          boolean;\n\n      const result = await ops.image.nonMaxSuppressionPaddedAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold, padToMaxOutputSize);\n\n      return [result.selectedIndices, result.validOutputs];\n    }\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      return [await ops.image.nonMaxSuppressionAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold)];\n    }\n    case 'Where': {\n      const condition = ops.cast(\n          (getParamValue('condition', node, tensorMap, context) as Tensor),\n          'bool');\n      const result = [await ops.whereAsync(condition)];\n      condition.dispose();\n      return result;\n    }\n    case 'ListDiff': {\n      return ops.setdiff1dAsync(\n          getParamValue('x', node, tensorMap, context) as Tensor,\n          getParamValue('y', node, tensorMap, context) as Tensor);\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'dynamic';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}