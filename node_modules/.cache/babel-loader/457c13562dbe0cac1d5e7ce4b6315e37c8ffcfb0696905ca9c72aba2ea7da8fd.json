{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2023 Google LLC.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../../engine';\nimport { StaticRegexReplace } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { op } from '../operation';\n/**\r\n * Replace the match of a `pattern` in `input` with `rewrite`.\r\n *\r\n * ```js\r\n * const result = tf.string.staticRegexReplace(\r\n *     ['format       this   spacing      better'], ' +', ' ');\r\n * result.print(); // ['format this spacing better']\r\n * ```\r\n * @param input: A Tensor of type string. The text to be processed.\r\n * @param pattern: A string. The regular expression to match the input.\r\n * @param rewrite: A string. The rewrite to be applied to the matched\r\n *     expression.\r\n * @param replaceGlobal: An optional bool. Defaults to True. If True, the\r\n *     replacement is global, otherwise the replacement is done only on the\r\n *     first match.\r\n * @return A Tensor of type string.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'String'}\r\n */\nfunction staticRegexReplace_(input, pattern, rewrite) {\n  var replaceGlobal = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var $input = convertToTensor(input, 'input', 'staticRegexReplace', 'string');\n  var attrs = {\n    pattern: pattern,\n    rewrite: rewrite,\n    replaceGlobal: replaceGlobal\n  };\n  return ENGINE.runKernel(StaticRegexReplace, {\n    x: $input\n  }, attrs);\n}\nexport var staticRegexReplace = /* @__PURE__ */op({\n  staticRegexReplace_: staticRegexReplace_\n});","map":{"version":3,"names":["ENGINE","StaticRegexReplace","convertToTensor","op","staticRegexReplace_","input","pattern","rewrite","replaceGlobal","arguments","length","undefined","$input","attrs","runKernel","x","staticRegexReplace"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\string\\static_regex_replace.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {StaticRegexReplace, StaticRegexReplaceAttrs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {op} from '../operation';\n\n/**\n * Replace the match of a `pattern` in `input` with `rewrite`.\n *\n * ```js\n * const result = tf.string.staticRegexReplace(\n *     ['format       this   spacing      better'], ' +', ' ');\n * result.print(); // ['format this spacing better']\n * ```\n * @param input: A Tensor of type string. The text to be processed.\n * @param pattern: A string. The regular expression to match the input.\n * @param rewrite: A string. The rewrite to be applied to the matched\n *     expression.\n * @param replaceGlobal: An optional bool. Defaults to True. If True, the\n *     replacement is global, otherwise the replacement is done only on the\n *     first match.\n * @return A Tensor of type string.\n *\n * @doc {heading: 'Operations', subheading: 'String'}\n */\nfunction staticRegexReplace_(\n  input: Tensor | TensorLike, pattern: string, rewrite: string,\n  replaceGlobal=true): Tensor {\n\n  const $input = convertToTensor(input, 'input', 'staticRegexReplace',\n                                 'string');\n  const attrs: StaticRegexReplaceAttrs = {pattern, rewrite, replaceGlobal};\n  return ENGINE.runKernel(StaticRegexReplace, {x: $input},\n                          attrs as unknown as NamedAttrMap);\n}\n\nexport const staticRegexReplace = /* @__PURE__ */ op({staticRegexReplace_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,cAAc;AACnC,SAAQC,kBAAkB,QAAgC,oBAAoB;AAG9E,SAAQC,eAAe,QAAO,uBAAuB;AAErD,SAAQC,EAAE,QAAO,cAAc;AAE/B;;;;;;;;;;;;;;;;;;;AAmBA,SAASC,mBAAmBA,CAC1BC,KAA0B,EAAEC,OAAe,EAAEC,OAAe,EAC1C;EAAA,IAAlBC,aAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAC,IAAI;EAElB,IAAMG,MAAM,GAAGV,eAAe,CAACG,KAAK,EAAE,OAAO,EAAE,oBAAoB,EACpC,QAAQ,CAAC;EACxC,IAAMQ,KAAK,GAA4B;IAACP,OAAO,EAAPA,OAAO;IAAEC,OAAO,EAAPA,OAAO;IAAEC,aAAa,EAAbA;EAAa,CAAC;EACxE,OAAOR,MAAM,CAACc,SAAS,CAACb,kBAAkB,EAAE;IAACc,CAAC,EAAEH;EAAM,CAAC,EAC/BC,KAAgC,CAAC;AAC3D;AAEA,OAAO,IAAMG,kBAAkB,GAAG,eAAgBb,EAAE,CAAC;EAACC,mBAAmB,EAAnBA;AAAmB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}