{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { Cast, util } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { zeros } from '../utils/zeros_impl';\nimport { complex } from './Complex';\nimport { identity } from './Identity';\nimport { real } from './Real';\nexport function castImpl(values, shape, inputType, dtype) {\n  if (dtype === 'int32') {\n    var resultValues = Int32Array.from(values);\n    return [shape, 'int32', resultValues];\n  }\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    var zero = util.toTypedArray([0], inputType);\n    var _createSimpleBinaryKe = createSimpleBinaryKernelImpl(function (a, b) {\n        return a !== b ? 1 : 0;\n      })(shape, [], values, zero, 'bool'),\n      _createSimpleBinaryKe2 = _slicedToArray(_createSimpleBinaryKe, 2),\n      resultData = _createSimpleBinaryKe2[0],\n      resultShape = _createSimpleBinaryKe2[1];\n    return [resultShape, 'bool', resultData];\n  }\n  throw new Error(\"Error in Cast: failed to cast \".concat(inputType, \" to \").concat(dtype));\n}\nexport function cast(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var x = inputs.x;\n  var dtype = attrs.dtype;\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({\n        inputs: {\n          x: x\n        },\n        backend: backend\n      });\n    }\n    var zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    var floatX = cast({\n      inputs: {\n        x: x\n      },\n      backend: backend,\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    var result = complex({\n      inputs: {\n        real: floatX,\n        imag: zerosTensorInfo\n      },\n      backend: backend\n    });\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n    return result;\n  }\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    var realPart = real({\n      inputs: {\n        input: x\n      },\n      backend: backend\n    });\n    var _result = cast({\n      inputs: {\n        x: realPart\n      },\n      backend: backend,\n      attrs: {\n        dtype: dtype\n      }\n    });\n    backend.disposeIntermediateTensorInfo(realPart);\n    return _result;\n  }\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    var _result2 = identity({\n      inputs: {\n        x: x\n      },\n      backend: backend\n    });\n    return {\n      dataId: _result2.dataId,\n      shape: _result2.shape,\n      dtype: dtype\n    };\n  }\n  var values = backend.data.get(x.dataId).values;\n  var _castImpl = castImpl(values, x.shape, x.dtype, dtype),\n    _castImpl2 = _slicedToArray(_castImpl, 3),\n    resultShape = _castImpl2[0],\n    resultType = _castImpl2[1],\n    resultData = _castImpl2[2];\n  return backend.makeTensorInfo(resultShape, resultType, resultData);\n}\nexport var castConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast\n};","map":{"version":3,"names":["Cast","util","createSimpleBinaryKernelImpl","zeros","complex","identity","real","castImpl","values","shape","inputType","dtype","resultValues","Int32Array","from","zero","toTypedArray","_createSimpleBinaryKe","a","b","_createSimpleBinaryKe2","_slicedToArray","resultData","resultShape","Error","concat","cast","args","inputs","backend","attrs","x","zerosTensorInfo","floatX","result","imag","disposeIntermediateTensorInfo","realPart","input","hasEncodingLoss","dataId","data","get","_castImpl","_castImpl2","resultType","makeTensorInfo","castConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-cpu\\src\\kernels\\Cast.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, DataType, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function castImpl(\n    values: TypedArray, shape: number[], inputType: DataType,\n    dtype: DataType): [number[], DataType, TypedArray] {\n  if (dtype === 'int32') {\n    const resultValues = Int32Array.from(values);\n    return [shape, 'int32', resultValues];\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const zero = util.toTypedArray([0], inputType);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(shape, [], values, zero, 'bool');\n\n    return [resultShape, 'bool', resultData];\n  }\n  throw new Error(`Error in Cast: failed to cast ${inputType} to ${dtype}`);\n}\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const [resultShape, resultType, resultData] =\n      castImpl(values, x.shape, x.dtype, dtype);\n  return backend.makeTensorInfo(resultShape, resultType, resultData);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as unknown as KernelFunc\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}