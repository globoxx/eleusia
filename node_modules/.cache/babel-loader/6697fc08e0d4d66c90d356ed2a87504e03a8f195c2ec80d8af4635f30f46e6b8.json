{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport var ResizeBilinearProgram = /*#__PURE__*/_createClass(function ResizeBilinearProgram(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n  _classCallCheck(this, ResizeBilinearProgram);\n  this.variableNames = ['A'];\n  this.outputShape = [];\n  var _inputShape = _slicedToArray(inputShape, 4),\n    batch = _inputShape[0],\n    oldHeight = _inputShape[1],\n    oldWidth = _inputShape[2],\n    depth = _inputShape[3];\n  this.outputShape = [batch, newHeight, newWidth, depth];\n  var effectiveInSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];\n  var effectiveOutSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];\n  var sourceFracIndexRC;\n  if (halfPixelCenters) {\n    sourceFracIndexRC = \"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC\" + \" - vec2(0.5)\";\n  } else {\n    sourceFracIndexRC = \"vec2(yRC) * effectiveInputOverOutputRatioRC\";\n  }\n  this.userCode = \"\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          \".concat(effectiveInSize[0] / effectiveOutSize[0], \",\\n          \").concat(effectiveInSize[1] / effectiveOutSize[1], \");\\n      const vec2 inputShapeRC = vec2(\").concat(oldHeight, \".0, \").concat(oldWidth, \".0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = \").concat(sourceFracIndexRC, \";\\n\\n        // Compute the four integer indices.\\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\\n        ivec2 sourceCeilRC = ivec2(\\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\\n\\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\\n\\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\\n\\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\\n        float newValue = top + (bottom - top) * fracRC.x;\\n\\n        setOutput(newValue);\\n      }\\n    \");\n});","map":{"version":3,"names":["ResizeBilinearProgram","_createClass","inputShape","newHeight","newWidth","alignCorners","halfPixelCenters","_classCallCheck","variableNames","outputShape","_inputShape","_slicedToArray","batch","oldHeight","oldWidth","depth","effectiveInSize","effectiveOutSize","sourceFracIndexRC","userCode","concat"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\resize_bilinear_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          ` - vec2(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n"],"mappings":";;;AAAA;;;;;;;;;;;;;;;;AAmBA,WAAaA,qBAAqB,gBAAAC,YAAA,CAKhC,SAAAD,sBACIE,UAA4C,EAAEC,SAAiB,EAC/DC,QAAgB,EAAEC,YAAqB,EAAEC,gBAAyB;EAAAC,eAAA,OAAAP,qBAAA;EANtE,KAAAQ,aAAa,GAAG,CAAC,GAAG,CAAC;EACrB,KAAAC,WAAW,GAAa,EAAE;EAMxB,IAAAC,WAAA,GAAAC,cAAA,CAA4CT,UAAU;IAA/CU,KAAK,GAAAF,WAAA;IAAEG,SAAS,GAAAH,WAAA;IAAEI,QAAQ,GAAAJ,WAAA;IAAEK,KAAK,GAAAL,WAAA;EACxC,IAAI,CAACD,WAAW,GAAG,CAACG,KAAK,EAAET,SAAS,EAAEC,QAAQ,EAAEW,KAAK,CAAC;EAEtD,IAAMC,eAAe,GAAqB,CACvCX,YAAY,IAAIF,SAAS,GAAG,CAAC,GAAIU,SAAS,GAAG,CAAC,GAAGA,SAAS,EAC1DR,YAAY,IAAID,QAAQ,GAAG,CAAC,GAAIU,QAAQ,GAAG,CAAC,GAAGA,QAAQ,CACzD;EAED,IAAMG,gBAAgB,GAAqB,CACxCZ,YAAY,IAAIF,SAAS,GAAG,CAAC,GAAIA,SAAS,GAAG,CAAC,GAAGA,SAAS,EAC1DE,YAAY,IAAID,QAAQ,GAAG,CAAC,GAAIA,QAAQ,GAAG,CAAC,GAAGA,QAAQ,CACzD;EAED,IAAIc,iBAAyB;EAC7B,IAAIZ,gBAAgB,EAAE;IACpBY,iBAAiB,GACb,4EACc;GACnB,MAAM;IACLA,iBAAiB,gDAAgD;;EAGnE,IAAI,CAACC,QAAQ,4EAAAC,MAAA,CAELJ,eAAe,CAAC,CAAC,CAAC,GAAGC,gBAAgB,CAAC,CAAC,CAAC,mBAAAG,MAAA,CACxCJ,eAAe,CAAC,CAAC,CAAC,GAAGC,gBAAgB,CAAC,CAAC,CAAC,+CAAAG,MAAA,CACbP,SAAS,UAAAO,MAAA,CAAON,QAAQ,8OAAAM,MAAA,CAS5BF,iBAAiB,8zBAoB/C;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}