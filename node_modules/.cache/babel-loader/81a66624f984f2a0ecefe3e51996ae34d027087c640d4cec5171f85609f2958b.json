{"ast":null,"code":"import _toConsumableArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { concat as _concat, keep, reshape, scalar, slice, stack as _stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize, inferElementShape, mergeElementShape } from './tensor_utils';\n/**\r\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\r\n * via tensors field.\r\n *\r\n * In order to get a copy of the underlying list, use the copy method:\r\n * ```\r\n *    TensorList b = a.copy();\r\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\r\n * ```\r\n *\r\n * Note that this is not a deep copy: the memory locations of the underlying\r\n * tensors will still point to the same locations of the corresponding tensors\r\n * in the original.\r\n */\nexport var TensorList = /*#__PURE__*/function () {\n  /**\r\n   *\r\n   * @param tensors list of tensors\r\n   * @param elementShape shape of each tensor, this can be a single number (any\r\n   * shape is allowed) or partial shape (dim = -1).\r\n   * @param elementDtype data type of each tensor\r\n   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\r\n   *   meaning that the size of `tensors` is unbounded.\r\n   */\n  function TensorList(tensors, elementShape, elementDtype) {\n    var maxNumElements = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n    _classCallCheck(this, TensorList);\n    this.tensors = tensors;\n    this.elementShape = elementShape;\n    this.elementDtype = elementDtype;\n    if (tensors != null) {\n      tensors.forEach(function (tensor) {\n        if (elementDtype !== tensor.dtype) {\n          throw new Error(\"Invalid data types; op elements \".concat(elementDtype, \", but list elements \").concat(tensor.dtype));\n        }\n        assertShapesMatchAllowUndefinedSize(elementShape, tensor.shape, 'TensorList shape mismatch: ');\n        keep(tensor);\n      });\n    }\n    this.idTensor = scalar(0);\n    this.maxNumElements = maxNumElements;\n    keep(this.idTensor);\n  }\n  /**\r\n   * Get a new TensorList containing a copy of the underlying tensor container.\r\n   */\n  _createClass(TensorList, [{\n    key: \"id\",\n    get: function get() {\n      return this.idTensor.id;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      return new TensorList(_toConsumableArray(this.tensors), this.elementShape, this.elementDtype);\n    }\n    /**\r\n     * Dispose the tensors and idTensor and clear the tensor list.\r\n     */\n  }, {\n    key: \"clearAndClose\",\n    value: function clearAndClose(keepIds) {\n      this.tensors.forEach(function (tensor) {\n        if (keepIds == null || !keepIds.has(tensor.id)) {\n          tensor.dispose();\n        }\n      });\n      this.tensors.length = 0;\n      this.idTensor.dispose();\n    }\n    /**\r\n     * The size of the tensors in the tensor list.\r\n     */\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.tensors.length;\n    }\n    /**\r\n     * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\r\n     * tf.Tensor.\r\n     * @param elementShape shape of each tensor\r\n     * @param elementDtype data type of each tensor\r\n     * @param numElements the number of elements to stack\r\n     */\n  }, {\n    key: \"stack\",\n    value: function stack(elementShape, elementDtype) {\n      var _this = this;\n      var numElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n      if (elementDtype !== this.elementDtype) {\n        throw new Error(\"Invalid data types; op elements \".concat(elementDtype, \", but list elements \").concat(this.elementDtype));\n      }\n      if (numElements !== -1 && this.tensors.length !== numElements) {\n        throw new Error(\"Operation expected a list with \".concat(numElements, \" elements but got a list with \").concat(this.tensors.length, \" elements.\"));\n      }\n      assertShapesMatchAllowUndefinedSize(elementShape, this.elementShape, 'TensorList shape mismatch: ');\n      var outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n      return tidy(function () {\n        var reshapedTensors = _this.tensors.map(function (tensor) {\n          return reshape(tensor, outputElementShape);\n        });\n        return _stack(reshapedTensors, 0);\n      });\n    }\n    /**\r\n     * Pop a tensor from the end of the list.\r\n     * @param elementShape shape of the tensor\r\n     * @param elementDtype data type of the tensor\r\n     */\n  }, {\n    key: \"popBack\",\n    value: function popBack(elementShape, elementDtype) {\n      if (elementDtype !== this.elementDtype) {\n        throw new Error(\"Invalid data types; op elements \".concat(elementDtype, \", but list elements \").concat(this.elementDtype));\n      }\n      if (this.size() === 0) {\n        throw new Error('Trying to pop from an empty list.');\n      }\n      var outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n      var tensor = this.tensors.pop();\n      tensor.kept = false;\n      assertShapesMatchAllowUndefinedSize(tensor.shape, elementShape, 'TensorList shape mismatch: ');\n      return reshape(tensor, outputElementShape);\n    }\n    /**\r\n     * Push a tensor to the end of the list.\r\n     * @param tensor Tensor to be pushed.\r\n     */\n  }, {\n    key: \"pushBack\",\n    value: function pushBack(tensor) {\n      if (tensor.dtype !== this.elementDtype) {\n        throw new Error(\"Invalid data types; op elements \".concat(tensor.dtype, \", but list elements \").concat(this.elementDtype));\n      }\n      assertShapesMatchAllowUndefinedSize(tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n      if (this.maxNumElements === this.size()) {\n        throw new Error(\"Trying to push element into a full list.\");\n      }\n      keep(tensor);\n      this.tensors.push(tensor);\n    }\n    /**\r\n     * Update the size of the list.\r\n     * @param size the new size of the list.\r\n     */\n  }, {\n    key: \"resize\",\n    value: function resize(size) {\n      if (size < 0) {\n        throw new Error(\"TensorListResize expects size to be non-negative. Got: \".concat(size));\n      }\n      if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n        throw new Error(\"TensorListResize input size \".concat(size, \" is greater maxNumElement \").concat(this.maxNumElements, \".\"));\n      }\n      var destTensorList = new TensorList([], this.elementShape, this.elementDtype, this.maxNumElements);\n      destTensorList.tensors.length = size;\n      for (var i = 0; i < Math.min(this.tensors.length, size); ++i) {\n        destTensorList.tensors[i] = this.tensors[i];\n      }\n      return destTensorList;\n    }\n    /**\r\n     * Retrieve the element at the provided index\r\n     * @param elementShape shape of the tensor\r\n     * @param elementDtype dtype of the tensor\r\n     * @param elementIndex index of the tensor\r\n     */\n  }, {\n    key: \"getItem\",\n    value: function getItem(elementIndex, elementShape, elementDtype) {\n      if (elementDtype !== this.elementDtype) {\n        throw new Error(\"Invalid data types; op elements \".concat(elementDtype, \", but list elements \").concat(this.elementDtype));\n      }\n      if (elementIndex < 0 || elementIndex > this.tensors.length) {\n        throw new Error(\"Trying to access element \".concat(elementIndex, \" in a list with \").concat(this.tensors.length, \" elements.\"));\n      }\n      if (this.tensors[elementIndex] == null) {\n        throw new Error(\"element at index \".concat(elementIndex, \" is null.\"));\n      }\n      assertShapesMatchAllowUndefinedSize(this.tensors[elementIndex].shape, elementShape, 'TensorList shape mismatch: ');\n      var outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n      return reshape(this.tensors[elementIndex], outputElementShape);\n    }\n    /**\r\n     * Set the tensor at the index\r\n     * @param elementIndex index of the tensor\r\n     * @param tensor the tensor to be inserted into the list\r\n     */\n  }, {\n    key: \"setItem\",\n    value: function setItem(elementIndex, tensor) {\n      if (tensor.dtype !== this.elementDtype) {\n        throw new Error(\"Invalid data types; op elements \".concat(tensor.dtype, \", but list elements \").concat(this.elementDtype));\n      }\n      if (elementIndex < 0 || this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n        throw new Error(\"Trying to set element \".concat(elementIndex, \" in a list with max \").concat(this.maxNumElements, \" elements.\"));\n      }\n      assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n      keep(tensor);\n      // dispose the previous value if it is replacing.\n      if (this.tensors[elementIndex] != null) {\n        this.tensors[elementIndex].kept = false;\n      }\n      this.tensors[elementIndex] = tensor;\n    }\n    /**\r\n     * Return selected values in the TensorList as a stacked Tensor. All of\r\n     * selected values must have been written and their shapes must all match.\r\n     * @param indices indices of tensors to gather\r\n     * @param elementDtype output tensor dtype\r\n     * @param elementShape output tensor element shape\r\n     */\n  }, {\n    key: \"gather\",\n    value: function gather(indices, elementDtype, elementShape) {\n      var _this2 = this;\n      if (elementDtype !== this.elementDtype) {\n        throw new Error(\"Invalid data types; op elements \".concat(elementDtype, \", but list elements \").concat(this.elementDtype));\n      }\n      assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n      // When indices is greater than the size of the list, indices beyond the\n      // size of the list are ignored.\n      indices = indices.slice(0, this.size());\n      var outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n      if (indices.length === 0) {\n        return tensor([], [0].concat(outputElementShape));\n      }\n      return tidy(function () {\n        var tensors = indices.map(function (i) {\n          return reshape(_this2.tensors[i], outputElementShape);\n        });\n        return _stack(tensors, 0);\n      });\n    }\n    /**\r\n     * Return the values in the TensorList as a concatenated Tensor.\r\n     * @param elementDtype output tensor dtype\r\n     * @param elementShape output tensor element shape\r\n     */\n  }, {\n    key: \"concat\",\n    value: function concat(elementDtype, elementShape) {\n      var _this3 = this;\n      if (!!elementDtype && elementDtype !== this.elementDtype) {\n        throw new Error(\"TensorList dtype is \".concat(this.elementDtype, \" but concat requested dtype \").concat(elementDtype));\n      }\n      assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n      var outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n      if (this.size() === 0) {\n        return tensor([], [0].concat(outputElementShape));\n      }\n      return tidy(function () {\n        var tensors = _this3.tensors.map(function (t) {\n          return reshape(t, outputElementShape);\n        });\n        return _concat(tensors, 0);\n      });\n    }\n  }]);\n  return TensorList;\n}();\n/**\r\n * Creates a TensorList which, when stacked, has the value of tensor.\r\n * @param tensor from tensor\r\n * @param elementShape output tensor element shape\r\n */\nexport function fromTensor(tensor, elementShape, elementDtype) {\n  var dtype = tensor.dtype;\n  if (tensor.shape.length < 1) {\n    throw new Error(\"Tensor must be at least a vector, but saw shape: \".concat(tensor.shape));\n  }\n  if (tensor.dtype !== elementDtype) {\n    throw new Error(\"Invalid data types; op elements \".concat(tensor.dtype, \", but list elements \").concat(elementDtype));\n  }\n  var tensorElementShape = tensor.shape.slice(1);\n  assertShapesMatchAllowUndefinedSize(tensorElementShape, elementShape, 'TensorList shape mismatch: ');\n  var tensorList = unstack(tensor);\n  return new TensorList(tensorList, elementShape, dtype);\n}\n/**\r\n * Return a TensorList of the given size with empty elements.\r\n * @param elementShape the shape of the future elements of the list\r\n * @param elementDtype the desired type of elements in the list\r\n * @param numElements the number of elements to reserve\r\n * @param maxNumElements the maximum number of elements in th list\r\n */\nexport function reserve(elementShape, elementDtype, numElements, maxNumElements) {\n  return new TensorList([], elementShape, elementDtype, maxNumElements);\n}\n/**\r\n * Put tensors at specific indices of a stacked tensor into a TensorList.\r\n * @param indices list of indices on how to scatter the tensor.\r\n * @param tensor input tensor.\r\n * @param elementShape the shape of the future elements of the list\r\n * @param numElements the number of elements to scatter\r\n */\nexport function scatter(tensor, indices, elementShape, numElements) {\n  if (indices.length !== tensor.shape[0]) {\n    throw new Error(\"Expected len(indices) == tensor.shape[0], but saw: \".concat(indices.length, \" vs. \").concat(tensor.shape[0]));\n  }\n  var maxIndex = Math.max.apply(Math, _toConsumableArray(indices));\n  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n    throw new Error(\"Max index must be < array size (\".concat(maxIndex, \"  vs. \").concat(numElements, \")\"));\n  }\n  var list = new TensorList([], elementShape, tensor.dtype, numElements);\n  var tensors = unstack(tensor, 0);\n  indices.forEach(function (value, index) {\n    list.setItem(value, tensors[index]);\n  });\n  return list;\n}\n/**\r\n * Split the values of a Tensor into a TensorList.\r\n * @param length the lengths to use when splitting value along\r\n *    its first dimension.\r\n * @param tensor the tensor to split.\r\n * @param elementShape the shape of the future elements of the list\r\n */\nexport function split(tensor, length, elementShape) {\n  var totalLength = 0;\n  var cumulativeLengths = length.map(function (len) {\n    totalLength += len;\n    return totalLength;\n  });\n  if (totalLength !== tensor.shape[0]) {\n    throw new Error(\"Expected sum of lengths to be equal to\\n          tensor.shape[0], but sum of lengths is\\n        \".concat(totalLength, \", and tensor's shape is: \").concat(tensor.shape));\n  }\n  var shapeWithoutFirstDim = tensor.shape.slice(1);\n  var outputElementShape = mergeElementShape(shapeWithoutFirstDim, elementShape);\n  var elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n  var tensors = tidy(function () {\n    var tensors = [];\n    tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n    for (var i = 0; i < length.length; ++i) {\n      var previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];\n      var indices = [0, previousLength, 0];\n      var sizes = [1, length[i], elementPerRow];\n      tensors[i] = reshape(slice(tensor, indices, sizes), outputElementShape);\n    }\n    tensor.dispose();\n    return tensors;\n  });\n  var list = new TensorList([], elementShape, tensor.dtype, length.length);\n  for (var i = 0; i < tensors.length; i++) {\n    list.setItem(i, tensors[i]);\n  }\n  return list;\n}","map":{"version":3,"names":["concat","keep","reshape","scalar","slice","stack","tensor","tidy","unstack","assertShapesMatchAllowUndefinedSize","inferElementShape","mergeElementShape","TensorList","tensors","elementShape","elementDtype","maxNumElements","arguments","length","undefined","_classCallCheck","forEach","dtype","Error","shape","idTensor","_createClass","key","get","id","value","copy","_toConsumableArray","clearAndClose","keepIds","has","dispose","size","_this","numElements","outputElementShape","reshapedTensors","map","popBack","pop","kept","pushBack","push","resize","destTensorList","i","Math","min","getItem","elementIndex","setItem","gather","indices","_this2","_this3","t","fromTensor","tensorElementShape","tensorList","reserve","scatter","maxIndex","max","apply","list","index","split","totalLength","cumulativeLengths","len","shapeWithoutFirstDim","elementPerRow","previousLength","sizes"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-converter\\src\\executor\\tensor_list.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, reshape, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize, inferElementShape, mergeElementShape} from './tensor_utils';\n\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\n\nexport class TensorList {\n  readonly idTensor: Tensor;\n  maxNumElements: number;\n\n  get id() {\n    return this.idTensor.id;\n  }\n  /**\n   *\n   * @param tensors list of tensors\n   * @param elementShape shape of each tensor, this can be a single number (any\n   * shape is allowed) or partial shape (dim = -1).\n   * @param elementDtype data type of each tensor\n   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n   *   meaning that the size of `tensors` is unbounded.\n   */\n  constructor(\n      readonly tensors: Tensor[], readonly elementShape: number|number[],\n      readonly elementDtype: DataType, maxNumElements = -1) {\n    if (tensors != null) {\n      tensors.forEach(tensor => {\n        if (elementDtype !== tensor.dtype) {\n          throw new Error(`Invalid data types; op elements ${\n              elementDtype}, but list elements ${tensor.dtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(\n            elementShape, tensor.shape, 'TensorList shape mismatch: ');\n\n        keep(tensor);\n      });\n    }\n    this.idTensor = scalar(0);\n    this.maxNumElements = maxNumElements;\n    keep(this.idTensor);\n  }\n\n  /**\n   * Get a new TensorList containing a copy of the underlying tensor container.\n   */\n  copy(): TensorList {\n    return new TensorList(\n        [...this.tensors], this.elementShape, this.elementDtype);\n  }\n\n  /**\n   * Dispose the tensors and idTensor and clear the tensor list.\n   */\n  clearAndClose(keepIds?: Set<number>) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.id)) {\n        tensor.dispose();\n      }\n    });\n    this.tensors.length = 0;\n    this.idTensor.dispose();\n  }\n  /**\n   * The size of the tensors in the tensor list.\n   */\n  size() {\n    return this.tensors.length;\n  }\n\n  /**\n   * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n   * tf.Tensor.\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param numElements the number of elements to stack\n   */\n  stack(elementShape: number[], elementDtype: DataType, numElements = -1):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (numElements !== -1 && this.tensors.length !== numElements) {\n      throw new Error(`Operation expected a list with ${\n          numElements} elements but got a list with ${\n          this.tensors.length} elements.`);\n    }\n    assertShapesMatchAllowUndefinedSize(\n        elementShape, this.elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    return tidy(() => {\n      const reshapedTensors =\n          this.tensors.map(tensor => reshape(tensor, outputElementShape));\n      return stack(reshapedTensors, 0);\n    });\n  }\n\n  /**\n   * Pop a tensor from the end of the list.\n   * @param elementShape shape of the tensor\n   * @param elementDtype data type of the tensor\n   */\n  popBack(elementShape: number[], elementDtype: DataType): Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (this.size() === 0) {\n      throw new Error('Trying to pop from an empty list.');\n    }\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    const tensor = this.tensors.pop();\n    tensor.kept = false;\n\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, elementShape, 'TensorList shape mismatch: ');\n\n    return reshape(tensor, outputElementShape);\n  }\n\n  /**\n   * Push a tensor to the end of the list.\n   * @param tensor Tensor to be pushed.\n   */\n  pushBack(tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n\n    if (this.maxNumElements === this.size()) {\n      throw new Error(`Trying to push element into a full list.`);\n    }\n    keep(tensor);\n    this.tensors.push(tensor);\n  }\n\n  /**\n   * Update the size of the list.\n   * @param size the new size of the list.\n   */\n  resize(size: number) {\n    if (size < 0) {\n      throw new Error(\n          `TensorListResize expects size to be non-negative. Got: ${size}`);\n    }\n\n    if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n      throw new Error(`TensorListResize input size ${\n          size} is greater maxNumElement ${this.maxNumElements}.`);\n    }\n\n    const destTensorList: TensorList = new TensorList(\n        [], this.elementShape, this.elementDtype, this.maxNumElements);\n    destTensorList.tensors.length = size;\n    for (let i = 0; i < Math.min(this.tensors.length, size); ++i) {\n      destTensorList.tensors[i] = this.tensors[i];\n    }\n    return destTensorList;\n  }\n\n  /**\n   * Retrieve the element at the provided index\n   * @param elementShape shape of the tensor\n   * @param elementDtype dtype of the tensor\n   * @param elementIndex index of the tensor\n   */\n  getItem(elementIndex: number, elementShape: number[], elementDtype: DataType):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (elementIndex < 0 || elementIndex > this.tensors.length) {\n      throw new Error(`Trying to access element ${\n          elementIndex} in a list with ${this.tensors.length} elements.`);\n    }\n\n    if (this.tensors[elementIndex] == null) {\n      throw new Error(`element at index ${elementIndex} is null.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.tensors[elementIndex].shape, elementShape,\n        'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    return reshape(this.tensors[elementIndex], outputElementShape);\n  }\n\n  /**\n   * Set the tensor at the index\n   * @param elementIndex index of the tensor\n   * @param tensor the tensor to be inserted into the list\n   */\n  setItem(elementIndex: number, tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (elementIndex < 0 ||\n        this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n      throw new Error(`Trying to set element ${\n          elementIndex} in a list with max ${this.maxNumElements} elements.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n    keep(tensor);\n\n    // dispose the previous value if it is replacing.\n    if (this.tensors[elementIndex] != null) {\n      this.tensors[elementIndex].kept = false;\n    }\n\n    this.tensors[elementIndex] = tensor;\n  }\n\n  /**\n   * Return selected values in the TensorList as a stacked Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param indices indices of tensors to gather\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  gather(indices: number[], elementDtype: DataType, elementShape: number[]):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n\n    // When indices is greater than the size of the list, indices beyond the\n    // size of the list are ignored.\n    indices = indices.slice(0, this.size());\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    if (indices.length === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n\n    return tidy(() => {\n      const tensors =\n          indices.map(i => reshape(this.tensors[i], outputElementShape));\n      return stack(tensors, 0);\n    });\n  }\n\n  /**\n   * Return the values in the TensorList as a concatenated Tensor.\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  concat(elementDtype: DataType, elementShape: number[]): Tensor {\n    if (!!elementDtype && elementDtype !== this.elementDtype) {\n      throw new Error(`TensorList dtype is ${\n          this.elementDtype} but concat requested dtype ${elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n    return tidy(() => {\n      const tensors = this.tensors.map(t => reshape(t, outputElementShape));\n      return concat(tensors, 0);\n    });\n  }\n}\n\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\nexport function fromTensor(\n    tensor: Tensor, elementShape: number[], elementDtype: DataType) {\n  const dtype = tensor.dtype;\n  if (tensor.shape.length < 1) {\n    throw new Error(\n        `Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n  }\n  if (tensor.dtype !== elementDtype) {\n    throw new Error(`Invalid data types; op elements ${\n        tensor.dtype}, but list elements ${elementDtype}`);\n  }\n  const tensorElementShape = tensor.shape.slice(1);\n  assertShapesMatchAllowUndefinedSize(\n      tensorElementShape, elementShape, 'TensorList shape mismatch: ');\n  const tensorList: Tensor[] = unstack(tensor);\n  return new TensorList(tensorList, elementShape, dtype);\n}\n\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n * @param maxNumElements the maximum number of elements in th list\n */\nexport function reserve(\n    elementShape: number[], elementDtype: DataType, numElements: number,\n    maxNumElements: number) {\n  return new TensorList([], elementShape, elementDtype, maxNumElements);\n}\n\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\nexport function scatter(\n    tensor: Tensor, indices: number[], elementShape: number[],\n    numElements?: number): TensorList {\n  if (indices.length !== tensor.shape[0]) {\n    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n        indices.length} vs. ${tensor.shape[0]}`);\n  }\n\n  const maxIndex = Math.max(...indices);\n\n  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n    throw new Error(\n        `Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n  }\n\n  const list = new TensorList([], elementShape, tensor.dtype, numElements);\n  const tensors = unstack(tensor, 0);\n  indices.forEach((value, index) => {\n    list.setItem(value, tensors[index]);\n  });\n  return list;\n}\n\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\nexport function split(\n    tensor: Tensor, length: number[], elementShape: number[]) {\n  let totalLength = 0;\n  const cumulativeLengths = length.map(len => {\n    totalLength += len;\n    return totalLength;\n  });\n\n  if (totalLength !== tensor.shape[0]) {\n    throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n  }\n\n  const shapeWithoutFirstDim = tensor.shape.slice(1);\n  const outputElementShape =\n      mergeElementShape(shapeWithoutFirstDim, elementShape);\n  const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n  const tensors: Tensor[] = tidy(() => {\n    const tensors = [];\n    tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n    for (let i = 0; i < length.length; ++i) {\n      const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n      const indices = [0, previousLength, 0];\n      const sizes = [1, length[i], elementPerRow];\n      tensors[i] = reshape(\n          slice(tensor, indices, sizes), outputElementShape as number[]);\n    }\n    tensor.dispose();\n    return tensors;\n  });\n\n  const list = new TensorList([], elementShape, tensor.dtype, length.length);\n\n  for (let i = 0; i < tensors.length; i++) {\n    list.setItem(i, tensors[i]);\n  }\n  return list;\n}\n"],"mappings":";;;AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,IAANA,OAAM,EAAYC,IAAI,EAAEC,OAAO,EAAEC,MAAM,EAAEC,KAAK,EAAEC,KAAK,IAALA,MAAK,EAAUC,MAAM,EAAEC,IAAI,EAAEC,OAAO,QAAO,uBAAuB;AAE1H,SAAQC,mCAAmC,EAAEC,iBAAiB,EAAEC,iBAAiB,QAAO,gBAAgB;AAExG;;;;;;;;;;;;;;AAeA,WAAaC,UAAU;EAOrB;;;;;;;;;EASA,SAAAA,WACaC,OAAiB,EAAWC,YAA6B,EACzDC,YAAsB,EAAqB;IAAA,IAAnBC,cAAc,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAAAG,eAAA,OAAAR,UAAA;IAD3C,KAAAC,OAAO,GAAPA,OAAO;IAAqB,KAAAC,YAAY,GAAZA,YAAY;IACxC,KAAAC,YAAY,GAAZA,YAAY;IACvB,IAAIF,OAAO,IAAI,IAAI,EAAE;MACnBA,OAAO,CAACQ,OAAO,CAAC,UAAAf,MAAM,EAAG;QACvB,IAAIS,YAAY,KAAKT,MAAM,CAACgB,KAAK,EAAE;UACjC,MAAM,IAAIC,KAAK,oCAAAvB,MAAA,CACXe,YAAY,0BAAAf,MAAA,CAAuBM,MAAM,CAACgB,KAAK,EAAG;;QAExDb,mCAAmC,CAC/BK,YAAY,EAAER,MAAM,CAACkB,KAAK,EAAE,6BAA6B,CAAC;QAE9DvB,IAAI,CAACK,MAAM,CAAC;MACd,CAAC,CAAC;;IAEJ,IAAI,CAACmB,QAAQ,GAAGtB,MAAM,CAAC,CAAC,CAAC;IACzB,IAAI,CAACa,cAAc,GAAGA,cAAc;IACpCf,IAAI,CAAC,IAAI,CAACwB,QAAQ,CAAC;EACrB;EAEA;;;EAAAC,YAAA,CAAAd,UAAA;IAAAe,GAAA;IAAAC,GAAA,EAhCA,SAAAA,IAAA,EAAM;MACJ,OAAO,IAAI,CAACH,QAAQ,CAACI,EAAE;IACzB;EAAC;IAAAF,GAAA;IAAAG,KAAA,EAiCD,SAAAC,KAAA,EAAI;MACF,OAAO,IAAInB,UAAU,CAAAoB,kBAAA,CACb,IAAI,CAACnB,OAAO,GAAG,IAAI,CAACC,YAAY,EAAE,IAAI,CAACC,YAAY,CAAC;IAC9D;IAEA;;;EAAA;IAAAY,GAAA;IAAAG,KAAA,EAGA,SAAAG,cAAcC,OAAqB;MACjC,IAAI,CAACrB,OAAO,CAACQ,OAAO,CAAC,UAAAf,MAAM,EAAG;QAC5B,IAAI4B,OAAO,IAAI,IAAI,IAAI,CAACA,OAAO,CAACC,GAAG,CAAC7B,MAAM,CAACuB,EAAE,CAAC,EAAE;UAC9CvB,MAAM,CAAC8B,OAAO,EAAE;;MAEpB,CAAC,CAAC;MACF,IAAI,CAACvB,OAAO,CAACK,MAAM,GAAG,CAAC;MACvB,IAAI,CAACO,QAAQ,CAACW,OAAO,EAAE;IACzB;IACA;;;EAAA;IAAAT,GAAA;IAAAG,KAAA,EAGA,SAAAO,KAAA,EAAI;MACF,OAAO,IAAI,CAACxB,OAAO,CAACK,MAAM;IAC5B;IAEA;;;;;;;EAAA;IAAAS,GAAA;IAAAG,KAAA,EAOA,SAAAzB,MAAMS,YAAsB,EAAEC,YAAsB,EAAkB;MAAA,IAAAuB,KAAA;MAAA,IAAhBC,WAAW,GAAAtB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;MAEpE,IAAIF,YAAY,KAAK,IAAI,CAACA,YAAY,EAAE;QACtC,MAAM,IAAIQ,KAAK,oCAAAvB,MAAA,CACXe,YAAY,0BAAAf,MAAA,CAAuB,IAAI,CAACe,YAAY,EAAG;;MAE7D,IAAIwB,WAAW,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC1B,OAAO,CAACK,MAAM,KAAKqB,WAAW,EAAE;QAC7D,MAAM,IAAIhB,KAAK,mCAAAvB,MAAA,CACXuC,WAAW,oCAAAvC,MAAA,CACX,IAAI,CAACa,OAAO,CAACK,MAAM,gBAAa;;MAEtCT,mCAAmC,CAC/BK,YAAY,EAAE,IAAI,CAACA,YAAY,EAAE,6BAA6B,CAAC;MACnE,IAAM0B,kBAAkB,GACpB9B,iBAAiB,CAAC,IAAI,CAACI,YAAY,EAAE,IAAI,CAACD,OAAO,EAAEC,YAAY,CAAC;MACpE,OAAOP,IAAI,CAAC,YAAK;QACf,IAAMkC,eAAe,GACjBH,KAAI,CAACzB,OAAO,CAAC6B,GAAG,CAAC,UAAApC,MAAM;UAAA,OAAIJ,OAAO,CAACI,MAAM,EAAEkC,kBAAkB,CAAC;QAAA,EAAC;QACnE,OAAOnC,MAAK,CAACoC,eAAe,EAAE,CAAC,CAAC;MAClC,CAAC,CAAC;IACJ;IAEA;;;;;EAAA;IAAAd,GAAA;IAAAG,KAAA,EAKA,SAAAa,QAAQ7B,YAAsB,EAAEC,YAAsB;MACpD,IAAIA,YAAY,KAAK,IAAI,CAACA,YAAY,EAAE;QACtC,MAAM,IAAIQ,KAAK,oCAAAvB,MAAA,CACXe,YAAY,0BAAAf,MAAA,CAAuB,IAAI,CAACe,YAAY,EAAG;;MAG7D,IAAI,IAAI,CAACsB,IAAI,EAAE,KAAK,CAAC,EAAE;QACrB,MAAM,IAAId,KAAK,CAAC,mCAAmC,CAAC;;MAEtD,IAAMiB,kBAAkB,GACpB9B,iBAAiB,CAAC,IAAI,CAACI,YAAY,EAAE,IAAI,CAACD,OAAO,EAAEC,YAAY,CAAC;MACpE,IAAMR,MAAM,GAAG,IAAI,CAACO,OAAO,CAAC+B,GAAG,EAAE;MACjCtC,MAAM,CAACuC,IAAI,GAAG,KAAK;MAEnBpC,mCAAmC,CAC/BH,MAAM,CAACkB,KAAK,EAAEV,YAAY,EAAE,6BAA6B,CAAC;MAE9D,OAAOZ,OAAO,CAACI,MAAM,EAAEkC,kBAAkB,CAAC;IAC5C;IAEA;;;;EAAA;IAAAb,GAAA;IAAAG,KAAA,EAIA,SAAAgB,SAASxC,MAAc;MACrB,IAAIA,MAAM,CAACgB,KAAK,KAAK,IAAI,CAACP,YAAY,EAAE;QACtC,MAAM,IAAIQ,KAAK,oCAAAvB,MAAA,CACXM,MAAM,CAACgB,KAAK,0BAAAtB,MAAA,CAAuB,IAAI,CAACe,YAAY,EAAG;;MAG7DN,mCAAmC,CAC/BH,MAAM,CAACkB,KAAK,EAAE,IAAI,CAACV,YAAY,EAAE,6BAA6B,CAAC;MAEnE,IAAI,IAAI,CAACE,cAAc,KAAK,IAAI,CAACqB,IAAI,EAAE,EAAE;QACvC,MAAM,IAAId,KAAK,4CAA4C;;MAE7DtB,IAAI,CAACK,MAAM,CAAC;MACZ,IAAI,CAACO,OAAO,CAACkC,IAAI,CAACzC,MAAM,CAAC;IAC3B;IAEA;;;;EAAA;IAAAqB,GAAA;IAAAG,KAAA,EAIA,SAAAkB,OAAOX,IAAY;MACjB,IAAIA,IAAI,GAAG,CAAC,EAAE;QACZ,MAAM,IAAId,KAAK,2DAAAvB,MAAA,CAC+CqC,IAAI,EAAG;;MAGvE,IAAI,IAAI,CAACrB,cAAc,KAAK,CAAC,CAAC,IAAIqB,IAAI,GAAG,IAAI,CAACrB,cAAc,EAAE;QAC5D,MAAM,IAAIO,KAAK,gCAAAvB,MAAA,CACXqC,IAAI,gCAAArC,MAAA,CAA6B,IAAI,CAACgB,cAAc,OAAI;;MAG9D,IAAMiC,cAAc,GAAe,IAAIrC,UAAU,CAC7C,EAAE,EAAE,IAAI,CAACE,YAAY,EAAE,IAAI,CAACC,YAAY,EAAE,IAAI,CAACC,cAAc,CAAC;MAClEiC,cAAc,CAACpC,OAAO,CAACK,MAAM,GAAGmB,IAAI;MACpC,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACvC,OAAO,CAACK,MAAM,EAAEmB,IAAI,CAAC,EAAE,EAAEa,CAAC,EAAE;QAC5DD,cAAc,CAACpC,OAAO,CAACqC,CAAC,CAAC,GAAG,IAAI,CAACrC,OAAO,CAACqC,CAAC,CAAC;;MAE7C,OAAOD,cAAc;IACvB;IAEA;;;;;;EAAA;IAAAtB,GAAA;IAAAG,KAAA,EAMA,SAAAuB,QAAQC,YAAoB,EAAExC,YAAsB,EAAEC,YAAsB;MAE1E,IAAIA,YAAY,KAAK,IAAI,CAACA,YAAY,EAAE;QACtC,MAAM,IAAIQ,KAAK,oCAAAvB,MAAA,CACXe,YAAY,0BAAAf,MAAA,CAAuB,IAAI,CAACe,YAAY,EAAG;;MAE7D,IAAIuC,YAAY,GAAG,CAAC,IAAIA,YAAY,GAAG,IAAI,CAACzC,OAAO,CAACK,MAAM,EAAE;QAC1D,MAAM,IAAIK,KAAK,6BAAAvB,MAAA,CACXsD,YAAY,sBAAAtD,MAAA,CAAmB,IAAI,CAACa,OAAO,CAACK,MAAM,gBAAa;;MAGrE,IAAI,IAAI,CAACL,OAAO,CAACyC,YAAY,CAAC,IAAI,IAAI,EAAE;QACtC,MAAM,IAAI/B,KAAK,qBAAAvB,MAAA,CAAqBsD,YAAY,eAAY;;MAG9D7C,mCAAmC,CAC/B,IAAI,CAACI,OAAO,CAACyC,YAAY,CAAC,CAAC9B,KAAK,EAAEV,YAAY,EAC9C,6BAA6B,CAAC;MAClC,IAAM0B,kBAAkB,GACpB9B,iBAAiB,CAAC,IAAI,CAACI,YAAY,EAAE,IAAI,CAACD,OAAO,EAAEC,YAAY,CAAC;MACpE,OAAOZ,OAAO,CAAC,IAAI,CAACW,OAAO,CAACyC,YAAY,CAAC,EAAEd,kBAAkB,CAAC;IAChE;IAEA;;;;;EAAA;IAAAb,GAAA;IAAAG,KAAA,EAKA,SAAAyB,QAAQD,YAAoB,EAAEhD,MAAc;MAC1C,IAAIA,MAAM,CAACgB,KAAK,KAAK,IAAI,CAACP,YAAY,EAAE;QACtC,MAAM,IAAIQ,KAAK,oCAAAvB,MAAA,CACXM,MAAM,CAACgB,KAAK,0BAAAtB,MAAA,CAAuB,IAAI,CAACe,YAAY,EAAG;;MAG7D,IAAIuC,YAAY,GAAG,CAAC,IAChB,IAAI,CAACtC,cAAc,KAAK,CAAC,CAAC,IAAIsC,YAAY,IAAI,IAAI,CAACtC,cAAc,EAAE;QACrE,MAAM,IAAIO,KAAK,0BAAAvB,MAAA,CACXsD,YAAY,0BAAAtD,MAAA,CAAuB,IAAI,CAACgB,cAAc,gBAAa;;MAGzEP,mCAAmC,CAC/B,IAAI,CAACK,YAAY,EAAER,MAAM,CAACkB,KAAK,EAAE,6BAA6B,CAAC;MACnEvB,IAAI,CAACK,MAAM,CAAC;MAEZ;MACA,IAAI,IAAI,CAACO,OAAO,CAACyC,YAAY,CAAC,IAAI,IAAI,EAAE;QACtC,IAAI,CAACzC,OAAO,CAACyC,YAAY,CAAC,CAACT,IAAI,GAAG,KAAK;;MAGzC,IAAI,CAAChC,OAAO,CAACyC,YAAY,CAAC,GAAGhD,MAAM;IACrC;IAEA;;;;;;;EAAA;IAAAqB,GAAA;IAAAG,KAAA,EAOA,SAAA0B,OAAOC,OAAiB,EAAE1C,YAAsB,EAAED,YAAsB;MAAA,IAAA4C,MAAA;MAEtE,IAAI3C,YAAY,KAAK,IAAI,CAACA,YAAY,EAAE;QACtC,MAAM,IAAIQ,KAAK,oCAAAvB,MAAA,CACXe,YAAY,0BAAAf,MAAA,CAAuB,IAAI,CAACe,YAAY,EAAG;;MAG7DN,mCAAmC,CAC/B,IAAI,CAACK,YAAY,EAAEA,YAAY,EAAE,6BAA6B,CAAC;MAEnE;MACA;MACA2C,OAAO,GAAGA,OAAO,CAACrD,KAAK,CAAC,CAAC,EAAE,IAAI,CAACiC,IAAI,EAAE,CAAC;MACvC,IAAMG,kBAAkB,GACpB9B,iBAAiB,CAAC,IAAI,CAACI,YAAY,EAAE,IAAI,CAACD,OAAO,EAAEC,YAAY,CAAC;MACpE,IAAI2C,OAAO,CAACvC,MAAM,KAAK,CAAC,EAAE;QACxB,OAAOZ,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAACN,MAAM,CAACwC,kBAAkB,CAAC,CAAC;;MAGnD,OAAOjC,IAAI,CAAC,YAAK;QACf,IAAMM,OAAO,GACT4C,OAAO,CAACf,GAAG,CAAC,UAAAQ,CAAC;UAAA,OAAIhD,OAAO,CAACwD,MAAI,CAAC7C,OAAO,CAACqC,CAAC,CAAC,EAAEV,kBAAkB,CAAC;QAAA,EAAC;QAClE,OAAOnC,MAAK,CAACQ,OAAO,EAAE,CAAC,CAAC;MAC1B,CAAC,CAAC;IACJ;IAEA;;;;;EAAA;IAAAc,GAAA;IAAAG,KAAA,EAKA,SAAA9B,OAAOe,YAAsB,EAAED,YAAsB;MAAA,IAAA6C,MAAA;MACnD,IAAI,CAAC,CAAC5C,YAAY,IAAIA,YAAY,KAAK,IAAI,CAACA,YAAY,EAAE;QACxD,MAAM,IAAIQ,KAAK,wBAAAvB,MAAA,CACX,IAAI,CAACe,YAAY,kCAAAf,MAAA,CAA+Be,YAAY,EAAG;;MAGrEN,mCAAmC,CAC/B,IAAI,CAACK,YAAY,EAAEA,YAAY,EAAE,6BAA6B,CAAC;MACnE,IAAM0B,kBAAkB,GACpB9B,iBAAiB,CAAC,IAAI,CAACI,YAAY,EAAE,IAAI,CAACD,OAAO,EAAEC,YAAY,CAAC;MAEpE,IAAI,IAAI,CAACuB,IAAI,EAAE,KAAK,CAAC,EAAE;QACrB,OAAO/B,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAACN,MAAM,CAACwC,kBAAkB,CAAC,CAAC;;MAEnD,OAAOjC,IAAI,CAAC,YAAK;QACf,IAAMM,OAAO,GAAG8C,MAAI,CAAC9C,OAAO,CAAC6B,GAAG,CAAC,UAAAkB,CAAC;UAAA,OAAI1D,OAAO,CAAC0D,CAAC,EAAEpB,kBAAkB,CAAC;QAAA,EAAC;QACrE,OAAOxC,OAAM,CAACa,OAAO,EAAE,CAAC,CAAC;MAC3B,CAAC,CAAC;IACJ;EAAC;EAAA,OAAAD,UAAA;AAAA;AAGH;;;;;AAKA,OAAM,SAAUiD,UAAUA,CACtBvD,MAAc,EAAEQ,YAAsB,EAAEC,YAAsB;EAChE,IAAMO,KAAK,GAAGhB,MAAM,CAACgB,KAAK;EAC1B,IAAIhB,MAAM,CAACkB,KAAK,CAACN,MAAM,GAAG,CAAC,EAAE;IAC3B,MAAM,IAAIK,KAAK,qDAAAvB,MAAA,CACyCM,MAAM,CAACkB,KAAK,EAAG;;EAEzE,IAAIlB,MAAM,CAACgB,KAAK,KAAKP,YAAY,EAAE;IACjC,MAAM,IAAIQ,KAAK,oCAAAvB,MAAA,CACXM,MAAM,CAACgB,KAAK,0BAAAtB,MAAA,CAAuBe,YAAY,EAAG;;EAExD,IAAM+C,kBAAkB,GAAGxD,MAAM,CAACkB,KAAK,CAACpB,KAAK,CAAC,CAAC,CAAC;EAChDK,mCAAmC,CAC/BqD,kBAAkB,EAAEhD,YAAY,EAAE,6BAA6B,CAAC;EACpE,IAAMiD,UAAU,GAAavD,OAAO,CAACF,MAAM,CAAC;EAC5C,OAAO,IAAIM,UAAU,CAACmD,UAAU,EAAEjD,YAAY,EAAEQ,KAAK,CAAC;AACxD;AAEA;;;;;;;AAOA,OAAM,SAAU0C,OAAOA,CACnBlD,YAAsB,EAAEC,YAAsB,EAAEwB,WAAmB,EACnEvB,cAAsB;EACxB,OAAO,IAAIJ,UAAU,CAAC,EAAE,EAAEE,YAAY,EAAEC,YAAY,EAAEC,cAAc,CAAC;AACvE;AAEA;;;;;;;AAOA,OAAM,SAAUiD,OAAOA,CACnB3D,MAAc,EAAEmD,OAAiB,EAAE3C,YAAsB,EACzDyB,WAAoB;EACtB,IAAIkB,OAAO,CAACvC,MAAM,KAAKZ,MAAM,CAACkB,KAAK,CAAC,CAAC,CAAC,EAAE;IACtC,MAAM,IAAID,KAAK,uDAAAvB,MAAA,CACXyD,OAAO,CAACvC,MAAM,WAAAlB,MAAA,CAAQM,MAAM,CAACkB,KAAK,CAAC,CAAC,CAAC,EAAG;;EAG9C,IAAM0C,QAAQ,GAAGf,IAAI,CAACgB,GAAG,CAAAC,KAAA,CAARjB,IAAI,EAAAnB,kBAAA,CAAQyB,OAAO,EAAC;EAErC,IAAIlB,WAAW,IAAI,IAAI,IAAIA,WAAW,KAAK,CAAC,CAAC,IAAI2B,QAAQ,IAAI3B,WAAW,EAAE;IACxE,MAAM,IAAIhB,KAAK,oCAAAvB,MAAA,CACwBkE,QAAQ,YAAAlE,MAAA,CAASuC,WAAW,OAAI;;EAGzE,IAAM8B,IAAI,GAAG,IAAIzD,UAAU,CAAC,EAAE,EAAEE,YAAY,EAAER,MAAM,CAACgB,KAAK,EAAEiB,WAAW,CAAC;EACxE,IAAM1B,OAAO,GAAGL,OAAO,CAACF,MAAM,EAAE,CAAC,CAAC;EAClCmD,OAAO,CAACpC,OAAO,CAAC,UAACS,KAAK,EAAEwC,KAAK,EAAI;IAC/BD,IAAI,CAACd,OAAO,CAACzB,KAAK,EAAEjB,OAAO,CAACyD,KAAK,CAAC,CAAC;EACrC,CAAC,CAAC;EACF,OAAOD,IAAI;AACb;AAEA;;;;;;;AAOA,OAAM,SAAUE,KAAKA,CACjBjE,MAAc,EAAEY,MAAgB,EAAEJ,YAAsB;EAC1D,IAAI0D,WAAW,GAAG,CAAC;EACnB,IAAMC,iBAAiB,GAAGvD,MAAM,CAACwB,GAAG,CAAC,UAAAgC,GAAG,EAAG;IACzCF,WAAW,IAAIE,GAAG;IAClB,OAAOF,WAAW;EACpB,CAAC,CAAC;EAEF,IAAIA,WAAW,KAAKlE,MAAM,CAACkB,KAAK,CAAC,CAAC,CAAC,EAAE;IACnC,MAAM,IAAID,KAAK,sGAAAvB,MAAA,CAETwE,WAAW,+BAAAxE,MAAA,CAA4BM,MAAM,CAACkB,KAAK,EAAG;;EAG9D,IAAMmD,oBAAoB,GAAGrE,MAAM,CAACkB,KAAK,CAACpB,KAAK,CAAC,CAAC,CAAC;EAClD,IAAMoC,kBAAkB,GACpB7B,iBAAiB,CAACgE,oBAAoB,EAAE7D,YAAY,CAAC;EACzD,IAAM8D,aAAa,GAAGJ,WAAW,KAAK,CAAC,GAAG,CAAC,GAAGlE,MAAM,CAAC+B,IAAI,GAAGmC,WAAW;EACvE,IAAM3D,OAAO,GAAaN,IAAI,CAAC,YAAK;IAClC,IAAMM,OAAO,GAAG,EAAE;IAClBP,MAAM,GAAGJ,OAAO,CAACI,MAAM,EAAE,CAAC,CAAC,EAAEkE,WAAW,EAAEI,aAAa,CAAC,CAAC;IACzD,KAAK,IAAI1B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhC,MAAM,CAACA,MAAM,EAAE,EAAEgC,CAAC,EAAE;MACtC,IAAM2B,cAAc,GAAI3B,CAAC,KAAK,CAAC,GAAI,CAAC,GAAGuB,iBAAiB,CAACvB,CAAC,GAAG,CAAC,CAAC;MAC/D,IAAMO,OAAO,GAAG,CAAC,CAAC,EAAEoB,cAAc,EAAE,CAAC,CAAC;MACtC,IAAMC,KAAK,GAAG,CAAC,CAAC,EAAE5D,MAAM,CAACgC,CAAC,CAAC,EAAE0B,aAAa,CAAC;MAC3C/D,OAAO,CAACqC,CAAC,CAAC,GAAGhD,OAAO,CAChBE,KAAK,CAACE,MAAM,EAAEmD,OAAO,EAAEqB,KAAK,CAAC,EAAEtC,kBAA8B,CAAC;;IAEpElC,MAAM,CAAC8B,OAAO,EAAE;IAChB,OAAOvB,OAAO;EAChB,CAAC,CAAC;EAEF,IAAMwD,IAAI,GAAG,IAAIzD,UAAU,CAAC,EAAE,EAAEE,YAAY,EAAER,MAAM,CAACgB,KAAK,EAAEJ,MAAM,CAACA,MAAM,CAAC;EAE1E,KAAK,IAAIgC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGrC,OAAO,CAACK,MAAM,EAAEgC,CAAC,EAAE,EAAE;IACvCmB,IAAI,CAACd,OAAO,CAACL,CAAC,EAAErC,OAAO,CAACqC,CAAC,CAAC,CAAC;;EAE7B,OAAOmB,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}