{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Einsum } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Tensor contraction over specified indices and outer product.\r\n *\r\n * `einsum` allows defining Tensors by defining their element-wise computation.\r\n * This computation is based on\r\n * [Einstein summation](https://en.wikipedia.org/wiki/Einstein_notation).\r\n *\r\n * Some special cases include:\r\n *\r\n * Matrix multiplication:\r\n * ```js\r\n * const x = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);\r\n * const y = tf.tensor2d([[0, 1], [2, 3], [4, 5]]);\r\n * x.print();\r\n * y.print();\r\n * tf.einsum('ij,jk->ik', x, y).print();\r\n * ```\r\n *\r\n * Dot product:\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3]);\r\n * const y = tf.tensor1d([0, 1, 2]);\r\n * x.print();\r\n * y.print();\r\n * tf.einsum('i,i->', x, y).print();\r\n * ```\r\n *\r\n * Batch dot product:\r\n * ```js\r\n * const x = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);\r\n * const y = tf.tensor2d([[0, 1, 2], [3, 4, 5]]);\r\n * x.print();\r\n * y.print();\r\n * tf.einsum('bi,bi->b', x, y).print();\r\n * ```\r\n *\r\n * Outer prouduct:\r\n * ```js\r\n * const x = tf.tensor1d([1, 3, 5]);\r\n * const y = tf.tensor1d([2, 4, 6]);\r\n * x.print();\r\n * y.print();\r\n * tf.einsum('i,j->ij', x, y).print();\r\n * ```\r\n *\r\n * Matrix transpose:\r\n * ```js\r\n * const x = tf.tensor2d([[1, 2], [3, 4]]);\r\n * x.print();\r\n * tf.einsum('ij->ji', x).print();\r\n * ```\r\n *\r\n * Batch matrix transpose:\r\n * ```js\r\n * const x = tf.tensor3d([[[1, 2], [3, 4]], [[-1, -2], [-3, -4]]]);\r\n * x.print();\r\n * tf.einsum('bij->bji', x).print();\r\n * ```\r\n *\r\n * Limitations:\r\n *\r\n * This implementation of einsum has the following limitations:\r\n *\r\n * - Does not support >2 input tensors.\r\n * - Does not support duplicate axes for any given input tensor. E.g., equation\r\n *   'ii->' is not supported.\r\n * - The `...` notation is not supported.\r\n *\r\n * @param equation a string describing the contraction, in the same format as\r\n * [numpy.einsum](https://numpy.org/doc/stable/reference/generated/numpy.einsum.html).\r\n * @param tensors the input(s) to contract (each one a Tensor), whose shapes\r\n *     should be consistent with equation.\r\n * @returns The output tensor.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Matrices'}\r\n */\nexport function einsum_(equation) {\n  for (var _len = arguments.length, tensors = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    tensors[_key - 1] = arguments[_key];\n  }\n  var $tensors = tensors.map(function (t, i) {\n    return convertToTensor(t, \"tensors\".concat(i), 'einsum');\n  });\n  var attrs = {\n    equation: equation\n  };\n  return ENGINE.runKernel(Einsum, $tensors, attrs);\n}\nexport var einsum = /* @__PURE__ */op({\n  einsum_: einsum_\n});","map":{"version":3,"names":["ENGINE","Einsum","convertToTensor","op","einsum_","equation","_len","arguments","length","tensors","Array","_key","$tensors","map","t","i","concat","attrs","runKernel","einsum"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\einsum.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Einsum, EinsumAttrs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\n\nimport {op} from './operation';\n\n/**\n * Tensor contraction over specified indices and outer product.\n *\n * `einsum` allows defining Tensors by defining their element-wise computation.\n * This computation is based on\n * [Einstein summation](https://en.wikipedia.org/wiki/Einstein_notation).\n *\n * Some special cases include:\n *\n * Matrix multiplication:\n * ```js\n * const x = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);\n * const y = tf.tensor2d([[0, 1], [2, 3], [4, 5]]);\n * x.print();\n * y.print();\n * tf.einsum('ij,jk->ik', x, y).print();\n * ```\n *\n * Dot product:\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n * const y = tf.tensor1d([0, 1, 2]);\n * x.print();\n * y.print();\n * tf.einsum('i,i->', x, y).print();\n * ```\n *\n * Batch dot product:\n * ```js\n * const x = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);\n * const y = tf.tensor2d([[0, 1, 2], [3, 4, 5]]);\n * x.print();\n * y.print();\n * tf.einsum('bi,bi->b', x, y).print();\n * ```\n *\n * Outer prouduct:\n * ```js\n * const x = tf.tensor1d([1, 3, 5]);\n * const y = tf.tensor1d([2, 4, 6]);\n * x.print();\n * y.print();\n * tf.einsum('i,j->ij', x, y).print();\n * ```\n *\n * Matrix transpose:\n * ```js\n * const x = tf.tensor2d([[1, 2], [3, 4]]);\n * x.print();\n * tf.einsum('ij->ji', x).print();\n * ```\n *\n * Batch matrix transpose:\n * ```js\n * const x = tf.tensor3d([[[1, 2], [3, 4]], [[-1, -2], [-3, -4]]]);\n * x.print();\n * tf.einsum('bij->bji', x).print();\n * ```\n *\n * Limitations:\n *\n * This implementation of einsum has the following limitations:\n *\n * - Does not support >2 input tensors.\n * - Does not support duplicate axes for any given input tensor. E.g., equation\n *   'ii->' is not supported.\n * - The `...` notation is not supported.\n *\n * @param equation a string describing the contraction, in the same format as\n * [numpy.einsum](https://numpy.org/doc/stable/reference/generated/numpy.einsum.html).\n * @param tensors the input(s) to contract (each one a Tensor), whose shapes\n *     should be consistent with equation.\n * @returns The output tensor.\n *\n * @doc {heading: 'Tensors', subheading: 'Matrices'}\n */\nexport function einsum_(equation: string, ...tensors: Tensor[]): Tensor {\n  const $tensors =\n      tensors.map((t, i) => convertToTensor(t, `tensors${i}`, 'einsum'));\n  const attrs: EinsumAttrs = {equation};\n  return ENGINE.runKernel(\n      Einsum, $tensors as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const einsum = /* @__PURE__ */ op({einsum_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,MAAM,QAAoB,iBAAiB;AAInD,SAAQC,eAAe,QAAO,oBAAoB;AAElD,SAAQC,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA,OAAM,SAAUC,OAAOA,CAACC,QAAgB,EAAsB;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAjBC,OAAiB,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAjBF,OAAiB,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;EAAA;EAC5D,IAAMC,QAAQ,GACVH,OAAO,CAACI,GAAG,CAAC,UAACC,CAAC,EAAEC,CAAC;IAAA,OAAKb,eAAe,CAACY,CAAC,YAAAE,MAAA,CAAYD,CAAC,GAAI,QAAQ,CAAC;EAAA,EAAC;EACtE,IAAME,KAAK,GAAgB;IAACZ,QAAQ,EAARA;EAAQ,CAAC;EACrC,OAAOL,MAAM,CAACkB,SAAS,CACnBjB,MAAM,EAAEW,QAAqC,EAC7CK,KAAgC,CAAC;AACvC;AAEA,OAAO,IAAME,MAAM,GAAG,eAAgBhB,EAAE,CAAC;EAACC,OAAO,EAAPA;AAAO,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}