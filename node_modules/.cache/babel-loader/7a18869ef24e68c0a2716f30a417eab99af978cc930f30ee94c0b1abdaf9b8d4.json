{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { keep, scalar, stack, tidy, unstack, util } from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n/**\r\n * Hashtable contains a set of tensors, which can be accessed by key.\r\n */\nexport var HashTable = /*#__PURE__*/function () {\n  /**\r\n   * Constructor of HashTable. Creates a hash table.\r\n   *\r\n   * @param keyDType `dtype` of the table keys.\r\n   * @param valueDType `dtype` of the table values.\r\n   */\n  function HashTable(keyDType, valueDType) {\n    _classCallCheck(this, HashTable);\n    this.keyDType = keyDType;\n    this.valueDType = valueDType;\n    this.handle = scalar(0);\n    // tslint:disable-next-line: no-any\n    this.tensorMap = new Map();\n    keep(this.handle);\n  }\n  /**\r\n   * Dispose the tensors and handle and clear the hashtable.\r\n   */\n  _createClass(HashTable, [{\n    key: \"id\",\n    get: function get() {\n      return this.handle.id;\n    }\n  }, {\n    key: \"clearAndClose\",\n    value: function clearAndClose() {\n      this.tensorMap.forEach(function (value) {\n        return value.dispose();\n      });\n      this.tensorMap.clear();\n      this.handle.dispose();\n    }\n    /**\r\n     * The number of items in the hash table.\r\n     */\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.tensorMap.size;\n    }\n    /**\r\n     * The number of items in the hash table as a rank-0 tensor.\r\n     */\n  }, {\n    key: \"tensorSize\",\n    value: function tensorSize() {\n      return tfOps.scalar(this.size(), 'int32');\n    }\n    /**\r\n     * Replaces the contents of the table with the specified keys and values.\r\n     * @param keys Keys to store in the hashtable.\r\n     * @param values Values to store in the hashtable.\r\n     */\n  }, {\n    key: \"import\",\n    value: function () {\n      var _import2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(keys, values) {\n        var _this = this;\n        var $keys;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.checkKeyAndValueTensor(keys, values);\n              // We only store the primitive values of the keys, this allows lookup\n              // to be O(1).\n              _context.next = 3;\n              return keys.data();\n            case 3:\n              $keys = _context.sent;\n              // Clear the hashTable before inserting new values.\n              this.tensorMap.forEach(function (value) {\n                return value.dispose();\n              });\n              this.tensorMap.clear();\n              return _context.abrupt(\"return\", tidy(function () {\n                var $values = unstack(values);\n                var keysLength = $keys.length;\n                var valuesLength = $values.length;\n                util.assert(keysLength === valuesLength, function () {\n                  return \"The number of elements doesn't match, keys has \" + \"\".concat(keysLength, \" elements, the values has \").concat(valuesLength, \" \") + \"elements.\";\n                });\n                for (var i = 0; i < keysLength; i++) {\n                  var key = $keys[i];\n                  var value = $values[i];\n                  keep(value);\n                  _this.tensorMap.set(key, value);\n                }\n                return _this.handle;\n              }));\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _import(_x, _x2) {\n        return _import2.apply(this, arguments);\n      }\n      return _import;\n    }()\n    /**\r\n     * Looks up keys in a hash table, outputs the corresponding values.\r\n     *\r\n     * Performs batch lookups, for every element in the key tensor, `find`\r\n     * stacks the corresponding value into the return tensor.\r\n     *\r\n     * If an element is not present in the table, the given `defaultValue` is\r\n     * used.\r\n     *\r\n     * @param keys Keys to look up. Must have the same type as the keys of the\r\n     *     table.\r\n     * @param defaultValue The scalar `defaultValue` is the value output for keys\r\n     *     not present in the table. It must also be of the same type as the\r\n     *     table values.\r\n     */\n  }, {\n    key: \"find\",\n    value: function () {\n      var _find = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(keys, defaultValue) {\n        var _this2 = this;\n        var $keys;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              this.checkKeyAndValueTensor(keys, defaultValue);\n              _context2.next = 3;\n              return keys.data();\n            case 3:\n              $keys = _context2.sent;\n              return _context2.abrupt(\"return\", tidy(function () {\n                var result = [];\n                for (var i = 0; i < $keys.length; i++) {\n                  var key = $keys[i];\n                  var value = _this2.findWithDefault(key, defaultValue);\n                  result.push(value);\n                }\n                return stack(result);\n              }));\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function find(_x3, _x4) {\n        return _find.apply(this, arguments);\n      }\n      return find;\n    }() // tslint:disable-next-line: no-any\n  }, {\n    key: \"findWithDefault\",\n    value: function findWithDefault(key, defaultValue) {\n      var result = this.tensorMap.get(key);\n      return result != null ? result : defaultValue;\n    }\n  }, {\n    key: \"checkKeyAndValueTensor\",\n    value: function checkKeyAndValueTensor(key, value) {\n      if (key.dtype !== this.keyDType) {\n        throw new Error(\"Expect key dtype \".concat(this.keyDType, \", but got \") + \"\".concat(key.dtype));\n      }\n      if (value.dtype !== this.valueDType) {\n        throw new Error(\"Expect value dtype \".concat(this.valueDType, \", but got \") + \"\".concat(value.dtype));\n      }\n    }\n  }]);\n  return HashTable;\n}();","map":{"version":3,"names":["keep","scalar","stack","tidy","unstack","util","tfOps","HashTable","keyDType","valueDType","_classCallCheck","handle","tensorMap","Map","_createClass","key","get","id","value","clearAndClose","forEach","dispose","clear","size","tensorSize","_import2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","keys","values","_this","$keys","wrap","_callee$","_context","prev","next","checkKeyAndValueTensor","data","sent","abrupt","$values","keysLength","length","valuesLength","assert","concat","i","set","stop","_import","_x","_x2","apply","arguments","_find","_callee2","defaultValue","_this2","_callee2$","_context2","result","findWithDefault","push","find","_x3","_x4","dtype","Error"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-converter\\src\\executor\\hash_table.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {DataType, keep, scalar, stack, Tensor, tidy, unstack, util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\nexport class HashTable {\n  readonly handle: Tensor;\n\n  // tslint:disable-next-line: no-any\n  private tensorMap: Map<any, Tensor>;\n\n  get id() {\n    return this.handle.id;\n  }\n\n  /**\n   * Constructor of HashTable. Creates a hash table.\n   *\n   * @param keyDType `dtype` of the table keys.\n   * @param valueDType `dtype` of the table values.\n   */\n  constructor(readonly keyDType: DataType, readonly valueDType: DataType) {\n    this.handle = scalar(0);\n    // tslint:disable-next-line: no-any\n    this.tensorMap = new Map<any, Tensor>();\n\n    keep(this.handle);\n  }\n\n  /**\n   * Dispose the tensors and handle and clear the hashtable.\n   */\n  clearAndClose() {\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    this.handle.dispose();\n  }\n\n  /**\n   * The number of items in the hash table.\n   */\n  size(): number {\n    return this.tensorMap.size;\n  }\n\n  /**\n   * The number of items in the hash table as a rank-0 tensor.\n   */\n  tensorSize(): Tensor {\n    return tfOps.scalar(this.size(), 'int32');\n  }\n\n  /**\n   * Replaces the contents of the table with the specified keys and values.\n   * @param keys Keys to store in the hashtable.\n   * @param values Values to store in the hashtable.\n   */\n  async import(keys: Tensor, values: Tensor): Promise<Tensor> {\n    this.checkKeyAndValueTensor(keys, values);\n\n    // We only store the primitive values of the keys, this allows lookup\n    // to be O(1).\n    const $keys = await keys.data();\n\n    // Clear the hashTable before inserting new values.\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n\n    return tidy(() => {\n      const $values = unstack(values);\n\n      const keysLength = $keys.length;\n      const valuesLength = $values.length;\n\n      util.assert(\n          keysLength === valuesLength,\n          () => `The number of elements doesn't match, keys has ` +\n              `${keysLength} elements, the values has ${valuesLength} ` +\n              `elements.`);\n\n      for (let i = 0; i < keysLength; i++) {\n        const key = $keys[i];\n        const value = $values[i];\n\n        keep(value);\n        this.tensorMap.set(key, value);\n      }\n\n      return this.handle;\n    });\n  }\n\n  /**\n   * Looks up keys in a hash table, outputs the corresponding values.\n   *\n   * Performs batch lookups, for every element in the key tensor, `find`\n   * stacks the corresponding value into the return tensor.\n   *\n   * If an element is not present in the table, the given `defaultValue` is\n   * used.\n   *\n   * @param keys Keys to look up. Must have the same type as the keys of the\n   *     table.\n   * @param defaultValue The scalar `defaultValue` is the value output for keys\n   *     not present in the table. It must also be of the same type as the\n   *     table values.\n   */\n  async find(keys: Tensor, defaultValue: Tensor): Promise<Tensor> {\n    this.checkKeyAndValueTensor(keys, defaultValue);\n\n    const $keys = await keys.data();\n\n    return tidy(() => {\n      const result: Tensor[] = [];\n\n      for (let i = 0; i < $keys.length; i++) {\n        const key = $keys[i];\n\n        const value = this.findWithDefault(key, defaultValue);\n        result.push(value);\n      }\n\n      return stack(result);\n    });\n  }\n\n  // tslint:disable-next-line: no-any\n  private findWithDefault(key: any, defaultValue: Tensor): Tensor {\n    const result = this.tensorMap.get(key);\n\n    return result != null ? result : defaultValue;\n  }\n\n  private checkKeyAndValueTensor(key: Tensor, value: Tensor) {\n    if (key.dtype !== this.keyDType) {\n      throw new Error(\n          `Expect key dtype ${this.keyDType}, but got ` +\n          `${key.dtype}`);\n    }\n\n    if (value.dtype !== this.valueDType) {\n      throw new Error(\n          `Expect value dtype ${this.valueDType}, but got ` +\n          `${value.dtype}`);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}