{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext, setWebGLContext } from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport var GPGPUContext = /*#__PURE__*/function () {\n  function GPGPUContext(gl) {\n    _classCallCheck(this, GPGPUContext);\n    this.outputTexture = null;\n    this.program = null;\n    this.disposed = false;\n    this.itemsToPoll = [];\n    var glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    gl = this.gl;\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      var gl2 = gl;\n      this.createVertexArray = function () {\n        return webgl_util.callAndCheck(gl2, function () {\n          return gl2.createVertexArray();\n        });\n      };\n      this.bindVertexArray = function (vao) {\n        return webgl_util.callAndCheck(gl2, function () {\n          return gl2.bindVertexArray(vao);\n        });\n      };\n      this.deleteVertexArray = function (vao) {\n        return webgl_util.callAndCheck(gl2, function () {\n          return gl2.deleteVertexArray(vao);\n        });\n      };\n      this.getVertexArray = function () {\n        return webgl_util.callAndCheck(gl2, function () {\n          return gl2.getParameter(gl2.VERTEX_ARRAY_BINDING);\n        });\n      };\n    } else if (gl != null) {\n      var ext = gl.getExtension('OES_vertex_array_object');\n      if (ext == null) {\n        throw new Error('All WebGL1 implementations are expected to offer' + ' OES_vertex_array_object.');\n      }\n      this.createVertexArray = function () {\n        return webgl_util.callAndCheck(gl, function () {\n          return ext.createVertexArrayOES();\n        });\n      };\n      this.bindVertexArray = function (vao) {\n        return webgl_util.callAndCheck(gl, function () {\n          return ext.bindVertexArrayOES(vao);\n        });\n      };\n      this.deleteVertexArray = function (vao) {\n        return webgl_util.callAndCheck(gl, function () {\n          return ext.deleteVertexArrayOES(vao);\n        });\n      };\n      this.getVertexArray = function () {\n        return webgl_util.callAndCheck(gl, function () {\n          return gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES);\n        });\n      };\n    }\n    // WebGL 2.0 enables texture floats without an extension.\n    var COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    var COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    this.parallelCompilationExtension = this.gl.getExtension('KHR_parallel_shader_compile');\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      var TEXTURE_FLOAT = 'OES_texture_float';\n      var TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n      this.textureFloatExtension = webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension = webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error('GL context does not support half float textures, yet the ' + 'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension = webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error('GL context does not support color renderable half floats, yet ' + 'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension = this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n    this.textureConfig = tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n  _createClass(GPGPUContext, [{\n    key: \"debug\",\n    get: function get() {\n      return env().getBool('DEBUG');\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var _this = this;\n      if (this.disposed) {\n        return;\n      }\n      if (this.program != null) {\n        console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' + ' This is probably a resource leak, delete the program with ' + 'GPGPUContext.deleteProgram before disposing.');\n      }\n      if (this.outputTexture != null) {\n        console.warn('Disposing a GPGPUContext that still has a bound output matrix ' + 'texture.  This is probably a resource leak, delete the output ' + 'matrix texture with GPGPUContext.deleteMatrixTexture before ' + 'disposing.');\n      }\n      var gl = this.gl;\n      webgl_util.callAndCheck(gl, function () {\n        return gl.finish();\n      });\n      webgl_util.callAndCheck(gl, function () {\n        return gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      });\n      webgl_util.callAndCheck(gl, function () {\n        return gl.deleteFramebuffer(_this.framebuffer);\n      });\n      webgl_util.callAndCheck(gl, function () {\n        return gl.bindBuffer(gl.ARRAY_BUFFER, null);\n      });\n      webgl_util.callAndCheck(gl, function () {\n        return gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n      });\n      webgl_util.callAndCheck(gl, function () {\n        return gl.deleteBuffer(_this.indexBuffer);\n      });\n      this.disposed = true;\n    }\n  }, {\n    key: \"createFloat32MatrixTexture\",\n    value: function createFloat32MatrixTexture(rows, columns) {\n      this.throwIfDisposed();\n      return gpgpu_util.createFloat32MatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n  }, {\n    key: \"createFloat16MatrixTexture\",\n    value: function createFloat16MatrixTexture(rows, columns) {\n      this.throwIfDisposed();\n      return gpgpu_util.createFloat16MatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n  }, {\n    key: \"createUnsignedBytesMatrixTexture\",\n    value: function createUnsignedBytesMatrixTexture(rows, columns) {\n      this.throwIfDisposed();\n      return gpgpu_util.createUnsignedBytesMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n  }, {\n    key: \"uploadPixelDataToTexture\",\n    value: function uploadPixelDataToTexture(texture, pixels) {\n      this.throwIfDisposed();\n      gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n    }\n  }, {\n    key: \"uploadDenseMatrixToTexture\",\n    value: function uploadDenseMatrixToTexture(texture, width, height, data) {\n      this.throwIfDisposed();\n      gpgpu_util.uploadDenseMatrixToTexture(this.gl, texture, width, height, data, this.textureConfig);\n    }\n  }, {\n    key: \"createFloat16PackedMatrixTexture\",\n    value: function createFloat16PackedMatrixTexture(rows, columns) {\n      this.throwIfDisposed();\n      return gpgpu_util.createFloat16PackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n  }, {\n    key: \"createPackedMatrixTexture\",\n    value: function createPackedMatrixTexture(rows, columns) {\n      this.throwIfDisposed();\n      return gpgpu_util.createPackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n  }, {\n    key: \"deleteMatrixTexture\",\n    value: function deleteMatrixTexture(texture) {\n      var _this2 = this;\n      this.throwIfDisposed();\n      if (this.outputTexture === texture) {\n        webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n        this.outputTexture = null;\n      }\n      webgl_util.callAndCheck(this.gl, function () {\n        return _this2.gl.deleteTexture(texture);\n      });\n    }\n  }, {\n    key: \"downloadByteEncodedFloatMatrixFromOutputTexture\",\n    value: function downloadByteEncodedFloatMatrixFromOutputTexture(texture, rows, columns) {\n      var _this3 = this;\n      return this.downloadMatrixDriver(texture, function () {\n        return gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(_this3.gl, rows, columns, _this3.textureConfig);\n      });\n    }\n  }, {\n    key: \"downloadPackedMatrixFromBuffer\",\n    value: function downloadPackedMatrixFromBuffer(buffer, batch, rows, columns, physicalRows, physicalCols) {\n      return gpgpu_util.downloadPackedMatrixFromBuffer(this.gl, buffer, batch, rows, columns, physicalRows, physicalCols, this.textureConfig);\n    }\n  }, {\n    key: \"downloadFloat32MatrixFromBuffer\",\n    value: function downloadFloat32MatrixFromBuffer(buffer, size) {\n      return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n    }\n  }, {\n    key: \"createBufferFromTexture\",\n    value: function createBufferFromTexture(texture, rows, columns) {\n      this.bindTextureToFrameBuffer(texture);\n      var result = gpgpu_util.createBufferFromOutputTexture(this.gl, rows, columns, this.textureConfig);\n      this.unbindTextureToFrameBuffer();\n      return result;\n    }\n  }, {\n    key: \"createAndWaitForFence\",\n    value: function createAndWaitForFence() {\n      var fenceContext = this.createFence(this.gl);\n      return this.pollFence(fenceContext);\n    }\n  }, {\n    key: \"createFence\",\n    value: function createFence(gl) {\n      var _this4 = this;\n      var query;\n      var isFencePassed;\n      if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n        var gl2 = gl;\n        var sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n        gl.flush();\n        isFencePassed = function isFencePassed() {\n          var status = gl2.clientWaitSync(sync, 0, 0);\n          return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n        };\n        query = sync;\n      } else if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n        query = this.beginQuery();\n        this.endQuery();\n        isFencePassed = function isFencePassed() {\n          return _this4.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n        };\n      } else {\n        // If we have no way to fence, return true immediately. This will fire in\n        // WebGL 1.0 when there is no disjoint query timer. In this case, because\n        // the fence passes immediately, we'll immediately ask for a download of\n        // the texture, which will cause the UI thread to hang.\n        isFencePassed = function isFencePassed() {\n          return true;\n        };\n      }\n      return {\n        query: query,\n        isFencePassed: isFencePassed\n      };\n    }\n  }, {\n    key: \"downloadMatrixFromPackedTexture\",\n    value: function downloadMatrixFromPackedTexture(texture, physicalRows, physicalCols) {\n      var _this5 = this;\n      return this.downloadMatrixDriver(texture, function () {\n        return gpgpu_util.downloadMatrixFromPackedOutputTexture(_this5.gl, physicalRows, physicalCols);\n      });\n    }\n  }, {\n    key: \"createProgram\",\n    value: function createProgram(fragmentShader) {\n      var _this6 = this;\n      this.throwIfDisposed();\n      var gl = this.gl;\n      if (this.vertexShader == null) {\n        this.vertexShader = gpgpu_util.createVertexShader(gl);\n      }\n      var program = webgl_util.createProgram(gl);\n      webgl_util.callAndCheck(gl, function () {\n        return gl.attachShader(program, _this6.vertexShader);\n      });\n      webgl_util.callAndCheck(gl, function () {\n        return gl.attachShader(program, fragmentShader);\n      });\n      webgl_util.linkProgram(gl, program);\n      var program2 = Object.assign(program, {\n        vao: this.createVertexArray()\n      });\n      if (this.debug) {\n        webgl_util.validateProgram(gl, program2);\n      }\n      return program2;\n    }\n  }, {\n    key: \"buildVao\",\n    value: function buildVao(program) {\n      var _this7 = this;\n      this.setProgram(program);\n      this.bindVertexArray(program.vao);\n      var gl = this.gl;\n      // Bind index buffer, and vertex buffers based on program attrib\n      // locations.\n      webgl_util.callAndCheck(gl, function () {\n        return gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _this7.indexBuffer);\n      });\n      gpgpu_util.bindVertexProgramAttributeStreams(gl, program, this.vertexBuffer);\n    }\n  }, {\n    key: \"deleteProgram\",\n    value: function deleteProgram(program) {\n      var _this8 = this;\n      this.throwIfDisposed();\n      if (program === this.program) {\n        this.program = null;\n      }\n      if (program != null) {\n        webgl_util.callAndCheck(this.gl, function () {\n          return _this8.gl.deleteProgram(program);\n        });\n        this.deleteVertexArray(program.vao);\n      }\n    }\n  }, {\n    key: \"setProgram\",\n    value: function setProgram(program) {\n      var _this9 = this;\n      this.throwIfDisposed();\n      this.program = program;\n      if (this.program != null) {\n        if (this.debug) {\n          webgl_util.validateProgram(this.gl, this.program);\n        }\n      }\n      webgl_util.callAndCheck(this.gl, function () {\n        return _this9.gl.useProgram(program);\n      });\n    }\n  }, {\n    key: \"getUniformLocation\",\n    value: function getUniformLocation(program, uniformName) {\n      var shouldThrow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      this.throwIfDisposed();\n      if (shouldThrow) {\n        return webgl_util.getProgramUniformLocationOrThrow(this.gl, program, uniformName);\n      } else {\n        return webgl_util.getProgramUniformLocation(this.gl, program, uniformName);\n      }\n    }\n  }, {\n    key: \"getAttributeLocation\",\n    value: function getAttributeLocation(program, attribute) {\n      var _this10 = this;\n      this.throwIfDisposed();\n      return webgl_util.callAndCheck(this.gl, function () {\n        return _this10.gl.getAttribLocation(program, attribute);\n      });\n    }\n  }, {\n    key: \"getUniformLocationNoThrow\",\n    value: function getUniformLocationNoThrow(program, uniformName) {\n      this.throwIfDisposed();\n      return this.gl.getUniformLocation(program, uniformName);\n    }\n  }, {\n    key: \"setInputMatrixTexture\",\n    value: function setInputMatrixTexture(inputMatrixTexture, uniformLocation, textureUnit) {\n      this.throwIfDisposed();\n      this.throwIfNoProgram();\n      webgl_util.bindTextureToProgramUniformSampler(this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n    }\n  }, {\n    key: \"setOutputMatrixTexture\",\n    value: function setOutputMatrixTexture(outputMatrixTexture, rows, columns) {\n      this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n    }\n  }, {\n    key: \"setOutputPackedMatrixTexture\",\n    value: function setOutputPackedMatrixTexture(outputPackedMatrixTexture, rows, columns) {\n      this.throwIfDisposed();\n      var _tex_util$getPackedMa = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns),\n        _tex_util$getPackedMa2 = _slicedToArray(_tex_util$getPackedMa, 2),\n        width = _tex_util$getPackedMa2[0],\n        height = _tex_util$getPackedMa2[1];\n      this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n    }\n  }, {\n    key: \"setOutputMatrixWriteRegion\",\n    value: function setOutputMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n      this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);\n    }\n  }, {\n    key: \"setOutputPackedMatrixWriteRegion\",\n    value: function setOutputPackedMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n      throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n    }\n  }, {\n    key: \"debugValidate\",\n    value: function debugValidate() {\n      if (this.program != null) {\n        webgl_util.validateProgram(this.gl, this.program);\n      }\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }, {\n    key: \"executeProgram\",\n    value: function executeProgram() {\n      this.throwIfDisposed();\n      this.throwIfNoProgram();\n      var gl = this.gl;\n      if (this.debug) {\n        var boundVao = this.getVertexArray();\n        console.assert(boundVao === this.program.vao, 'VAO changed between setProgram and executeProgram!');\n        this.debugValidate();\n      }\n      webgl_util.callAndCheck(gl, function () {\n        return gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n      });\n    }\n  }, {\n    key: \"blockUntilAllProgramsCompleted\",\n    value: function blockUntilAllProgramsCompleted() {\n      var _this11 = this;\n      this.throwIfDisposed();\n      webgl_util.callAndCheck(this.gl, function () {\n        return _this11.gl.finish();\n      });\n    }\n  }, {\n    key: \"getQueryTimerExtension\",\n    value: function getQueryTimerExtension() {\n      if (this.disjointQueryTimerExtension == null) {\n        this.disjointQueryTimerExtension = webgl_util.getExtensionOrThrow(this.gl, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ? 'EXT_disjoint_timer_query_webgl2' : 'EXT_disjoint_timer_query');\n      }\n      return this.disjointQueryTimerExtension;\n    }\n  }, {\n    key: \"getQueryTimerExtensionWebGL2\",\n    value: function getQueryTimerExtensionWebGL2() {\n      return this.getQueryTimerExtension();\n    }\n  }, {\n    key: \"getQueryTimerExtensionWebGL1\",\n    value: function getQueryTimerExtensionWebGL1() {\n      return this.getQueryTimerExtension();\n    }\n  }, {\n    key: \"beginQuery\",\n    value: function beginQuery() {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n        var gl2 = this.gl;\n        var _ext = this.getQueryTimerExtensionWebGL2();\n        var _query = gl2.createQuery();\n        gl2.beginQuery(_ext.TIME_ELAPSED_EXT, _query);\n        return _query;\n      }\n      var ext = this.getQueryTimerExtensionWebGL1();\n      var query = ext.createQueryEXT();\n      ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n  }, {\n    key: \"endQuery\",\n    value: function endQuery() {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n        var gl2 = this.gl;\n        var _ext2 = this.getQueryTimerExtensionWebGL2();\n        gl2.endQuery(_ext2.TIME_ELAPSED_EXT);\n        return;\n      }\n      var ext = this.getQueryTimerExtensionWebGL1();\n      ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n    }\n  }, {\n    key: \"waitForQueryAndGetTime\",\n    value: function () {\n      var _waitForQueryAndGetTime = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(query) {\n        var _this12 = this;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return util.repeatedTry(function () {\n                return _this12.disposed ||\n                // while testing contexts are created / disposed\n                // in rapid succession, so without this check we\n                // may poll for the query timer indefinitely\n                _this12.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n              });\n            case 2:\n              return _context.abrupt(\"return\", this.getQueryTime(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function waitForQueryAndGetTime(_x) {\n        return _waitForQueryAndGetTime.apply(this, arguments);\n      }\n      return waitForQueryAndGetTime;\n    }()\n  }, {\n    key: \"getQueryTime\",\n    value: function getQueryTime(query, queryTimerVersion) {\n      if (queryTimerVersion === 0) {\n        return null;\n      }\n      if (queryTimerVersion === 2) {\n        var gl2 = this.gl;\n        var timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n        // Return milliseconds.\n        return timeElapsedNanos / 1000000;\n      } else {\n        var ext = this.getQueryTimerExtensionWebGL1();\n        var _timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n        // Return milliseconds.\n        return _timeElapsedNanos / 1000000;\n      }\n    }\n  }, {\n    key: \"isQueryAvailable\",\n    value: function isQueryAvailable(query, queryTimerVersion) {\n      if (queryTimerVersion === 0) {\n        return true;\n      }\n      if (queryTimerVersion === 2) {\n        var gl2 = this.gl;\n        var ext = this.getQueryTimerExtensionWebGL2();\n        var available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n        if (this.disjoint == null) {\n          this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n        }\n        return available && !this.disjoint;\n      } else {\n        var _ext3 = this.getQueryTimerExtensionWebGL1();\n        var _available = _ext3.getQueryObjectEXT(query, _ext3.QUERY_RESULT_AVAILABLE_EXT);\n        if (this.disjoint == null) {\n          this.disjoint = this.gl.getParameter(_ext3.GPU_DISJOINT_EXT);\n        }\n        return _available && !this.disjoint;\n      }\n    }\n  }, {\n    key: \"pollFence\",\n    value: function pollFence(fenceContext) {\n      var _this13 = this;\n      return new Promise(function (resolve) {\n        _this13.addItemToPoll(function () {\n          return fenceContext.isFencePassed();\n        }, function () {\n          return resolve();\n        });\n      });\n    }\n  }, {\n    key: \"pollItems\",\n    value: function pollItems() {\n      // Find the last query that has finished.\n      var index = linearSearchLastTrue(this.itemsToPoll.map(function (x) {\n        return x.isDoneFn;\n      }));\n      for (var i = 0; i <= index; ++i) {\n        var resolveFn = this.itemsToPoll[i].resolveFn;\n        resolveFn();\n      }\n      this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n    }\n  }, {\n    key: \"addItemToPoll\",\n    value: function addItemToPoll(isDoneFn, resolveFn) {\n      var _this14 = this;\n      this.itemsToPoll.push({\n        isDoneFn: isDoneFn,\n        resolveFn: resolveFn\n      });\n      if (this.itemsToPoll.length > 1) {\n        // We already have a running loop that polls.\n        return;\n      }\n      // Start a new loop that polls.\n      var scheduleFn = undefined;\n      if ('setTimeoutCustom' in env().platform) {\n        scheduleFn = env().platform.setTimeoutCustom.bind(env().platform);\n      }\n      util.repeatedTry(function () {\n        _this14.pollItems();\n        // End the loop if no more items to poll.\n        return _this14.itemsToPoll.length === 0;\n      }, function () {\n        return 0;\n      }, null, scheduleFn);\n    }\n  }, {\n    key: \"bindTextureToFrameBuffer\",\n    value: function bindTextureToFrameBuffer(texture) {\n      this.throwIfDisposed();\n      webgl_util.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    }\n  }, {\n    key: \"unbindTextureToFrameBuffer\",\n    value: function unbindTextureToFrameBuffer() {\n      if (this.outputTexture != null) {\n        webgl_util.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);\n        if (this.debug) {\n          webgl_util.validateFramebuffer(this.gl);\n        }\n      } else {\n        webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      }\n    }\n  }, {\n    key: \"downloadMatrixDriver\",\n    value: function downloadMatrixDriver(texture, downloadAndDecode) {\n      this.bindTextureToFrameBuffer(texture);\n      var result = downloadAndDecode();\n      this.unbindTextureToFrameBuffer();\n      return result;\n    }\n  }, {\n    key: \"setOutputMatrixTextureDriver\",\n    value: function setOutputMatrixTextureDriver(outputMatrixTextureMaybePacked, width, height) {\n      this.throwIfDisposed();\n      var gl = this.gl;\n      webgl_util.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(gl);\n      }\n      this.outputTexture = outputMatrixTextureMaybePacked;\n      webgl_util.callAndCheck(gl, function () {\n        return gl.viewport(0, 0, width, height);\n      });\n      webgl_util.callAndCheck(gl, function () {\n        return gl.scissor(0, 0, width, height);\n      });\n    }\n  }, {\n    key: \"setOutputMatrixWriteRegionDriver\",\n    value: function setOutputMatrixWriteRegionDriver(x, y, width, height) {\n      var _this15 = this;\n      this.throwIfDisposed();\n      webgl_util.callAndCheck(this.gl, function () {\n        return _this15.gl.scissor(x, y, width, height);\n      });\n    }\n  }, {\n    key: \"throwIfDisposed\",\n    value: function throwIfDisposed() {\n      if (this.disposed) {\n        throw new Error('Attempted to use disposed GPGPUContext.');\n      }\n    }\n  }, {\n    key: \"throwIfNoProgram\",\n    value: function throwIfNoProgram() {\n      if (this.program == null) {\n        throw new Error('No GPU program is currently set.');\n      }\n    }\n  }]);\n  return GPGPUContext;\n}();\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr) {\n  var i = 0;\n  for (; i < arr.length; ++i) {\n    var isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}","map":{"version":3,"names":["env","util","getWebGLContext","setWebGLContext","gpgpu_util","tex_util","webgl_util","GPGPUContext","gl","_classCallCheck","outputTexture","program","disposed","itemsToPoll","glVersion","getNumber","gl2","createVertexArray","callAndCheck","bindVertexArray","vao","deleteVertexArray","getVertexArray","getParameter","VERTEX_ARRAY_BINDING","ext","getExtension","Error","createVertexArrayOES","bindVertexArrayOES","deleteVertexArrayOES","VERTEX_ARRAY_BINDING_OES","COLOR_BUFFER_FLOAT","COLOR_BUFFER_HALF_FLOAT","parallelCompilationExtension","TEXTURE_FLOAT","TEXTURE_HALF_FLOAT","textureFloatExtension","getExtensionOrThrow","hasExtension","textureHalfFloatExtension","get","colorBufferFloatExtension","colorBufferHalfFloatExtension","vertexBuffer","createVertexBuffer","indexBuffer","createIndexBuffer","framebuffer","createFramebuffer","textureConfig","getTextureConfig","_createClass","key","getBool","value","dispose","_this","console","warn","finish","bindFramebuffer","FRAMEBUFFER","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","deleteBuffer","createFloat32MatrixTexture","rows","columns","throwIfDisposed","createFloat16MatrixTexture","createUnsignedBytesMatrixTexture","uploadPixelDataToTexture","texture","pixels","uploadDenseMatrixToTexture","width","height","data","createFloat16PackedMatrixTexture","createPackedMatrixTexture","deleteMatrixTexture","_this2","unbindColorTextureFromFramebuffer","deleteTexture","downloadByteEncodedFloatMatrixFromOutputTexture","_this3","downloadMatrixDriver","downloadPackedMatrixFromBuffer","buffer","batch","physicalRows","physicalCols","downloadFloat32MatrixFromBuffer","size","createBufferFromTexture","bindTextureToFrameBuffer","result","createBufferFromOutputTexture","unbindTextureToFrameBuffer","createAndWaitForFence","fenceContext","createFence","pollFence","_this4","query","isFencePassed","sync","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","downloadMatrixFromPackedTexture","_this5","downloadMatrixFromPackedOutputTexture","createProgram","fragmentShader","_this6","vertexShader","createVertexShader","attachShader","linkProgram","program2","Object","assign","debug","validateProgram","buildVao","_this7","setProgram","bindVertexProgramAttributeStreams","deleteProgram","_this8","_this9","useProgram","getUniformLocation","uniformName","shouldThrow","arguments","length","undefined","getProgramUniformLocationOrThrow","getProgramUniformLocation","getAttributeLocation","attribute","_this10","getAttribLocation","getUniformLocationNoThrow","setInputMatrixTexture","inputMatrixTexture","uniformLocation","textureUnit","throwIfNoProgram","bindTextureToProgramUniformSampler","setOutputMatrixTexture","outputMatrixTexture","setOutputMatrixTextureDriver","setOutputPackedMatrixTexture","outputPackedMatrixTexture","_tex_util$getPackedMa","getPackedMatrixTextureShapeWidthHeight","_tex_util$getPackedMa2","_slicedToArray","setOutputMatrixWriteRegion","startRow","numRows","startColumn","numColumns","setOutputMatrixWriteRegionDriver","setOutputPackedMatrixWriteRegion","debugValidate","validateFramebuffer","executeProgram","boundVao","assert","drawElements","TRIANGLES","UNSIGNED_SHORT","blockUntilAllProgramsCompleted","_this11","getQueryTimerExtension","disjointQueryTimerExtension","getQueryTimerExtensionWebGL2","getQueryTimerExtensionWebGL1","createQuery","TIME_ELAPSED_EXT","createQueryEXT","beginQueryEXT","endQueryEXT","_waitForQueryAndGetTime","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this12","wrap","_callee$","_context","prev","next","repeatedTry","abrupt","getQueryTime","stop","waitForQueryAndGetTime","_x","apply","queryTimerVersion","timeElapsedNanos","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","available","QUERY_RESULT_AVAILABLE","disjoint","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","_this13","Promise","resolve","addItemToPoll","pollItems","index","linearSearchLastTrue","map","x","isDoneFn","i","resolveFn","slice","_this14","push","scheduleFn","platform","setTimeoutCustom","bind","bindColorTextureToFramebuffer","downloadAndDecode","outputMatrixTextureMaybePacked","viewport","scissor","y","_this15","arr","isDone"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\gpgpu_context.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext, setWebGLContext} from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureConfig} from './tex_util';\nimport {WebGL1DisjointQueryTimerExtension, WebGL2DisjointQueryTimerExtension, WebGLParallelCompilationExtension} from './webgl_types';\nimport * as webgl_util from './webgl_util';\n\nexport interface FenceContext {\n  query: WebGLQuery|WebGLSync;\n  isFencePassed(): boolean;\n}\n\ntype WebGLVao = WebGLVertexArrayObject|WebGLVertexArrayObjectOES;\n\nexport interface GPGPUContextProgram extends WebGLProgram {\n  vao: WebGLVao;\n}\n\nexport class GPGPUContext {\n  gl: WebGLRenderingContext;\n  textureFloatExtension: {};\n  textureHalfFloatExtension: {};\n  colorBufferFloatExtension: {};\n  colorBufferHalfFloatExtension: {};\n  disjointQueryTimerExtension: WebGL2DisjointQueryTimerExtension|\n      WebGL1DisjointQueryTimerExtension;\n  parallelCompilationExtension: WebGLParallelCompilationExtension;\n  vertexBuffer: WebGLBuffer;\n  indexBuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  outputTexture: WebGLTexture|null = null;\n  program: GPGPUContextProgram|null = null;\n  private disposed = false;\n  private disjoint: boolean;\n  private vertexShader: WebGLShader;\n  textureConfig: TextureConfig;\n\n  createVertexArray: () => WebGLVao | null;\n  bindVertexArray: (vao: WebGLVao|null) => void;\n  deleteVertexArray: (vao: WebGLVao|null) => void;\n  getVertexArray: () => WebGLVao | null;\n\n  constructor(gl?: WebGLRenderingContext) {\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    gl = this.gl;\n\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      const gl2 = gl as WebGL2RenderingContext;\n      this.createVertexArray = () => {\n        return webgl_util.callAndCheck(gl2, () => gl2.createVertexArray());\n      };\n      this.bindVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(\n            gl2, () => gl2.bindVertexArray(vao as WebGLVertexArrayObject));\n      };\n      this.deleteVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(\n            gl2, () => gl2.deleteVertexArray(vao as WebGLVertexArrayObject));\n      };\n      this.getVertexArray = () => {\n        return webgl_util.callAndCheck(\n            gl2, () => gl2.getParameter(gl2.VERTEX_ARRAY_BINDING));\n      };\n    } else if (gl != null) {\n      const ext = gl.getExtension('OES_vertex_array_object');\n      if (ext == null) {\n        throw new Error(\n            'All WebGL1 implementations are expected to offer' +\n            ' OES_vertex_array_object.');\n      }\n      this.createVertexArray = () => {\n        return webgl_util.callAndCheck(gl, () => ext.createVertexArrayOES());\n      };\n      this.bindVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(\n            gl, () => ext.bindVertexArrayOES(vao as WebGLVertexArrayObjectOES));\n      };\n      this.deleteVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(\n            gl,\n            () => ext.deleteVertexArrayOES(vao as WebGLVertexArrayObjectOES));\n      };\n      this.getVertexArray = () => {\n        return webgl_util.callAndCheck(\n            gl, () => gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES));\n      };\n    }\n\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    this.parallelCompilationExtension =\n        this.gl.getExtension('KHR_parallel_shader_compile');\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n\n      this.textureFloatExtension =\n          webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support half float textures, yet the ' +\n            'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support color renderable half floats, yet ' +\n            'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n\n    this.textureConfig =\n        tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  private get debug(): boolean {\n    return env().getBool('DEBUG');\n  }\n\n  public dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n          ' This is probably a resource leak, delete the program with ' +\n          'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound output matrix ' +\n          'texture.  This is probably a resource leak, delete the output ' +\n          'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n          'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  public createFloat32MatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createFloat16MatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createUnsignedBytesMatrixTexture(rows: number, columns: number):\n      Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public uploadPixelDataToTexture(\n      texture: WebGLTexture,\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      ImageBitmap) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n\n  public uploadDenseMatrixToTexture(\n      texture: WebGLTexture, width: number, height: number, data: TypedArray) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(\n        this.gl, texture, width, height, data, this.textureConfig);\n  }\n\n  public createFloat16PackedMatrixTexture(rows: number, columns: number):\n      Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createPackedMatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public deleteMatrixTexture(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n\n  public downloadByteEncodedFloatMatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(\n            this.gl, rows, columns, this.textureConfig));\n  }\n\n  public downloadPackedMatrixFromBuffer(\n      buffer: WebGLBuffer, batch: number, rows: number, columns: number,\n      physicalRows: number, physicalCols: number): Float32Array {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(\n        this.gl, buffer, batch, rows, columns, physicalRows, physicalCols,\n        this.textureConfig);\n  }\n\n  public downloadFloat32MatrixFromBuffer(buffer: WebGLBuffer, size: number):\n      Float32Array {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  public createBufferFromTexture(\n      texture: WebGLTexture, rows: number, columns: number): WebGLBuffer {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(\n        this.gl as WebGL2RenderingContext, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  public createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let query: WebGLQuery|WebGLSync;\n    let isFencePassed: () => boolean;\n\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED ||\n            status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (\n        env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(\n          query,\n          env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {query, isFencePassed};\n  }\n\n  public downloadMatrixFromPackedTexture(\n      texture: WebGLTexture, physicalRows: number,\n      physicalCols: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadMatrixFromPackedOutputTexture(\n            this.gl, physicalRows, physicalCols));\n  }\n\n  public createProgram(fragmentShader: WebGLShader): GPGPUContextProgram {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    if (this.vertexShader == null) {\n      this.vertexShader = gpgpu_util.createVertexShader(gl);\n    }\n    const program: WebGLProgram = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(\n        gl, () => gl.attachShader(program, this.vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n\n    const program2 = Object.assign(program, {vao: this.createVertexArray()});\n    if (this.debug) {\n      webgl_util.validateProgram(gl, program2);\n    }\n    return program2;\n  }\n\n  public buildVao(program: GPGPUContextProgram) {\n    this.setProgram(program);\n    this.bindVertexArray(program.vao);\n    const gl = this.gl;\n    // Bind index buffer, and vertex buffers based on program attrib\n    // locations.\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer));\n    gpgpu_util.bindVertexProgramAttributeStreams(\n        gl, program, this.vertexBuffer);\n  }\n\n  public deleteProgram(program: GPGPUContextProgram) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n      this.deleteVertexArray(program.vao);\n    }\n  }\n\n  public setProgram(program: GPGPUContextProgram|null) {\n    this.throwIfDisposed();\n    this.program = program;\n\n    if (this.program != null) {\n      if (this.debug) {\n        webgl_util.validateProgram(this.gl, this.program);\n      }\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n\n  public getUniformLocation(\n      program: WebGLProgram, uniformName: string,\n      shouldThrow = true): WebGLUniformLocation {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(\n          this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(\n          this.gl, program, uniformName);\n    }\n  }\n\n  public getAttributeLocation(program: WebGLProgram, attribute: string):\n      number {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(\n        this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  public getUniformLocationNoThrow(program: WebGLProgram, uniformName: string):\n      WebGLUniformLocation {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  public setInputMatrixTexture(\n      inputMatrixTexture: WebGLTexture, uniformLocation: WebGLUniformLocation,\n      textureUnit: number) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(\n        this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n\n  public setOutputMatrixTexture(\n      outputMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  public setOutputPackedMatrixTexture(\n      outputPackedMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.throwIfDisposed();\n    const [width, height] =\n        tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  public setOutputMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    this.setOutputMatrixWriteRegionDriver(\n        startColumn, startRow, numColumns, numRows);\n  }\n\n  public setOutputPackedMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  public debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  public executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      const boundVao = this.getVertexArray();\n      console.assert(\n          boundVao === this.program.vao,\n          'VAO changed between setProgram and executeProgram!');\n\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(\n        gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  public blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n\n  private getQueryTimerExtension(): WebGL1DisjointQueryTimerExtension\n      |WebGL2DisjointQueryTimerExtension {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension =\n          webgl_util.getExtensionOrThrow(\n              this.gl,\n              env().getNumber(\n                  'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                  'EXT_disjoint_timer_query_webgl2' :\n                  'EXT_disjoint_timer_query') as\n              WebGL1DisjointQueryTimerExtension |\n          WebGL2DisjointQueryTimerExtension;\n    }\n    return this.disjointQueryTimerExtension;\n  }\n\n  private getQueryTimerExtensionWebGL2(): WebGL2DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension();\n  }\n\n  private getQueryTimerExtensionWebGL1(): WebGL1DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension() as WebGL1DisjointQueryTimerExtension;\n  }\n\n  beginQuery(): WebGLQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT() as WebGLQuery;\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  public async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await util.repeatedTry(\n        () => this.disposed ||  // while testing contexts are created / disposed\n                                // in rapid succession, so without this check we\n                                // may poll for the query timer indefinitely\n            this.isQueryAvailable(\n                query,\n                env().getNumber(\n                    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(\n        query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n\n  private getQueryTime(query: WebGLQuery, queryTimerVersion: number): number {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const timeElapsedNanos =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  private isQueryAvailable(query: WebGLQuery, queryTimerVersion: number):\n      boolean {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const available =\n          gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const available =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    let scheduleFn = undefined;\n    if ('setTimeoutCustom' in env().platform) {\n      scheduleFn = env().platform.setTimeoutCustom.bind(env().platform);\n    }\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    }, () => 0, null, scheduleFn);\n  }\n\n  private bindTextureToFrameBuffer(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(\n        this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  private unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(\n          this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n\n  private downloadMatrixDriver(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Float32Array): Float32Array {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n\n    return result;\n  }\n\n  private setOutputMatrixTextureDriver(\n      outputMatrixTextureMaybePacked: WebGLTexture, width: number,\n      height: number) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(\n        gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n\n  private setOutputMatrixWriteRegionDriver(\n      x: number, y: number, width: number, height: number) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(\n        this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n\n  private throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  private throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean,\n  resolveFn: () => void\n};\n\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}