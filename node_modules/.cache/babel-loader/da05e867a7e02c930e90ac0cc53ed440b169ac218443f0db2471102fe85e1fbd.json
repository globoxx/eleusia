{"ast":null,"code":"import _toConsumableArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { stack } from '../../ops/stack';\nimport { getGlobalTensorClass, Tensor } from '../../tensor';\ngetGlobalTensorClass().prototype.stack = function (x, axis) {\n  this.throwIfDisposed();\n  var tensorsToBeStacked = x instanceof Tensor ? [this, x] : [this].concat(_toConsumableArray(x));\n  return stack(tensorsToBeStacked, axis);\n};","map":{"version":3,"names":["stack","getGlobalTensorClass","Tensor","prototype","x","axis","throwIfDisposed","tensorsToBeStacked","concat","_toConsumableArray"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\public\\chained_ops\\stack.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {stack} from '../../ops/stack';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    stack<T extends Tensor>(x: Tensor|Tensor[], axis?: number): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.stack = function<T extends Tensor>(\n    x: Tensor|Tensor[], axis?: number): T {\n  this.throwIfDisposed();\n  const tensorsToBeStacked = x instanceof Tensor ? [this, x] : [this, ...x];\n  return stack(tensorsToBeStacked, axis) as T;\n};\n"],"mappings":";AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,KAAK,QAAO,iBAAiB;AACrC,SAAQC,oBAAoB,EAAEC,MAAM,QAAO,cAAc;AASzDD,oBAAoB,EAAE,CAACE,SAAS,CAACH,KAAK,GAAG,UACrCI,CAAkB,EAAEC,IAAa;EACnC,IAAI,CAACC,eAAe,EAAE;EACtB,IAAMC,kBAAkB,GAAGH,CAAC,YAAYF,MAAM,GAAG,CAAC,IAAI,EAAEE,CAAC,CAAC,IAAI,IAAI,EAAAI,MAAA,CAAAC,kBAAA,CAAKL,CAAC,EAAC;EACzE,OAAOJ,KAAK,CAACO,kBAAkB,EAAEF,IAAI,CAAM;AAC7C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}