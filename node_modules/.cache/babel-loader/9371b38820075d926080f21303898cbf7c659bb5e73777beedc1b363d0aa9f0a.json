{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { Step } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET, UnaryOpProgram } from '../unaryop_gpu';\nexport function step(_ref) {\n  var inputs = _ref.inputs,\n    attrs = _ref.attrs,\n    backend = _ref.backend;\n  var x = inputs.x;\n  var opSnippet = CHECK_NAN_SNIPPET + \"\\n    return x > 0.0 ? 1.0 : float(\".concat(attrs.alpha, \");\\n  \");\n  var program = new UnaryOpProgram(x.shape, opSnippet);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport var stepConfig = {\n  kernelName: Step,\n  backendName: 'webgl',\n  kernelFunc: step\n};","map":{"version":3,"names":["Step","CHECK_NAN_SNIPPET","UnaryOpProgram","step","_ref","inputs","attrs","backend","x","opSnippet","concat","alpha","program","shape","runWebGLProgram","dtype","stepConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\kernels\\Step.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Step, StepAttrs, TensorInfo, UnaryInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CHECK_NAN_SNIPPET, UnaryOpProgram} from '../unaryop_gpu';\n\nexport function step(\n    {inputs, attrs, backend}:\n        {inputs: UnaryInputs, attrs: StepAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {x} = inputs;\n  const opSnippet = CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${attrs.alpha});\n  `;\n\n  const program = new UnaryOpProgram(x.shape, opSnippet);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'webgl',\n  kernelFunc: step as unknown as KernelFunc,\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,IAAI,QAA2C,uBAAuB;AAGxG,SAAQC,iBAAiB,EAAEC,cAAc,QAAO,gBAAgB;AAEhE,OAAM,SAAUC,IAAIA,CAAAC,IAAA,EAEsD;EAAA,IADrEC,MAAM,GAAAD,IAAA,CAANC,MAAM;IAAEC,KAAK,GAAAF,IAAA,CAALE,KAAK;IAAEC,OAAO,GAAAH,IAAA,CAAPG,OAAO;EAGzB,IAAOC,CAAC,GAAIH,MAAM,CAAXG,CAAC;EACR,IAAMC,SAAS,GAAGR,iBAAiB,yCAAAS,MAAA,CACFJ,KAAK,CAACK,KAAK,WAC3C;EAED,IAAMC,OAAO,GAAG,IAAIV,cAAc,CAACM,CAAC,CAACK,KAAK,EAAEJ,SAAS,CAAC;EAEtD,OAAOF,OAAO,CAACO,eAAe,CAACF,OAAO,EAAE,CAACJ,CAAC,CAAC,EAAEA,CAAC,CAACO,KAAK,CAAC;AACvD;AAEA,OAAO,IAAMC,UAAU,GAAiB;EACtCC,UAAU,EAAEjB,IAAI;EAChBkB,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAEhB;CACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}