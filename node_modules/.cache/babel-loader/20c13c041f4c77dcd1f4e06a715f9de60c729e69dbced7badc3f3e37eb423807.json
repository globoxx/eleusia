{"ast":null,"code":"import _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport var ReduceProgram = /*#__PURE__*/_createClass(function ReduceProgram(reduceInfo, reduceType) {\n  _classCallCheck(this, ReduceProgram);\n  this.variableNames = ['x'];\n  var windowSize = reduceInfo.windowSize,\n    batchSize = reduceInfo.batchSize,\n    inSize = reduceInfo.inSize,\n    outSize = reduceInfo.outSize;\n  this.outputShape = [batchSize, outSize];\n  var initializationValue = '0.0';\n  var compareOp = \"\";\n  if (reduceType === 'prod') {\n    initializationValue = '1.0';\n  } else if (reduceType === 'min') {\n    // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n    initializationValue = '1.0 / 1e-20';\n    compareOp = \"min\";\n  } else if (reduceType === 'max') {\n    // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n    initializationValue = '-1.0 / 1e-20';\n    compareOp = \"max\";\n  }\n  var returnValue = \"\".concat(reduceType, \"(\").concat(reduceType, \"(\").concat(reduceType, \"(\") + 'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n  if (reduceType === 'sum') {\n    returnValue = \"sumValue\";\n  } else if (reduceType === 'prod') {\n    returnValue = \"prodValue\";\n  } else if (reduceType === 'all') {\n    returnValue = \"allValue\";\n  } else if (reduceType === 'any') {\n    returnValue = \"anyValue\";\n  }\n  var windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n  var windowSizeVec4Remainder = windowSize % 4;\n  var updateSnippet = \"\\n      if (\".concat(reduceType === 'sum', \") {\\n        sumValue += dot(values, ones);\\n      } else if (\").concat(reduceType === 'prod', \") {\\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\\n        prodValue *= tmp[0] * tmp[1];\\n      } else {\\n        minMaxValue = \").concat(compareOp, \"(values, minMaxValue);\\n        if (\").concat(reduceType === 'min', \" || \").concat(reduceType === 'max', \") {\\n          minMaxValue = \").concat(compareOp, \"(values, minMaxValue);\\n          bvec4 isNaN = isnan(values);\\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\\n            minMaxValue = vec4(NAN);\\n          }\\n        }\\n      }\\n    \");\n  var vecType = \"vec4\";\n  if (reduceType === 'all') {\n    initializationValue = '1.0';\n    updateSnippet = \"\\n        bool reducedAllValue = all(values);\\n        float floatedReducedAllValue = float(reducedAllValue);\\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\\n      \";\n    vecType = \"bvec4\";\n  } else if (reduceType === 'any') {\n    initializationValue = '0.0';\n    updateSnippet = \"\\n        bool reducedAnyValue = any(values);\\n        float floatedReducedAnyValue = float(reducedAnyValue);\\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\\n      \";\n    vecType = \"bvec4\";\n  }\n  var checkOutOfBounds = '';\n  if (inSize % windowSize > 0) {\n    checkOutOfBounds = \"\\n        if (inIdx < 0 || inIdx >= \".concat(inSize, \") {\\n          return initializationValue;\\n        }\\n      \");\n  }\n  this.userCode = \"\\n      const float initializationValue = \".concat(initializationValue, \";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float getValue(int batch, int inIdx) {\\n        \").concat(checkOutOfBounds, \"\\n        return getX(batch, inIdx);\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * \").concat(windowSize, \";\\n\\n        vec4 minMaxValue = vec4(\").concat(initializationValue, \");\\n        float prodValue = 1.0;\\n        float sumValue = 0.0;\\n        float allValue = 1.0;\\n        float anyValue = 0.0;\\n\\n        for (int i = 0; i < \").concat(windowSizeNearestVec4, \"; i += 4) {\\n          int inIdx = inOffset + i;\\n          \").concat(vecType, \" values = \").concat(vecType, \"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            getValue(batch, inIdx + 3)\\n          );\\n\\n          \").concat(updateSnippet, \"\\n        }\\n\\n        int inIdx = inOffset + \").concat(windowSizeNearestVec4, \";\\n        if (\").concat(windowSizeVec4Remainder === 1, \") {\\n          \").concat(vecType, \" values = \").concat(vecType, \"(\\n            getValue(batch, inIdx),\\n            initializationValue,\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          \").concat(updateSnippet, \"\\n        } else if (\").concat(windowSizeVec4Remainder === 2, \") {\\n          \").concat(vecType, \" values = \").concat(vecType, \"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          \").concat(updateSnippet, \"\\n        } else if (\").concat(windowSizeVec4Remainder === 3, \") {\\n          \").concat(vecType, \" values = \").concat(vecType, \"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            initializationValue\\n          );\\n\\n          \").concat(updateSnippet, \"\\n        }\\n        setOutput(\").concat(returnValue, \");\\n      }\\n    \");\n});","map":{"version":3,"names":["ReduceProgram","_createClass","reduceInfo","reduceType","_classCallCheck","variableNames","windowSize","batchSize","inSize","outSize","outputShape","initializationValue","compareOp","returnValue","concat","windowSizeNearestVec4","Math","floor","windowSizeVec4Remainder","updateSnippet","vecType","checkOutOfBounds","userCode"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\reduce_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ReduceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo,\n      reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod') {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    let initializationValue = '0.0';\n    let compareOp = ``;\n\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = `min`;\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = `max`;\n    }\n\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n    if (reduceType === 'sum') {\n      returnValue = `sumValue`;\n    } else if (reduceType === 'prod') {\n      returnValue = `prodValue`;\n    } else if (reduceType === 'all') {\n      returnValue = `allValue`;\n    } else if (reduceType === 'any') {\n      returnValue = `anyValue`;\n    }\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n        if (${reduceType === 'min'} || ${reduceType === 'max'}) {\n          minMaxValue = ${compareOp}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `;\n\n    let vecType = `vec4`;\n\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}