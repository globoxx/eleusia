{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { env } from '../environment';\nimport * as util from '../util';\nimport { CompositeArrayBuffer } from './composite_array_buffer';\nimport { decodeWeights } from './io_utils';\nimport { monitorPromisesProgress } from './progress';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\n/**\r\n * Reads binary weights data from a number of URLs.\r\n *\r\n * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.\r\n * @param requestOptions RequestInit (options) for the HTTP requests.\r\n * @param fetchFunc Optional overriding value for the `window.fetch` function.\r\n * @param onProgress Optional, progress callback function, fired periodically\r\n *   before the load is completed.\r\n * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same\r\n *   length as `fetchURLs`.\r\n */\nexport function loadWeightsAsArrayBuffer(_x, _x2) {\n  return _loadWeightsAsArrayBuffer.apply(this, arguments);\n}\n/**\r\n * Reads a weights manifest JSON configuration, fetches the weights and\r\n * returns them as `Tensor`s.\r\n *\r\n * @param manifest The weights manifest JSON.\r\n * @param filePathPrefix The path prefix for filenames given in the manifest.\r\n *     Defaults to the empty string.\r\n * @param weightNames The names of the weights to be fetched.\r\n */\nfunction _loadWeightsAsArrayBuffer() {\n  _loadWeightsAsArrayBuffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(fetchURLs, loadOptions) {\n    var fetchFunc, requests, fetchStartFraction, fetchEndFraction, responses, bufferPromises, bufferStartFraction, bufferEndFraction, buffers;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (loadOptions == null) {\n            loadOptions = {};\n          }\n          fetchFunc = loadOptions.fetchFunc == null ? env().platform.fetch : loadOptions.fetchFunc; // Create the requests for all of the weights in parallel.\n          requests = fetchURLs.map(function (fetchURL) {\n            return fetchFunc(fetchURL, loadOptions.requestInit, {\n              isBinary: true\n            });\n          });\n          fetchStartFraction = 0;\n          fetchEndFraction = 0.5;\n          if (!(loadOptions.onProgress == null)) {\n            _context2.next = 11;\n            break;\n          }\n          _context2.next = 8;\n          return Promise.all(requests);\n        case 8:\n          _context2.t0 = _context2.sent;\n          _context2.next = 14;\n          break;\n        case 11:\n          _context2.next = 13;\n          return monitorPromisesProgress(requests, loadOptions.onProgress, fetchStartFraction, fetchEndFraction);\n        case 13:\n          _context2.t0 = _context2.sent;\n        case 14:\n          responses = _context2.t0;\n          bufferPromises = responses.map(function (response) {\n            return response.arrayBuffer();\n          });\n          bufferStartFraction = 0.5;\n          bufferEndFraction = 1;\n          if (!(loadOptions.onProgress == null)) {\n            _context2.next = 24;\n            break;\n          }\n          _context2.next = 21;\n          return Promise.all(bufferPromises);\n        case 21:\n          _context2.t1 = _context2.sent;\n          _context2.next = 27;\n          break;\n        case 24:\n          _context2.next = 26;\n          return monitorPromisesProgress(bufferPromises, loadOptions.onProgress, bufferStartFraction, bufferEndFraction);\n        case 26:\n          _context2.t1 = _context2.sent;\n        case 27:\n          buffers = _context2.t1;\n          return _context2.abrupt(\"return\", buffers);\n        case 29:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _loadWeightsAsArrayBuffer.apply(this, arguments);\n}\nexport function loadWeights(_x3) {\n  return _loadWeights.apply(this, arguments);\n}\n/**\r\n * Creates a function, which reads a weights manifest JSON configuration,\r\n * fetches the weight files using the specified function and returns them as\r\n * `Tensor`s.\r\n *\r\n * ```js\r\n * // example for creating a nodejs weight loader, which reads the weight files\r\n * // from disk using fs.readFileSync\r\n *\r\n * import * as fs from 'fs'\r\n *\r\n * const fetchWeightsFromDisk = (filePaths: string[]) =>\r\n *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)\r\n *\r\n * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)\r\n *\r\n * const manifest = JSON.parse(\r\n *   fs.readFileSync('./my_model-weights_manifest').toString()\r\n * )\r\n * const weightMap = await loadWeights(manifest, './')\r\n * ```\r\n * @param fetchWeightsFunction The function used for fetching the weight files.\r\n * @returns Weight loading function.\r\n */\nfunction _loadWeights() {\n  _loadWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(manifest) {\n    var filePathPrefix,\n      weightNames,\n      requestInit,\n      fetchWeights,\n      loadWeights,\n      _args3 = arguments;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          filePathPrefix = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : '';\n          weightNames = _args3.length > 2 ? _args3[2] : undefined;\n          requestInit = _args3.length > 3 ? _args3[3] : undefined;\n          // TODO(nsthorat): Groups are currently fetched atomically. If you need a\n          // single weight from a group, the whole group will be fetched. At a future\n          // date, we should support fetching only the individual shards within a\n          // group that are needed to reconstruct the requested weight.\n          // TODO(cais): Use `decodeWeights` for implementation.\n          fetchWeights = function fetchWeights(fetchUrls) {\n            return loadWeightsAsArrayBuffer(fetchUrls, {\n              requestInit: requestInit\n            });\n          };\n          loadWeights = weightsLoaderFactory(fetchWeights);\n          return _context3.abrupt(\"return\", loadWeights(manifest, filePathPrefix, weightNames));\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _loadWeights.apply(this, arguments);\n}\nexport function weightsLoaderFactory(fetchWeightsFunction) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(manifest) {\n      var filePathPrefix,\n        weightNames,\n        groupIndicesToFetchMap,\n        groupWeightsToFetch,\n        weightsFound,\n        allManifestWeightNames,\n        weightsNotFound,\n        groupIndicesToFetch,\n        fetchUrls,\n        buffers,\n        weightsTensorMap,\n        bufferIndexOffset,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            filePathPrefix = _args.length > 1 && _args[1] !== undefined ? _args[1] : '';\n            weightNames = _args.length > 2 ? _args[2] : undefined;\n            // Collect all the groups, weights, and their relative offsets to be\n            // fetched.\n            groupIndicesToFetchMap = manifest.map(function () {\n              return false;\n            });\n            groupWeightsToFetch = {};\n            weightsFound = weightNames != null ? weightNames.map(function () {\n              return false;\n            }) : [];\n            allManifestWeightNames = [];\n            manifest.forEach(function (manifestGroupConfig, groupIndex) {\n              var groupOffset = 0;\n              manifestGroupConfig.weights.forEach(function (weightsEntry) {\n                var rawDtype = 'quantization' in weightsEntry ? weightsEntry.quantization.dtype : weightsEntry.dtype;\n                var weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] * util.sizeFromShape(weightsEntry.shape);\n                var enqueueWeightsForFetchingFn = function enqueueWeightsForFetchingFn() {\n                  groupIndicesToFetchMap[groupIndex] = true;\n                  if (groupWeightsToFetch[groupIndex] == null) {\n                    groupWeightsToFetch[groupIndex] = [];\n                  }\n                  groupWeightsToFetch[groupIndex].push({\n                    manifestEntry: weightsEntry,\n                    groupOffset: groupOffset,\n                    sizeBytes: weightsBytes\n                  });\n                };\n                if (weightNames != null) {\n                  weightNames.forEach(function (weightName, weightIndex) {\n                    if (weightName === weightsEntry.name) {\n                      enqueueWeightsForFetchingFn();\n                      weightsFound[weightIndex] = true;\n                    }\n                  });\n                } else {\n                  enqueueWeightsForFetchingFn();\n                }\n                allManifestWeightNames.push(weightsEntry.name);\n                groupOffset += weightsBytes;\n              });\n            });\n            if (weightsFound.every(function (found) {\n              return found;\n            })) {\n              _context.next = 10;\n              break;\n            }\n            weightsNotFound = weightNames.filter(function (_, i) {\n              return !weightsFound[i];\n            });\n            throw new Error(\"Could not find weights in manifest with names: \" + \"\".concat(weightsNotFound.join(', '), \". \\n\") + \"Manifest JSON has weights with names: \" + \"\".concat(allManifestWeightNames.join(', '), \".\"));\n          case 10:\n            // Convert the one-hot boolean groupId => shouldFetch map to a list of group\n            // IDs.\n            groupIndicesToFetch = groupIndicesToFetchMap.reduce(function (accumulator, shouldFetch, i) {\n              if (shouldFetch) {\n                accumulator.push(i);\n              }\n              return accumulator;\n            }, []);\n            fetchUrls = [];\n            groupIndicesToFetch.forEach(function (i) {\n              manifest[i].paths.forEach(function (filepath) {\n                var fetchUrl = filePathPrefix + (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\n                fetchUrls.push(fetchUrl);\n              });\n            });\n            _context.next = 15;\n            return fetchWeightsFunction(fetchUrls);\n          case 15:\n            buffers = _context.sent;\n            weightsTensorMap = {};\n            bufferIndexOffset = 0;\n            groupIndicesToFetch.forEach(function (i) {\n              var numBuffers = manifest[i].paths.length;\n              var weightsBuffer = new CompositeArrayBuffer(buffers.slice(bufferIndexOffset, bufferIndexOffset + numBuffers));\n              var weightsEntries = groupWeightsToFetch[i];\n              weightsEntries.forEach(function (weightsEntry) {\n                var byteBuffer = weightsBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);\n                var nameToTensorMap = decodeWeights(byteBuffer, [weightsEntry.manifestEntry]);\n                for (var name in nameToTensorMap) {\n                  weightsTensorMap[name] = nameToTensorMap[name];\n                }\n              });\n              bufferIndexOffset += numBuffers;\n            });\n            return _context.abrupt(\"return\", weightsTensorMap);\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x4) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}","map":{"version":3,"names":["env","util","CompositeArrayBuffer","decodeWeights","monitorPromisesProgress","DTYPE_VALUE_SIZE_MAP","loadWeightsAsArrayBuffer","_x","_x2","_loadWeightsAsArrayBuffer","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","fetchURLs","loadOptions","fetchFunc","requests","fetchStartFraction","fetchEndFraction","responses","bufferPromises","bufferStartFraction","bufferEndFraction","buffers","wrap","_callee2$","_context2","prev","next","platform","fetch","map","fetchURL","requestInit","isBinary","onProgress","Promise","all","t0","sent","response","arrayBuffer","t1","abrupt","stop","loadWeights","_x3","_loadWeights","_callee3","manifest","filePathPrefix","weightNames","fetchWeights","_args3","_callee3$","_context3","length","undefined","fetchUrls","weightsLoaderFactory","fetchWeightsFunction","_ref","_callee","groupIndicesToFetchMap","groupWeightsToFetch","weightsFound","allManifestWeightNames","weightsNotFound","groupIndicesToFetch","weightsTensorMap","bufferIndexOffset","_args","_callee$","_context","forEach","manifestGroupConfig","groupIndex","groupOffset","weights","weightsEntry","rawDtype","quantization","dtype","weightsBytes","sizeFromShape","shape","enqueueWeightsForFetchingFn","push","manifestEntry","sizeBytes","weightName","weightIndex","name","every","found","filter","_","i","Error","concat","join","reduce","accumulator","shouldFetch","paths","filepath","fetchUrl","endsWith","numBuffers","weightsBuffer","slice","weightsEntries","byteBuffer","nameToTensorMap","_x4"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\io\\weights_loader.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '../environment';\n\nimport {NamedTensorMap} from '../tensor_types';\nimport * as util from '../util';\nimport {CompositeArrayBuffer} from './composite_array_buffer';\nimport {decodeWeights} from './io_utils';\nimport {monitorPromisesProgress} from './progress';\nimport {DTYPE_VALUE_SIZE_MAP, LoadOptions, WeightsManifestConfig, WeightsManifestEntry} from './types';\n\n/**\n * Reads binary weights data from a number of URLs.\n *\n * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.\n * @param requestOptions RequestInit (options) for the HTTP requests.\n * @param fetchFunc Optional overriding value for the `window.fetch` function.\n * @param onProgress Optional, progress callback function, fired periodically\n *   before the load is completed.\n * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same\n *   length as `fetchURLs`.\n */\nexport async function loadWeightsAsArrayBuffer(\n  fetchURLs: string[], loadOptions?: LoadOptions): Promise<ArrayBuffer[]> {\n  if (loadOptions == null) {\n    loadOptions = {};\n  }\n\n  const fetchFunc = loadOptions.fetchFunc == null ? env().platform.fetch :\n    loadOptions.fetchFunc;\n\n  // Create the requests for all of the weights in parallel.\n  const requests = fetchURLs.map(\n    fetchURL =>\n      fetchFunc(fetchURL, loadOptions.requestInit, { isBinary: true }));\n\n  const fetchStartFraction = 0;\n  const fetchEndFraction = 0.5;\n\n  const responses = loadOptions.onProgress == null ?\n    await Promise.all(requests) :\n    await monitorPromisesProgress(\n      requests, loadOptions.onProgress, fetchStartFraction,\n      fetchEndFraction);\n\n  const bufferPromises = responses.map(response => response.arrayBuffer());\n\n  const bufferStartFraction = 0.5;\n  const bufferEndFraction = 1;\n\n  const buffers = loadOptions.onProgress == null ?\n    await Promise.all(bufferPromises) :\n    await monitorPromisesProgress(\n      bufferPromises, loadOptions.onProgress, bufferStartFraction,\n      bufferEndFraction);\n  return buffers;\n}\n\n/**\n * Reads a weights manifest JSON configuration, fetches the weights and\n * returns them as `Tensor`s.\n *\n * @param manifest The weights manifest JSON.\n * @param filePathPrefix The path prefix for filenames given in the manifest.\n *     Defaults to the empty string.\n * @param weightNames The names of the weights to be fetched.\n */\nexport async function loadWeights(\n  manifest: WeightsManifestConfig, filePathPrefix = '',\n  weightNames?: string[],\n  requestInit?: RequestInit): Promise<NamedTensorMap> {\n  // TODO(nsthorat): Groups are currently fetched atomically. If you need a\n  // single weight from a group, the whole group will be fetched. At a future\n  // date, we should support fetching only the individual shards within a\n  // group that are needed to reconstruct the requested weight.\n  // TODO(cais): Use `decodeWeights` for implementation.\n\n  const fetchWeights = (fetchUrls: string[]) =>\n    loadWeightsAsArrayBuffer(fetchUrls, { requestInit });\n  const loadWeights = weightsLoaderFactory(fetchWeights);\n\n  return loadWeights(manifest, filePathPrefix, weightNames);\n}\n\n/**\n * Creates a function, which reads a weights manifest JSON configuration,\n * fetches the weight files using the specified function and returns them as\n * `Tensor`s.\n *\n * ```js\n * // example for creating a nodejs weight loader, which reads the weight files\n * // from disk using fs.readFileSync\n *\n * import * as fs from 'fs'\n *\n * const fetchWeightsFromDisk = (filePaths: string[]) =>\n *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)\n *\n * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)\n *\n * const manifest = JSON.parse(\n *   fs.readFileSync('./my_model-weights_manifest').toString()\n * )\n * const weightMap = await loadWeights(manifest, './')\n * ```\n * @param fetchWeightsFunction The function used for fetching the weight files.\n * @returns Weight loading function.\n */\nexport function weightsLoaderFactory(\n  fetchWeightsFunction: (fetchUrls: string[]) => Promise<ArrayBuffer[]>):\n  (manifest: WeightsManifestConfig, filePathPrefix?: string,\n    weightNames?: string[]) => Promise<NamedTensorMap> {\n  return async (\n    manifest: WeightsManifestConfig, filePathPrefix = '',\n    weightNames?: string[]): Promise<NamedTensorMap> => {\n    // Collect all the groups, weights, and their relative offsets to be\n    // fetched.\n    const groupIndicesToFetchMap = manifest.map(() => false);\n    const groupWeightsToFetch: {\n      [group: number]: Array<{\n        manifestEntry: WeightsManifestEntry; groupOffset: number;\n        sizeBytes: number;\n      }>\n    } = {};\n    const weightsFound =\n      weightNames != null ? weightNames.map(() => false) : [];\n    const allManifestWeightNames: string[] = [];\n    manifest.forEach((manifestGroupConfig, groupIndex) => {\n      let groupOffset = 0;\n      manifestGroupConfig.weights.forEach(weightsEntry => {\n        const rawDtype = ('quantization' in weightsEntry) ?\n          weightsEntry.quantization.dtype :\n          weightsEntry.dtype;\n\n        const weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] *\n          util.sizeFromShape(weightsEntry.shape);\n\n        const enqueueWeightsForFetchingFn = () => {\n          groupIndicesToFetchMap[groupIndex] = true;\n          if (groupWeightsToFetch[groupIndex] == null) {\n            groupWeightsToFetch[groupIndex] = [];\n          }\n\n          groupWeightsToFetch[groupIndex].push({\n            manifestEntry: weightsEntry,\n            groupOffset,\n            sizeBytes: weightsBytes\n          });\n        };\n\n        if (weightNames != null) {\n          weightNames.forEach((weightName, weightIndex) => {\n            if (weightName === weightsEntry.name) {\n              enqueueWeightsForFetchingFn();\n              weightsFound[weightIndex] = true;\n            }\n          });\n        } else {\n          enqueueWeightsForFetchingFn();\n        }\n\n        allManifestWeightNames.push(weightsEntry.name);\n        groupOffset += weightsBytes;\n      });\n    });\n\n    if (!weightsFound.every(found => found)) {\n      const weightsNotFound = weightNames.filter((_, i) => !weightsFound[i]);\n      throw new Error(\n        `Could not find weights in manifest with names: ` +\n        `${weightsNotFound.join(', ')}. \\n` +\n        `Manifest JSON has weights with names: ` +\n        `${allManifestWeightNames.join(', ')}.`);\n    }\n\n    // Convert the one-hot boolean groupId => shouldFetch map to a list of group\n    // IDs.\n    const groupIndicesToFetch =\n      groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i) => {\n        if (shouldFetch) {\n          accumulator.push(i);\n        }\n        return accumulator;\n      }, []);\n\n    const fetchUrls: string[] = [];\n    groupIndicesToFetch.forEach(i => {\n      manifest[i].paths.forEach(filepath => {\n        const fetchUrl = filePathPrefix +\n          (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\n        fetchUrls.push(fetchUrl);\n      });\n    });\n    const buffers = await fetchWeightsFunction(fetchUrls);\n\n    const weightsTensorMap: NamedTensorMap = {};\n    let bufferIndexOffset = 0;\n    groupIndicesToFetch.forEach(i => {\n      const numBuffers = manifest[i].paths.length;\n\n      const weightsBuffer = new CompositeArrayBuffer(\n        buffers.slice(bufferIndexOffset, bufferIndexOffset + numBuffers));\n\n      const weightsEntries = groupWeightsToFetch[i];\n\n      weightsEntries.forEach(weightsEntry => {\n        const byteBuffer = weightsBuffer.slice(\n          weightsEntry.groupOffset,\n          weightsEntry.groupOffset + weightsEntry.sizeBytes);\n        const nameToTensorMap =\n          decodeWeights(byteBuffer, [weightsEntry.manifestEntry]);\n        for (const name in nameToTensorMap) {\n          weightsTensorMap[name] = nameToTensorMap[name];\n        }\n      });\n\n      bufferIndexOffset += numBuffers;\n    });\n\n    return weightsTensorMap;\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}