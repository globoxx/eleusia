{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { op } from '../operation';\nimport { cosineWindow } from '../signal_ops_util';\n/**\r\n * Generate a Hann window.\r\n *\r\n * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows\r\n *\r\n * ```js\r\n * tf.signal.hannWindow(10).print();\r\n * ```\r\n * @param The length of window\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\r\n */\nfunction hannWindow_(windowLength) {\n  return cosineWindow(windowLength, 0.5, 0.5);\n}\nexport var hannWindow = /* @__PURE__ */op({\n  hannWindow_: hannWindow_\n});","map":{"version":3,"names":["op","cosineWindow","hannWindow_","windowLength","hannWindow"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\signal\\hann_window.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor1D} from '../../tensor';\nimport {op} from '../operation';\nimport {cosineWindow} from '../signal_ops_util';\n\n/**\n * Generate a Hann window.\n *\n * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows\n *\n * ```js\n * tf.signal.hannWindow(10).print();\n * ```\n * @param The length of window\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction hannWindow_(windowLength: number): Tensor1D {\n  return cosineWindow(windowLength, 0.5, 0.5);\n}\n\nexport const hannWindow = /* @__PURE__ */ op({hannWindow_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,EAAE,QAAO,cAAc;AAC/B,SAAQC,YAAY,QAAO,oBAAoB;AAE/C;;;;;;;;;;;;AAYA,SAASC,WAAWA,CAACC,YAAoB;EACvC,OAAOF,YAAY,CAACE,YAAY,EAAE,GAAG,EAAE,GAAG,CAAC;AAC7C;AAEA,OAAO,IAAMC,UAAU,GAAG,eAAgBJ,EAAE,CAAC;EAACE,WAAW,EAAXA;AAAW,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}