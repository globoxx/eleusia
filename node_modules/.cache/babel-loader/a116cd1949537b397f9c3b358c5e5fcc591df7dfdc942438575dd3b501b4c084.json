{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */\nimport { datasetFromIteratorFn } from './dataset';\nimport { CSVDataset } from './datasets/csv_dataset';\nimport { iteratorFromFunction } from './iterators/lazy_iterator';\nimport { MicrophoneIterator } from './iterators/microphone_iterator';\nimport { WebcamIterator } from './iterators/webcam_iterator';\nimport { URLDataSource } from './sources/url_data_source';\n/**\r\n * Create a `CSVDataset` by reading and decoding CSV file(s) from provided URL\r\n * or local path if it's in Node environment.\r\n *\r\n * Note: If isLabel in columnConfigs is `true` for at least one column, the\r\n * element in returned `CSVDataset` will be an object of\r\n * `{xs:features, ys:labels}`: xs is a dict of features key/value pairs, ys\r\n * is a dict of labels key/value pairs. If no column is marked as label,\r\n * returns a dict of features only.\r\n *\r\n * ```js\r\n * const csvUrl =\r\n * 'https://storage.googleapis.com/tfjs-examples/multivariate-linear-regression/data/boston-housing-train.csv';\r\n *\r\n * async function run() {\r\n *   // We want to predict the column \"medv\", which represents a median value of\r\n *   // a home (in $1000s), so we mark it as a label.\r\n *   const csvDataset = tf.data.csv(\r\n *     csvUrl, {\r\n *       columnConfigs: {\r\n *         medv: {\r\n *           isLabel: true\r\n *         }\r\n *       }\r\n *     });\r\n *\r\n *   // Number of features is the number of column names minus one for the label\r\n *   // column.\r\n *   const numOfFeatures = (await csvDataset.columnNames()).length - 1;\r\n *\r\n *   // Prepare the Dataset for training.\r\n *   const flattenedDataset =\r\n *     csvDataset\r\n *     .map(({xs, ys}) =>\r\n *       {\r\n *         // Convert xs(features) and ys(labels) from object form (keyed by\r\n *         // column name) to array form.\r\n *         return {xs:Object.values(xs), ys:Object.values(ys)};\r\n *       })\r\n *     .batch(10);\r\n *\r\n *   // Define the model.\r\n *   const model = tf.sequential();\r\n *   model.add(tf.layers.dense({\r\n *     inputShape: [numOfFeatures],\r\n *     units: 1\r\n *   }));\r\n *   model.compile({\r\n *     optimizer: tf.train.sgd(0.000001),\r\n *     loss: 'meanSquaredError'\r\n *   });\r\n *\r\n *   // Fit the model using the prepared Dataset\r\n *   return model.fitDataset(flattenedDataset, {\r\n *     epochs: 10,\r\n *     callbacks: {\r\n *       onEpochEnd: async (epoch, logs) => {\r\n *         console.log(epoch + ':' + logs.loss);\r\n *       }\r\n *     }\r\n *   });\r\n * }\r\n *\r\n * await run();\r\n * ```\r\n *\r\n * @param source URL or local path to get CSV file. If it's a local path, it\r\n * must have prefix `file://` and it only works in node environment.\r\n * @param csvConfig (Optional) A CSVConfig object that contains configurations\r\n *     of reading and decoding from CSV file(s).\r\n *\r\n * @doc {\r\n *   heading: 'Data',\r\n *   subheading: 'Creation',\r\n *   namespace: 'data',\r\n *   configParamIndices: [1]\r\n *  }\r\n */\nexport function csv(source) {\n  var csvConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new CSVDataset(new URLDataSource(source), csvConfig);\n}\n/**\r\n * Create a `Dataset` that produces each element by calling a provided function.\r\n *\r\n * Note that repeated iterations over this `Dataset` may produce different\r\n * results, because the function will be called anew for each element of each\r\n * iteration.\r\n *\r\n * Also, beware that the sequence of calls to this function may be out of order\r\n * in time with respect to the logical order of the Dataset. This is due to the\r\n * asynchronous lazy nature of stream processing, and depends on downstream\r\n * transformations (e.g. .shuffle()). If the provided function is pure, this is\r\n * no problem, but if it is a closure over a mutable state (e.g., a traversal\r\n * pointer), then the order of the produced elements may be scrambled.\r\n *\r\n * ```js\r\n * let i = -1;\r\n * const func = () =>\r\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\r\n * const ds = tf.data.func(func);\r\n * await ds.forEachAsync(e => console.log(e));\r\n * ```\r\n *\r\n * @param f A function that produces one data element on each call.\r\n */\nexport function func(f) {\n  var iter = iteratorFromFunction(f);\n  return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", iter);\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  })));\n}\n/**\r\n * Create a `Dataset` that produces each element from provided JavaScript\r\n * generator, which is a function*\r\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions),\r\n * or a function that returns an\r\n * iterator\r\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions).\r\n *\r\n * The returned iterator should have `.next()` function that returns element in\r\n * format of `{value: TensorContainer, done:boolean}`.\r\n *\r\n * Example of creating a dataset from an iterator factory:\r\n * ```js\r\n * function makeIterator() {\r\n *   const numElements = 10;\r\n *   let index = 0;\r\n *\r\n *   const iterator = {\r\n *     next: () => {\r\n *       let result;\r\n *       if (index < numElements) {\r\n *         result = {value: index, done: false};\r\n *         index++;\r\n *         return result;\r\n *       }\r\n *       return {value: index, done: true};\r\n *     }\r\n *   };\r\n *   return iterator;\r\n * }\r\n * const ds = tf.data.generator(makeIterator);\r\n * await ds.forEachAsync(e => console.log(e));\r\n * ```\r\n *\r\n * Example of creating a dataset from a generator:\r\n * ```js\r\n * function* dataGenerator() {\r\n *   const numElements = 10;\r\n *   let index = 0;\r\n *   while (index < numElements) {\r\n *     const x = index;\r\n *     index++;\r\n *     yield x;\r\n *   }\r\n * }\r\n *\r\n * const ds = tf.data.generator(dataGenerator);\r\n * await ds.forEachAsync(e => console.log(e));\r\n * ```\r\n *\r\n * @param generator A JavaScript generator function that returns a JavaScript\r\n *     iterator.\r\n *\r\n * @doc {\r\n *   heading: 'Data',\r\n *   subheading: 'Creation',\r\n *   namespace: 'data',\r\n *   configParamIndices: [1]\r\n *  }\r\n */\nexport function generator(generator) {\n  return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var gen;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return generator();\n        case 2:\n          gen = _context2.sent;\n          return _context2.abrupt(\"return\", iteratorFromFunction(function () {\n            return gen.next();\n          }));\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  })));\n}\n/**\r\n * Create an iterator that generates `Tensor`s from webcam video stream. This\r\n * API only works in Browser environment when the device has webcam.\r\n *\r\n * Note: this code snippet only works when the device has a webcam. It will\r\n * request permission to open the webcam when running.\r\n * ```js\r\n * const videoElement = document.createElement('video');\r\n * videoElement.width = 100;\r\n * videoElement.height = 100;\r\n * const cam = await tf.data.webcam(videoElement);\r\n * const img = await cam.capture();\r\n * img.print();\r\n * cam.stop();\r\n * ```\r\n *\r\n * @param webcamVideoElement A `HTMLVideoElement` used to play video from\r\n *     webcam. If this element is not provided, a hidden `HTMLVideoElement` will\r\n *     be created. In that case, `resizeWidth` and `resizeHeight` must be\r\n *     provided to set the generated tensor shape.\r\n * @param webcamConfig A `WebcamConfig` object that contains configurations of\r\n *     reading and manipulating data from webcam video stream.\r\n *\r\n * @doc {\r\n *   heading: 'Data',\r\n *   subheading: 'Creation',\r\n *   namespace: 'data',\r\n *   ignoreCI: true\r\n *  }\r\n */\nexport function webcam(_x, _x2) {\n  return _webcam.apply(this, arguments);\n}\n/**\r\n * Create an iterator that generates frequency-domain spectrogram `Tensor`s from\r\n * microphone audio stream with browser's native FFT. This API only works in\r\n * browser environment when the device has microphone.\r\n *\r\n * Note: this code snippet only works when the device has a microphone. It will\r\n * request permission to open the microphone when running.\r\n * ```js\r\n * const mic = await tf.data.microphone({\r\n *   fftSize: 1024,\r\n *   columnTruncateLength: 232,\r\n *   numFramesPerSpectrogram: 43,\r\n *   sampleRateHz:44100,\r\n *   includeSpectrogram: true,\r\n *   includeWaveform: true\r\n * });\r\n * const audioData = await mic.capture();\r\n * const spectrogramTensor = audioData.spectrogram;\r\n * spectrogramTensor.print();\r\n * const waveformTensor = audioData.waveform;\r\n * waveformTensor.print();\r\n * mic.stop();\r\n * ```\r\n *\r\n * @param microphoneConfig A `MicrophoneConfig` object that contains\r\n *     configurations of reading audio data from microphone.\r\n *\r\n * @doc {\r\n *   heading: 'Data',\r\n *   subheading: 'Creation',\r\n *   namespace: 'data',\r\n *   ignoreCI: true\r\n *  }\r\n */\nfunction _webcam() {\n  _webcam = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(webcamVideoElement, webcamConfig) {\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          return _context3.abrupt(\"return\", WebcamIterator.create(webcamVideoElement, webcamConfig));\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _webcam.apply(this, arguments);\n}\nexport function microphone(_x3) {\n  return _microphone.apply(this, arguments);\n}\nfunction _microphone() {\n  _microphone = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(microphoneConfig) {\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          return _context4.abrupt(\"return\", MicrophoneIterator.create(microphoneConfig));\n        case 1:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return _microphone.apply(this, arguments);\n}","map":{"version":3,"names":["datasetFromIteratorFn","CSVDataset","iteratorFromFunction","MicrophoneIterator","WebcamIterator","URLDataSource","csv","source","csvConfig","arguments","length","undefined","func","f","iter","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","stop","generator","_callee2","gen","_callee2$","_context2","sent","webcam","_x","_x2","_webcam","apply","_callee3","webcamVideoElement","webcamConfig","_callee3$","_context3","create","microphone","_x3","_microphone","_callee4","microphoneConfig","_callee4$","_context4"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-data\\src\\readers.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {TensorContainer} from '@tensorflow/tfjs-core';\nimport {Dataset, datasetFromIteratorFn} from './dataset';\nimport {CSVDataset} from './datasets/csv_dataset';\nimport {iteratorFromFunction} from './iterators/lazy_iterator';\nimport {MicrophoneIterator} from './iterators/microphone_iterator';\nimport {WebcamIterator} from './iterators/webcam_iterator';\nimport {URLDataSource} from './sources/url_data_source';\nimport {CSVConfig, MicrophoneConfig, WebcamConfig} from './types';\n\n/**\n * Create a `CSVDataset` by reading and decoding CSV file(s) from provided URL\n * or local path if it's in Node environment.\n *\n * Note: If isLabel in columnConfigs is `true` for at least one column, the\n * element in returned `CSVDataset` will be an object of\n * `{xs:features, ys:labels}`: xs is a dict of features key/value pairs, ys\n * is a dict of labels key/value pairs. If no column is marked as label,\n * returns a dict of features only.\n *\n * ```js\n * const csvUrl =\n * 'https://storage.googleapis.com/tfjs-examples/multivariate-linear-regression/data/boston-housing-train.csv';\n *\n * async function run() {\n *   // We want to predict the column \"medv\", which represents a median value of\n *   // a home (in $1000s), so we mark it as a label.\n *   const csvDataset = tf.data.csv(\n *     csvUrl, {\n *       columnConfigs: {\n *         medv: {\n *           isLabel: true\n *         }\n *       }\n *     });\n *\n *   // Number of features is the number of column names minus one for the label\n *   // column.\n *   const numOfFeatures = (await csvDataset.columnNames()).length - 1;\n *\n *   // Prepare the Dataset for training.\n *   const flattenedDataset =\n *     csvDataset\n *     .map(({xs, ys}) =>\n *       {\n *         // Convert xs(features) and ys(labels) from object form (keyed by\n *         // column name) to array form.\n *         return {xs:Object.values(xs), ys:Object.values(ys)};\n *       })\n *     .batch(10);\n *\n *   // Define the model.\n *   const model = tf.sequential();\n *   model.add(tf.layers.dense({\n *     inputShape: [numOfFeatures],\n *     units: 1\n *   }));\n *   model.compile({\n *     optimizer: tf.train.sgd(0.000001),\n *     loss: 'meanSquaredError'\n *   });\n *\n *   // Fit the model using the prepared Dataset\n *   return model.fitDataset(flattenedDataset, {\n *     epochs: 10,\n *     callbacks: {\n *       onEpochEnd: async (epoch, logs) => {\n *         console.log(epoch + ':' + logs.loss);\n *       }\n *     }\n *   });\n * }\n *\n * await run();\n * ```\n *\n * @param source URL or local path to get CSV file. If it's a local path, it\n * must have prefix `file://` and it only works in node environment.\n * @param csvConfig (Optional) A CSVConfig object that contains configurations\n *     of reading and decoding from CSV file(s).\n *\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   configParamIndices: [1]\n *  }\n */\nexport function csv(\n    source: RequestInfo, csvConfig: CSVConfig = {}): CSVDataset {\n  return new CSVDataset(new URLDataSource(source), csvConfig);\n}\n\n/**\n * Create a `Dataset` that produces each element by calling a provided function.\n *\n * Note that repeated iterations over this `Dataset` may produce different\n * results, because the function will be called anew for each element of each\n * iteration.\n *\n * Also, beware that the sequence of calls to this function may be out of order\n * in time with respect to the logical order of the Dataset. This is due to the\n * asynchronous lazy nature of stream processing, and depends on downstream\n * transformations (e.g. .shuffle()). If the provided function is pure, this is\n * no problem, but if it is a closure over a mutable state (e.g., a traversal\n * pointer), then the order of the produced elements may be scrambled.\n *\n * ```js\n * let i = -1;\n * const func = () =>\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\n * const ds = tf.data.func(func);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n *\n * @param f A function that produces one data element on each call.\n */\nexport function func<T extends TensorContainer>(\n    f: () => IteratorResult<T>| Promise<IteratorResult<T>>): Dataset<T> {\n  const iter = iteratorFromFunction(f);\n  return datasetFromIteratorFn(async () => iter);\n}\n\n/**\n * Create a `Dataset` that produces each element from provided JavaScript\n * generator, which is a function*\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions),\n * or a function that returns an\n * iterator\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions).\n *\n * The returned iterator should have `.next()` function that returns element in\n * format of `{value: TensorContainer, done:boolean}`.\n *\n * Example of creating a dataset from an iterator factory:\n * ```js\n * function makeIterator() {\n *   const numElements = 10;\n *   let index = 0;\n *\n *   const iterator = {\n *     next: () => {\n *       let result;\n *       if (index < numElements) {\n *         result = {value: index, done: false};\n *         index++;\n *         return result;\n *       }\n *       return {value: index, done: true};\n *     }\n *   };\n *   return iterator;\n * }\n * const ds = tf.data.generator(makeIterator);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n *\n * Example of creating a dataset from a generator:\n * ```js\n * function* dataGenerator() {\n *   const numElements = 10;\n *   let index = 0;\n *   while (index < numElements) {\n *     const x = index;\n *     index++;\n *     yield x;\n *   }\n * }\n *\n * const ds = tf.data.generator(dataGenerator);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n *\n * @param generator A JavaScript generator function that returns a JavaScript\n *     iterator.\n *\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   configParamIndices: [1]\n *  }\n */\nexport function generator<T extends TensorContainer>(\n    generator: () => Iterator<T>| Promise<Iterator<T>>): Dataset<T> {\n  return datasetFromIteratorFn(async () => {\n    const gen = await generator();\n    return iteratorFromFunction(() => gen.next());\n  });\n}\n\n/**\n * Create an iterator that generates `Tensor`s from webcam video stream. This\n * API only works in Browser environment when the device has webcam.\n *\n * Note: this code snippet only works when the device has a webcam. It will\n * request permission to open the webcam when running.\n * ```js\n * const videoElement = document.createElement('video');\n * videoElement.width = 100;\n * videoElement.height = 100;\n * const cam = await tf.data.webcam(videoElement);\n * const img = await cam.capture();\n * img.print();\n * cam.stop();\n * ```\n *\n * @param webcamVideoElement A `HTMLVideoElement` used to play video from\n *     webcam. If this element is not provided, a hidden `HTMLVideoElement` will\n *     be created. In that case, `resizeWidth` and `resizeHeight` must be\n *     provided to set the generated tensor shape.\n * @param webcamConfig A `WebcamConfig` object that contains configurations of\n *     reading and manipulating data from webcam video stream.\n *\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   ignoreCI: true\n *  }\n */\nexport async function webcam(\n    webcamVideoElement?: HTMLVideoElement,\n    webcamConfig?: WebcamConfig): Promise<WebcamIterator> {\n  return WebcamIterator.create(webcamVideoElement, webcamConfig);\n}\n\n/**\n * Create an iterator that generates frequency-domain spectrogram `Tensor`s from\n * microphone audio stream with browser's native FFT. This API only works in\n * browser environment when the device has microphone.\n *\n * Note: this code snippet only works when the device has a microphone. It will\n * request permission to open the microphone when running.\n * ```js\n * const mic = await tf.data.microphone({\n *   fftSize: 1024,\n *   columnTruncateLength: 232,\n *   numFramesPerSpectrogram: 43,\n *   sampleRateHz:44100,\n *   includeSpectrogram: true,\n *   includeWaveform: true\n * });\n * const audioData = await mic.capture();\n * const spectrogramTensor = audioData.spectrogram;\n * spectrogramTensor.print();\n * const waveformTensor = audioData.waveform;\n * waveformTensor.print();\n * mic.stop();\n * ```\n *\n * @param microphoneConfig A `MicrophoneConfig` object that contains\n *     configurations of reading audio data from microphone.\n *\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   ignoreCI: true\n *  }\n */\nexport async function microphone(microphoneConfig?: MicrophoneConfig):\n    Promise<MicrophoneIterator> {\n  return MicrophoneIterator.create(microphoneConfig);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}