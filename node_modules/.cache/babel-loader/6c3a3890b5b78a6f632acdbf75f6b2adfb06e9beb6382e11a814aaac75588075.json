{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Slice } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Extracts a slice from a `tf.Tensor` starting at coordinates `begin`\r\n * and is of size `size`.\r\n *\r\n * Also available are stricter rank-specific methods with the same signature\r\n * as this method that assert that `x` is of the given rank:\r\n *   - `tf.slice1d`\r\n *   - `tf.slice2d`\r\n *   - `tf.slice3d`\r\n *   - `tf.slice4d`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n *\r\n * x.slice([1], [2]).print();\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * x.slice([1, 0], [1, 2]).print();\r\n * ```\r\n * @param x The input `tf.Tensor` to slice from.\r\n * @param begin The coordinates to start the slice from. The length can be\r\n *     less than the rank of x - the rest of the axes will have implicit 0 as\r\n *     start. Can also be a single number, in which case it specifies the\r\n *     first axis.\r\n * @param size The size of the slice. The length can be less than the rank of\r\n *     x - the rest of the axes will have implicit -1. A value of -1 requests\r\n *     the rest of the dimensions in the axis. Can also be a single number,\r\n *     in which case it specifies the size of the first axis.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\r\n */\nfunction slice_(x, begin, size) {\n  var $x = convertToTensor(x, 'x', 'slice', 'string_or_numeric');\n  if ($x.rank === 0) {\n    throw new Error('Slicing scalar is not possible');\n  }\n  var inputs = {\n    x: $x\n  };\n  var attrs = {\n    begin: begin,\n    size: size\n  };\n  return ENGINE.runKernel(Slice, inputs, attrs);\n}\nexport var slice = /* @__PURE__ */op({\n  slice_: slice_\n});","map":{"version":3,"names":["ENGINE","Slice","convertToTensor","op","slice_","x","begin","size","$x","rank","Error","inputs","attrs","runKernel","slice"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\slice.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Slice, SliceAttrs, SliceInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {Rank, TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Extracts a slice from a `tf.Tensor` starting at coordinates `begin`\n * and is of size `size`.\n *\n * Also available are stricter rank-specific methods with the same signature\n * as this method that assert that `x` is of the given rank:\n *   - `tf.slice1d`\n *   - `tf.slice2d`\n *   - `tf.slice3d`\n *   - `tf.slice4d`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.slice([1], [2]).print();\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * x.slice([1, 0], [1, 2]).print();\n * ```\n * @param x The input `tf.Tensor` to slice from.\n * @param begin The coordinates to start the slice from. The length can be\n *     less than the rank of x - the rest of the axes will have implicit 0 as\n *     start. Can also be a single number, in which case it specifies the\n *     first axis.\n * @param size The size of the slice. The length can be less than the rank of\n *     x - the rest of the axes will have implicit -1. A value of -1 requests\n *     the rest of the dimensions in the axis. Can also be a single number,\n *     in which case it specifies the size of the first axis.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction slice_<R extends Rank, T extends Tensor<R>>(\n    x: T|TensorLike, begin: number|number[], size?: number|number[]): T {\n  const $x = convertToTensor(x, 'x', 'slice', 'string_or_numeric');\n\n  if ($x.rank === 0) {\n    throw new Error('Slicing scalar is not possible');\n  }\n\n  const inputs: SliceInputs = {x: $x};\n  const attrs: SliceAttrs = {begin, size};\n\n  return ENGINE.runKernel(\n      Slice, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const slice = /* @__PURE__ */ op({slice_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,KAAK,QAAgC,iBAAiB;AAI9D,SAAQC,eAAe,QAAO,oBAAoB;AAGlD,SAAQC,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,SAASC,MAAMA,CACXC,CAAe,EAAEC,KAAsB,EAAEC,IAAsB;EACjE,IAAMC,EAAE,GAAGN,eAAe,CAACG,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,mBAAmB,CAAC;EAEhE,IAAIG,EAAE,CAACC,IAAI,KAAK,CAAC,EAAE;IACjB,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;;EAGnD,IAAMC,MAAM,GAAgB;IAACN,CAAC,EAAEG;EAAE,CAAC;EACnC,IAAMI,KAAK,GAAe;IAACN,KAAK,EAALA,KAAK;IAAEC,IAAI,EAAJA;EAAI,CAAC;EAEvC,OAAOP,MAAM,CAACa,SAAS,CACnBZ,KAAK,EAAEU,MAAmC,EAC1CC,KAAgC,CAAC;AACvC;AAEA,OAAO,IAAME,KAAK,GAAG,eAAgBX,EAAE,CAAC;EAACC,MAAM,EAANA;AAAM,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}