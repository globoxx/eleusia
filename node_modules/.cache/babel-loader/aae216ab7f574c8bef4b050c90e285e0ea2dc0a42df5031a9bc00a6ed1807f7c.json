{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Prelu } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Computes leaky rectified linear element-wise with parametric alphas.\r\n *\r\n * `x < 0 ? alpha * x : f(x) = x`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([-1, 2, -3, 4]);\r\n * const alpha = tf.scalar(0.1);\r\n *\r\n * x.prelu(alpha).print();  // or tf.prelu(x, alpha)\r\n * ```\r\n * @param x The input tensor.\r\n * @param alpha Scaling factor for negative values.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Basic math'}\r\n */\nfunction prelu_(x, alpha) {\n  var $x = convertToTensor(x, 'x', 'prelu');\n  var $alpha = convertToTensor(alpha, 'alpha', 'prelu');\n  var inputs = {\n    x: $x,\n    alpha: $alpha\n  };\n  return ENGINE.runKernel(Prelu, inputs);\n}\nexport var prelu = /* @__PURE__ */op({\n  prelu_: prelu_\n});","map":{"version":3,"names":["ENGINE","Prelu","convertToTensor","op","prelu_","x","alpha","$x","$alpha","inputs","runKernel","prelu"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\prelu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Prelu, PreluInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes leaky rectified linear element-wise with parametric alphas.\n *\n * `x < 0 ? alpha * x : f(x) = x`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n * const alpha = tf.scalar(0.1);\n *\n * x.prelu(alpha).print();  // or tf.prelu(x, alpha)\n * ```\n * @param x The input tensor.\n * @param alpha Scaling factor for negative values.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction prelu_<T extends Tensor>(x: T|TensorLike, alpha: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'prelu');\n  const $alpha = convertToTensor(alpha, 'alpha', 'prelu');\n\n  const inputs: PreluInputs = {x: $x, alpha: $alpha};\n  return ENGINE.runKernel(Prelu, inputs as unknown as NamedTensorMap);\n}\n\nexport const prelu = /* @__PURE__ */ op({prelu_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,KAAK,QAAoB,iBAAiB;AAGlD,SAAQC,eAAe,QAAO,oBAAoB;AAGlD,SAAQC,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;;;;;;AAgBA,SAASC,MAAMA,CAAmBC,CAAe,EAAEC,KAAmB;EACpE,IAAMC,EAAE,GAAGL,eAAe,CAACG,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC;EAC3C,IAAMG,MAAM,GAAGN,eAAe,CAACI,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC;EAEvD,IAAMG,MAAM,GAAgB;IAACJ,CAAC,EAAEE,EAAE;IAAED,KAAK,EAAEE;EAAM,CAAC;EAClD,OAAOR,MAAM,CAACU,SAAS,CAACT,KAAK,EAAEQ,MAAmC,CAAC;AACrE;AAEA,OAAO,IAAME,KAAK,GAAG,eAAgBR,EAAE,CAAC;EAACC,MAAM,EAANA;AAAM,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}