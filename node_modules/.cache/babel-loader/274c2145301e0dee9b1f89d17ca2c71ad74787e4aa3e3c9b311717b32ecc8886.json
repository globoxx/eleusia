{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { DataSource } from '../datasource';\nimport { FileChunkIterator } from '../iterators/file_chunk_iterator';\nimport { isLocalPath } from '../util/source_util';\n/**\r\n * Represents a file, blob, or Uint8Array readable as a stream of binary data\r\n * chunks.\r\n */\nexport var FileDataSource = /*#__PURE__*/function (_DataSource) {\n  _inherits(FileDataSource, _DataSource);\n  var _super = _createSuper(FileDataSource);\n  /**\r\n   * Create a `FileDataSource`.\r\n   *\r\n   * @param input Local file path, or `File`/`Blob`/`Uint8Array` object to\r\n   *     read. Local file only works in node environment.\r\n   * @param options Options passed to the underlying `FileChunkIterator`s,\r\n   *   such as {chunksize: 1024}.\r\n   */\n  function FileDataSource(input) {\n    var _this;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, FileDataSource);\n    _this = _super.call(this);\n    _this.input = input;\n    _this.options = options;\n    return _this;\n  }\n  _createClass(FileDataSource, [{\n    key: \"iterator\",\n    value: function () {\n      var _iterator = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var fs;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (isLocalPath(this.input) && env().get('IS_NODE')) {\n                // tslint:disable-next-line:no-require-imports\n                fs = require('fs');\n                this.input = fs.readFileSync(this.input.slice(7));\n              }\n              // TODO(kangyizhang): Add LocalFileChunkIterator to split local streaming\n              // with file in browser.\n              return _context.abrupt(\"return\", new FileChunkIterator(this.input, this.options));\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function iterator() {\n        return _iterator.apply(this, arguments);\n      }\n      return iterator;\n    }()\n  }]);\n  return FileDataSource;\n}(DataSource);","map":{"version":3,"names":["env","DataSource","FileChunkIterator","isLocalPath","FileDataSource","_DataSource","_inherits","_super","_createSuper","input","_this","options","arguments","length","undefined","_classCallCheck","call","_createClass","key","value","_iterator","_asyncToGenerator","_regeneratorRuntime","mark","_callee","fs","wrap","_callee$","_context","prev","next","get","require","readFileSync","slice","abrupt","stop","iterator","apply"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-data\\src\\sources\\file_data_source.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\nimport {DataSource} from '../datasource';\nimport {ByteChunkIterator} from '../iterators/byte_chunk_iterator';\nimport {FileChunkIterator, FileChunkIteratorOptions} from '../iterators/file_chunk_iterator';\nimport {FileElement} from '../types';\nimport {isLocalPath} from '../util/source_util';\n\n/**\n * Represents a file, blob, or Uint8Array readable as a stream of binary data\n * chunks.\n */\nexport class FileDataSource extends DataSource {\n  /**\n   * Create a `FileDataSource`.\n   *\n   * @param input Local file path, or `File`/`Blob`/`Uint8Array` object to\n   *     read. Local file only works in node environment.\n   * @param options Options passed to the underlying `FileChunkIterator`s,\n   *   such as {chunksize: 1024}.\n   */\n  constructor(\n      protected input: FileElement|string,\n      protected readonly options: FileChunkIteratorOptions = {}) {\n    super();\n  }\n\n  async iterator(): Promise<ByteChunkIterator> {\n    if (isLocalPath(this.input) && env().get('IS_NODE')) {\n      // tslint:disable-next-line:no-require-imports\n      const fs = require('fs');\n      this.input = fs.readFileSync((this.input as string).slice(7));\n    }\n    // TODO(kangyizhang): Add LocalFileChunkIterator to split local streaming\n    // with file in browser.\n    return new FileChunkIterator(this.input as FileElement, this.options);\n  }\n}\n"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;AAkBA,SAAQA,GAAG,QAAO,uBAAuB;AACzC,SAAQC,UAAU,QAAO,eAAe;AAExC,SAAQC,iBAAiB,QAAiC,kCAAkC;AAE5F,SAAQC,WAAW,QAAO,qBAAqB;AAE/C;;;;AAIA,WAAaC,cAAe,0BAAAC,WAAA;EAAAC,SAAA,CAAAF,cAAA,EAAAC,WAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,cAAA;EAC1B;;;;;;;;EAQA,SAAAA,eACcK,KAAyB,EACsB;IAAA,IAAAC,KAAA;IAAA,IAAtCC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAoC,EAAE;IAAAG,eAAA,OAAAX,cAAA;IAC3DM,KAAA,GAAAH,MAAA,CAAAS,IAAA;IAFYN,KAAA,CAAAD,KAAK,GAALA,KAAK;IACIC,KAAA,CAAAC,OAAO,GAAPA,OAAO;IAA+B,OAAAD,KAAA;EAE7D;EAACO,YAAA,CAAAb,cAAA;IAAAc,GAAA;IAAAC,KAAA;MAAA,IAAAC,SAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAC,QAAA;QAAA,IAAAC,EAAA;QAAA,OAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cACE,IAAI3B,WAAW,CAAC,IAAI,CAACM,KAAK,CAAC,IAAIT,GAAG,EAAE,CAAC+B,GAAG,CAAC,SAAS,CAAC,EAAE;gBACnD;gBACMN,EAAE,GAAGO,OAAO,CAAC,IAAI,CAAC;gBACxB,IAAI,CAACvB,KAAK,GAAGgB,EAAE,CAACQ,YAAY,CAAE,IAAI,CAACxB,KAAgB,CAACyB,KAAK,CAAC,CAAC,CAAC,CAAC;;cAE/D;cACA;cAAA,OAAAN,QAAA,CAAAO,MAAA,WACO,IAAIjC,iBAAiB,CAAC,IAAI,CAACO,KAAoB,EAAE,IAAI,CAACE,OAAO,CAAC;YAAA;YAAA;cAAA,OAAAiB,QAAA,CAAAQ,IAAA;UAAA;QAAA,GAAAZ,OAAA;MAAA,CACtE;MAAA,SAAAa,SAAA;QAAA,OAAAjB,SAAA,CAAAkB,KAAA,OAAA1B,SAAA;MAAA;MAAA,OAAAyB,QAAA;IAAA;EAAA;EAAA,OAAAjC,cAAA;AAAA,EAxBiCH,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}