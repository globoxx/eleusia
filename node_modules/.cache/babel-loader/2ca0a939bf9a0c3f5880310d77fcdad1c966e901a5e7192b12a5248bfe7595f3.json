{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\nvar addImplCPU = shared.addImpl,\n  bincountImplCPU = shared.bincountImpl,\n  bincountReduceImplCPU = shared.bincountReduceImpl,\n  bitwiseAndImplCPU = shared.bitwiseAndImpl,\n  castImplCPU = shared.castImpl,\n  ceilImplCPU = shared.ceilImpl,\n  concatImplCPU = shared.concatImpl,\n  equalImplCPU = shared.equalImpl,\n  expImplCPU = shared.expImpl,\n  expm1ImplCPU = shared.expm1Impl,\n  floorImplCPU = shared.floorImpl,\n  gatherNdImplCPU = shared.gatherNdImpl,\n  gatherV2ImplCPU = shared.gatherV2Impl,\n  greaterImplCPU = shared.greaterImpl,\n  greaterEqualImplCPU = shared.greaterEqualImpl,\n  lessImplCPU = shared.lessImpl,\n  lessEqualImplCPU = shared.lessEqualImpl,\n  linSpaceImplCPU = shared.linSpaceImpl,\n  logImplCPU = shared.logImpl,\n  maxImplCPU = shared.maxImpl,\n  maximumImplCPU = shared.maximumImpl,\n  minimumImplCPU = shared.minimumImpl,\n  multiplyImplCPU = shared.multiplyImpl,\n  negImplCPU = shared.negImpl,\n  notEqualImplCPU = shared.notEqualImpl,\n  prodImplCPU = shared.prodImpl,\n  raggedGatherImplCPU = shared.raggedGatherImpl,\n  raggedRangeImplCPU = shared.raggedRangeImpl,\n  raggedTensorToTensorImplCPU = shared.raggedTensorToTensorImpl,\n  rangeImplCPU = shared.rangeImpl,\n  rsqrtImplCPU = shared.rsqrtImpl,\n  scatterImplCPU = shared.scatterImpl,\n  sigmoidImplCPU = shared.sigmoidImpl,\n  simpleAbsImplCPU = shared.simpleAbsImpl,\n  sliceImplCPU = shared.sliceImpl,\n  sparseFillEmptyRowsImplCPU = shared.sparseFillEmptyRowsImpl,\n  sparseReshapeImplCPU = shared.sparseReshapeImpl,\n  sparseSegmentReductionImplCPU = shared.sparseSegmentReductionImpl,\n  sqrtImplCPU = shared.sqrtImpl,\n  staticRegexReplaceImplCPU = shared.staticRegexReplaceImpl,\n  stridedSliceImplCPU = shared.stridedSliceImpl,\n  stringNGramsImplCPU = shared.stringNGramsImpl,\n  stringSplitImplCPU = shared.stringSplitImpl,\n  stringToHashBucketFastImplCPU = shared.stringToHashBucketFastImpl,\n  subImplCPU = shared.subImpl,\n  tileImplCPU = shared.tileImpl,\n  topKImplCPU = shared.topKImpl,\n  transposeImplCPU = shared.transposeImpl,\n  uniqueImplCPU = shared.uniqueImpl;\nexport { addImplCPU, bincountImplCPU, bincountReduceImplCPU, bitwiseAndImplCPU, castImplCPU, ceilImplCPU, concatImplCPU, equalImplCPU, expImplCPU, expm1ImplCPU, floorImplCPU, gatherNdImplCPU, gatherV2ImplCPU, greaterEqualImplCPU, greaterImplCPU, lessEqualImplCPU, lessImplCPU, linSpaceImplCPU, logImplCPU, maxImplCPU, maximumImplCPU, minimumImplCPU, multiplyImplCPU, negImplCPU, notEqualImplCPU, prodImplCPU, raggedGatherImplCPU, raggedRangeImplCPU, raggedTensorToTensorImplCPU, scatterImplCPU, sigmoidImplCPU, simpleAbsImplCPU, sliceImplCPU, sparseFillEmptyRowsImplCPU, sparseReshapeImplCPU, sparseSegmentReductionImplCPU, sqrtImplCPU, staticRegexReplaceImplCPU, stridedSliceImplCPU, stringNGramsImplCPU, stringSplitImplCPU, stringToHashBucketFastImplCPU, subImplCPU, rangeImplCPU, rsqrtImplCPU, tileImplCPU, topKImplCPU, transposeImplCPU, uniqueImplCPU };","map":{"version":3,"names":["shared","addImplCPU","addImpl","bincountImplCPU","bincountImpl","bincountReduceImplCPU","bincountReduceImpl","bitwiseAndImplCPU","bitwiseAndImpl","castImplCPU","castImpl","ceilImplCPU","ceilImpl","concatImplCPU","concatImpl","equalImplCPU","equalImpl","expImplCPU","expImpl","expm1ImplCPU","expm1Impl","floorImplCPU","floorImpl","gatherNdImplCPU","gatherNdImpl","gatherV2ImplCPU","gatherV2Impl","greaterImplCPU","greaterImpl","greaterEqualImplCPU","greaterEqualImpl","lessImplCPU","lessImpl","lessEqualImplCPU","lessEqualImpl","linSpaceImplCPU","linSpaceImpl","logImplCPU","logImpl","maxImplCPU","maxImpl","maximumImplCPU","maximumImpl","minimumImplCPU","minimumImpl","multiplyImplCPU","multiplyImpl","negImplCPU","negImpl","notEqualImplCPU","notEqualImpl","prodImplCPU","prodImpl","raggedGatherImplCPU","raggedGatherImpl","raggedRangeImplCPU","raggedRangeImpl","raggedTensorToTensorImplCPU","raggedTensorToTensorImpl","rangeImplCPU","rangeImpl","rsqrtImplCPU","rsqrtImpl","scatterImplCPU","scatterImpl","sigmoidImplCPU","sigmoidImpl","simpleAbsImplCPU","simpleAbsImpl","sliceImplCPU","sliceImpl","sparseFillEmptyRowsImplCPU","sparseFillEmptyRowsImpl","sparseReshapeImplCPU","sparseReshapeImpl","sparseSegmentReductionImplCPU","sparseSegmentReductionImpl","sqrtImplCPU","sqrtImpl","staticRegexReplaceImplCPU","staticRegexReplaceImpl","stridedSliceImplCPU","stridedSliceImpl","stringNGramsImplCPU","stringNGramsImpl","stringSplitImplCPU","stringSplitImpl","stringToHashBucketFastImplCPU","stringToHashBucketFastImpl","subImplCPU","subImpl","tileImplCPU","tileImpl","topKImplCPU","topKImpl","transposeImplCPU","transposeImpl","uniqueImplCPU","uniqueImpl"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\kernel_utils\\shared.ts"],"sourcesContent":["\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleBinaryKernelImpl} from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleUnaryImpl} from '@tensorflow/tfjs-backend-cpu/dist/utils/unary_types';\n\nexport type SimpleBinaryKernelImplCPU = SimpleBinaryKernelImpl;\nexport type SimpleUnaryKernelImplCPU = SimpleUnaryImpl;\nconst {\n  addImpl: addImplCPU,\n  bincountImpl: bincountImplCPU,\n  bincountReduceImpl: bincountReduceImplCPU,\n  bitwiseAndImpl: bitwiseAndImplCPU,\n  castImpl: castImplCPU,\n  ceilImpl: ceilImplCPU,\n  concatImpl: concatImplCPU,\n  equalImpl: equalImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  gatherNdImpl: gatherNdImplCPU,\n  gatherV2Impl: gatherV2ImplCPU,\n  greaterImpl: greaterImplCPU,\n  greaterEqualImpl: greaterEqualImplCPU,\n  lessImpl: lessImplCPU,\n  lessEqualImpl: lessEqualImplCPU,\n  linSpaceImpl: linSpaceImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  maximumImpl: maximumImplCPU,\n  minimumImpl: minimumImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  negImpl: negImplCPU,\n  notEqualImpl: notEqualImplCPU,\n  prodImpl: prodImplCPU,\n  raggedGatherImpl: raggedGatherImplCPU,\n  raggedRangeImpl: raggedRangeImplCPU,\n  raggedTensorToTensorImpl: raggedTensorToTensorImplCPU,\n  rangeImpl: rangeImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  scatterImpl: scatterImplCPU,\n  sigmoidImpl: sigmoidImplCPU,\n  simpleAbsImpl: simpleAbsImplCPU,\n  sliceImpl: sliceImplCPU,\n  sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU,\n  sparseReshapeImpl: sparseReshapeImplCPU,\n  sparseSegmentReductionImpl: sparseSegmentReductionImplCPU,\n  sqrtImpl: sqrtImplCPU,\n  staticRegexReplaceImpl: staticRegexReplaceImplCPU,\n  stridedSliceImpl: stridedSliceImplCPU,\n  stringNGramsImpl: stringNGramsImplCPU,\n  stringSplitImpl: stringSplitImplCPU,\n  stringToHashBucketFastImpl: stringToHashBucketFastImplCPU,\n  subImpl: subImplCPU,\n  tileImpl: tileImplCPU,\n  topKImpl: topKImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU,\n} = shared;\n\nexport {\n  addImplCPU,\n  bincountImplCPU,\n  bincountReduceImplCPU,\n  bitwiseAndImplCPU,\n  castImplCPU,\n  ceilImplCPU,\n  concatImplCPU,\n  equalImplCPU,\n  expImplCPU,\n  expm1ImplCPU,\n  floorImplCPU,\n  gatherNdImplCPU,\n  gatherV2ImplCPU,\n  greaterEqualImplCPU,\n  greaterImplCPU,\n  lessEqualImplCPU,\n  lessImplCPU,\n  linSpaceImplCPU,\n  logImplCPU,\n  maxImplCPU,\n  maximumImplCPU,\n  minimumImplCPU,\n  multiplyImplCPU,\n  negImplCPU,\n  notEqualImplCPU,\n  prodImplCPU,\n  raggedGatherImplCPU,\n  raggedRangeImplCPU,\n  raggedTensorToTensorImplCPU,\n  scatterImplCPU,\n  sigmoidImplCPU,\n  simpleAbsImplCPU,\n  sliceImplCPU,\n  sparseFillEmptyRowsImplCPU,\n  sparseReshapeImplCPU,\n  sparseSegmentReductionImplCPU,\n  sqrtImplCPU,\n  staticRegexReplaceImplCPU,\n  stridedSliceImplCPU,\n  stringNGramsImplCPU,\n  stringSplitImplCPU,\n  stringToHashBucketFastImplCPU,\n  subImplCPU,\n  rangeImplCPU,\n  rsqrtImplCPU,\n  tileImplCPU,\n  topKImplCPU,\n  transposeImplCPU,\n  uniqueImplCPU,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}