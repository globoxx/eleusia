{"ast":null,"code":"import _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */\n/* original source: keras/regularizers.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { abs, add, serialization, sum, tidy, zeros } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\nfunction assertObjectArgs(args) {\n  if (args != null && typeof args !== 'object') {\n    throw new Error(\"Argument to L1L2 regularizer's constructor is expected to be an \" + \"object, but received: \".concat(args));\n  }\n}\n/**\r\n * Regularizer base class.\r\n */\nexport var Regularizer = /*#__PURE__*/function (_serialization$Serial) {\n  _inherits(Regularizer, _serialization$Serial);\n  var _super = _createSuper(Regularizer);\n  function Regularizer() {\n    _classCallCheck(this, Regularizer);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(Regularizer);\n}(serialization.Serializable);\nexport var L1L2 = /*#__PURE__*/function (_Regularizer) {\n  _inherits(L1L2, _Regularizer);\n  var _super2 = _createSuper(L1L2);\n  function L1L2(args) {\n    var _this;\n    _classCallCheck(this, L1L2);\n    _this = _super2.call(this);\n    assertObjectArgs(args);\n    _this.l1 = args == null || args.l1 == null ? 0.01 : args.l1;\n    _this.l2 = args == null || args.l2 == null ? 0.01 : args.l2;\n    _this.hasL1 = _this.l1 !== 0;\n    _this.hasL2 = _this.l2 !== 0;\n    return _this;\n  }\n  /**\r\n   * Porting note: Renamed from __call__.\r\n   * @param x Variable of which to calculate the regularization score.\r\n   */\n  _createClass(L1L2, [{\n    key: \"apply\",\n    value: function apply(x) {\n      var _this2 = this;\n      return tidy(function () {\n        var regularization = zeros([1]);\n        if (_this2.hasL1) {\n          regularization = add(regularization, sum(tfc.mul(_this2.l1, abs(x))));\n        }\n        if (_this2.hasL2) {\n          regularization = add(regularization, sum(tfc.mul(_this2.l2, K.square(x))));\n        }\n        return tfc.reshape(regularization, []);\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        'l1': this.l1,\n        'l2': this.l2\n      };\n    }\n    /** @nocollapse */\n  }], [{\n    key: \"fromConfig\",\n    value: function fromConfig(cls, config) {\n      return new cls({\n        l1: config['l1'],\n        l2: config['l2']\n      });\n    }\n  }]);\n  return L1L2;\n}(Regularizer);\n/** @nocollapse */\nL1L2.className = 'L1L2';\nserialization.registerClass(L1L2);\nexport function l1(args) {\n  assertObjectArgs(args);\n  return new L1L2({\n    l1: args != null ? args.l1 : null,\n    l2: 0\n  });\n}\nexport function l2(args) {\n  assertObjectArgs(args);\n  return new L1L2({\n    l2: args != null ? args.l2 : null,\n    l1: 0\n  });\n}\n// Maps the JavaScript-like identifier keys to the corresponding keras symbols.\nexport var REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n  'l1l2': 'L1L2'\n};\nexport function serializeRegularizer(constraint) {\n  return serializeKerasObject(constraint);\n}\nexport function deserializeRegularizer(config) {\n  var customObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'regularizer');\n}\nexport function getRegularizer(identifier) {\n  if (identifier == null) {\n    return null;\n  }\n  if (typeof identifier === 'string') {\n    var className = identifier in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n    var config = {\n      className: className,\n      config: {}\n    };\n    return deserializeRegularizer(config);\n  } else if (identifier instanceof Regularizer) {\n    return identifier;\n  } else {\n    return deserializeRegularizer(identifier);\n  }\n}","map":{"version":3,"names":["tfc","abs","add","serialization","sum","tidy","zeros","K","deserializeKerasObject","serializeKerasObject","assertObjectArgs","args","Error","concat","Regularizer","_serialization$Serial","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","Serializable","L1L2","_Regularizer","_super2","_this","call","l1","l2","hasL1","hasL2","key","value","x","_this2","regularization","mul","square","reshape","getConfig","fromConfig","cls","config","className","registerClass","REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP","serializeRegularizer","constraint","deserializeRegularizer","customObjects","length","undefined","SerializationMap","getMap","classNameMap","getRegularizer","identifier"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-layers\\src\\regularizers.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* original source: keras/regularizers.py */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {abs, add, Scalar, serialization, sum, Tensor, tidy, zeros} from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport {deserializeKerasObject, serializeKerasObject} from './utils/generic_utils';\n\nfunction assertObjectArgs(args: L1Args|L2Args|L1L2Args): void {\n  if (args != null && typeof args !== 'object') {\n    throw new Error(\n        `Argument to L1L2 regularizer's constructor is expected to be an ` +\n        `object, but received: ${args}`);\n  }\n}\n\n/**\n * Regularizer base class.\n */\nexport abstract class Regularizer extends serialization.Serializable {\n  abstract apply(x: Tensor): Scalar;\n}\n\nexport interface L1L2Args {\n  /** L1 regularization rate. Defaults to 0.01. */\n  l1?: number;\n  /** L2 regularization rate. Defaults to 0.01. */\n  l2?: number;\n}\n\nexport interface L1Args {\n  /** L1 regularization rate. Defaults to 0.01. */\n  l1: number;\n}\n\nexport interface L2Args {\n  /** L2 regularization rate. Defaults to 0.01. */\n  l2: number;\n}\n\nexport class L1L2 extends Regularizer {\n  /** @nocollapse */\n  static className = 'L1L2';\n\n  private readonly l1: number;\n  private readonly l2: number;\n  private readonly hasL1: boolean;\n  private readonly hasL2: boolean;\n  constructor(args?: L1L2Args) {\n    super();\n\n    assertObjectArgs(args);\n\n    this.l1 = args == null || args.l1 == null ? 0.01 : args.l1;\n    this.l2 = args == null || args.l2 == null ? 0.01 : args.l2;\n    this.hasL1 = this.l1 !== 0;\n    this.hasL2 = this.l2 !== 0;\n  }\n\n  /**\n   * Porting note: Renamed from __call__.\n   * @param x Variable of which to calculate the regularization score.\n   */\n  apply(x: Tensor): Scalar {\n    return tidy(() => {\n      let regularization: Tensor = zeros([1]);\n      if (this.hasL1) {\n        regularization = add(regularization, sum(tfc.mul(this.l1, abs(x))));\n      }\n      if (this.hasL2) {\n        regularization =\n            add(regularization, sum(tfc.mul(this.l2, K.square(x))));\n      }\n      return tfc.reshape(regularization, []);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {'l1': this.l1, 'l2': this.l2};\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    return new cls({l1: config['l1'] as number, l2: config['l2'] as number});\n  }\n}\nserialization.registerClass(L1L2);\n\nexport function l1(args?: L1Args) {\n  assertObjectArgs(args);\n  return new L1L2({l1: args != null ? args.l1 : null, l2: 0});\n}\n\nexport function l2(args: L2Args) {\n  assertObjectArgs(args);\n  return new L1L2({l2: args != null ? args.l2 : null, l1: 0});\n}\n\n/** @docinline */\nexport type RegularizerIdentifier = 'l1l2'|string;\n\n// Maps the JavaScript-like identifier keys to the corresponding keras symbols.\nexport const REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP:\n    {[identifier in RegularizerIdentifier]: string} = {\n      'l1l2': 'L1L2'\n    };\n\nexport function serializeRegularizer(constraint: Regularizer):\n    serialization.ConfigDictValue {\n  return serializeKerasObject(constraint);\n}\n\nexport function deserializeRegularizer(\n    config: serialization.ConfigDict,\n    customObjects: serialization.ConfigDict = {}): Regularizer {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'regularizer');\n}\n\nexport function getRegularizer(identifier: RegularizerIdentifier|\n                               serialization.ConfigDict|\n                               Regularizer): Regularizer {\n  if (identifier == null) {\n    return null;\n  }\n  if (typeof identifier === 'string') {\n    const className = identifier in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n        REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n        identifier;\n    const config = {className, config: {}};\n    return deserializeRegularizer(config);\n  } else if (identifier instanceof Regularizer) {\n    return identifier;\n  } else {\n    return deserializeRegularizer(identifier);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}