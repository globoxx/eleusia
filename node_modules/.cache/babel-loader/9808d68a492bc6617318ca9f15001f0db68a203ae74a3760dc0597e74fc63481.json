{"ast":null,"code":"import _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport var MirrorPadProgram = /*#__PURE__*/_createClass(function MirrorPadProgram(xShape, paddings, mode) {\n  _classCallCheck(this, MirrorPadProgram);\n  this.variableNames = ['x'];\n  this.outputShape = paddings.map(function (p, i) {\n    return p[0] /* beforePad */ + xShape[i] + p[1];\n  } /* afterPad */);\n  var rank = xShape.length;\n  var dtype = getCoordsDataType(rank);\n  var start = paddings.map(function (p) {\n    return p[0];\n  }).join(',');\n  var end = paddings.map(function (p, i) {\n    return p[0] + xShape[i];\n  }).join(',');\n  var unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n  var offset = mode === 'reflect' ? 0 : 1;\n  if (rank === 1) {\n    this.userCode = \"\\n        int start = \".concat(start, \";\\n        int end = \").concat(end, \";\\n\\n        void main() {\\n          int outC = getOutputCoords();\\n          if (outC < start) {\\n            outC = start * 2 - outC - \").concat(offset, \";\\n          } else if(outC >= end) {\\n            outC = (end - 1) * 2 - outC + \").concat(offset, \";\\n          }\\n          setOutput(getX(outC - start));\\n        }\\n      \");\n    return;\n  }\n  this.userCode = \"\\n      \".concat(dtype, \" start = \").concat(dtype, \"(\").concat(start, \");\\n      \").concat(dtype, \" end = \").concat(dtype, \"(\").concat(end, \");\\n\\n      void main() {\\n        \").concat(dtype, \" outC = getOutputCoords();\\n        for (int i = 0; i < \").concat(rank, \"; i++) {\\n          if (outC[i] < start[i]) {\\n            outC[i] = start[i] * 2 - outC[i] - \").concat(offset, \";\\n          } else if(outC[i] >= end[i]) {\\n            outC[i] = (end[i] - 1) * 2 - outC[i] + \").concat(offset, \";\\n          }\\n        }\\n        \").concat(dtype, \" coords = outC - start;\\n        setOutput(getX(\").concat(unpackedCoords, \"));\\n      }\\n    \");\n});","map":{"version":3,"names":["getCoordsDataType","MirrorPadProgram","_createClass","xShape","paddings","mode","_classCallCheck","variableNames","outputShape","map","p","i","rank","length","dtype","start","join","end","unpackedCoords","slice","offset","userCode","concat"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\mirror_pad_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class MirrorPadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${offset};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${offset};\n          }\n          setOutput(getX(outC - start));\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${dtype} start = ${dtype}(${start});\n      ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outC = getOutputCoords();\n        for (int i = 0; i < ${rank}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${offset};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};\n          }\n        }\n        ${dtype} coords = outC - start;\n        setOutput(getX(${unpackedCoords}));\n      }\n    `;\n  }\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,iBAAiB,QAAO,mBAAmB;AAEnD,WAAaC,gBAAgB,gBAAAC,YAAA,CAK3B,SAAAD,iBACIE,MAAgB,EAAEC,QAAiC,EACnDC,IAA2B;EAAAC,eAAA,OAAAL,gBAAA;EAN/B,KAAAM,aAAa,GAAG,CAAC,GAAG,CAAC;EAOnB,IAAI,CAACC,WAAW,GAAGJ,QAAQ,CAACK,GAAG,CAC3B,UAACC,CAAC,EAAEC,CAAC;IAAA,OAAKD,CAAC,CAAC,CAAC,CAAC,CAAC,kBAAkBP,MAAM,CAACQ,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;EAAA,EAAC,eAAe;EACrE,IAAME,IAAI,GAAGT,MAAM,CAACU,MAAM;EAC1B,IAAMC,KAAK,GAAGd,iBAAiB,CAACY,IAAI,CAAC;EAErC,IAAMG,KAAK,GAAGX,QAAQ,CAACK,GAAG,CAAC,UAAAC,CAAC;IAAA,OAAIA,CAAC,CAAC,CAAC,CAAC;EAAA,EAAC,CAACM,IAAI,CAAC,GAAG,CAAC;EAC/C,IAAMC,GAAG,GAAGb,QAAQ,CAACK,GAAG,CAAC,UAACC,CAAC,EAAEC,CAAC;IAAA,OAAKD,CAAC,CAAC,CAAC,CAAC,GAAGP,MAAM,CAACQ,CAAC,CAAC;EAAA,EAAC,CAACK,IAAI,CAAC,GAAG,CAAC;EAC9D,IAAME,cAAc,GAChB,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,CAAC,CAACC,KAAK,CAAC,CAAC,EAAEP,IAAI,CAAC;EACvE,IAAMQ,MAAM,GAAGf,IAAI,KAAK,SAAS,GAAG,CAAC,GAAG,CAAC;EAEzC,IAAIO,IAAI,KAAK,CAAC,EAAE;IACd,IAAI,CAACS,QAAQ,4BAAAC,MAAA,CACGP,KAAK,2BAAAO,MAAA,CACPL,GAAG,gJAAAK,MAAA,CAKiBF,MAAM,uFAAAE,MAAA,CAEFF,MAAM,gFAI3C;IACD;;EAEF,IAAI,CAACC,QAAQ,cAAAC,MAAA,CACTR,KAAK,eAAAQ,MAAA,CAAYR,KAAK,OAAAQ,MAAA,CAAIP,KAAK,gBAAAO,MAAA,CAC/BR,KAAK,aAAAQ,MAAA,CAAUR,KAAK,OAAAQ,MAAA,CAAIL,GAAG,yCAAAK,MAAA,CAGzBR,KAAK,8DAAAQ,MAAA,CACeV,IAAI,oGAAAU,MAAA,CAEeF,MAAM,sGAAAE,MAAA,CAEFF,MAAM,yCAAAE,MAAA,CAGjDR,KAAK,sDAAAQ,MAAA,CACUJ,cAAc,uBAElC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}