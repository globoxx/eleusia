{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Prelu } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nvar preluImpl = createSimpleBinaryKernelImpl(function (xValue, aValue) {\n  return xValue < 0 ? aValue * xValue : xValue;\n});\nexport function prelu(args) {\n  var inputs = args.inputs,\n    backend = args.backend;\n  var x = inputs.x,\n    alpha = inputs.alpha;\n  assertNotComplex([x, alpha], 'prelu');\n  var aVals = backend.data.get(x.dataId).values;\n  var bVals = backend.data.get(alpha.dataId).values;\n  var _preluImpl = preluImpl(x.shape, alpha.shape, aVals, bVals, 'float32'),\n    _preluImpl2 = _slicedToArray(_preluImpl, 2),\n    resultData = _preluImpl2[0],\n    resultShape = _preluImpl2[1];\n  return backend.makeTensorInfo(resultShape, 'float32', resultData);\n}\nexport var preluConfig = {\n  kernelName: Prelu,\n  backendName: 'cpu',\n  kernelFunc: prelu\n};","map":{"version":3,"names":["Prelu","assertNotComplex","createSimpleBinaryKernelImpl","preluImpl","xValue","aValue","prelu","args","inputs","backend","x","alpha","aVals","data","get","dataId","values","bVals","_preluImpl","shape","_preluImpl2","_slicedToArray","resultData","resultShape","makeTensorInfo","preluConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-cpu\\src\\kernels\\Prelu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Prelu, PreluInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\n\nconst preluImpl = createSimpleBinaryKernelImpl(\n    (xValue: number, aValue: number) => xValue < 0 ? aValue * xValue : xValue);\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  assertNotComplex([x, alpha], 'prelu');\n\n  const aVals = backend.data.get(x.dataId).values as TypedArray;\n  const bVals = backend.data.get(alpha.dataId).values as TypedArray;\n\n  const [resultData, resultShape] =\n      preluImpl(x.shape, alpha.shape, aVals, bVals, 'float32');\n\n  return backend.makeTensorInfo(resultShape, 'float32', resultData);\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'cpu',\n  kernelFunc: prelu,\n};\n"],"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAsBA,KAAK,QAA4C,uBAAuB;AAG9F,SAAQC,gBAAgB,QAAO,aAAa;AAC5C,SAAQC,4BAA4B,QAAO,sBAAsB;AAEjE,IAAMC,SAAS,GAAGD,4BAA4B,CAC1C,UAACE,MAAc,EAAEC,MAAc;EAAA,OAAKD,MAAM,GAAG,CAAC,GAAGC,MAAM,GAAGD,MAAM,GAAGA,MAAM;AAAA,EAAC;AAE9E,OAAM,SAAUE,KAAKA,CAACC,IAAoD;EAExE,IAAOC,MAAM,GAAaD,IAAI,CAAvBC,MAAM;IAAEC,OAAO,GAAIF,IAAI,CAAfE,OAAO;EACtB,IAAOC,CAAC,GAAWF,MAAM,CAAlBE,CAAC;IAAEC,KAAK,GAAIH,MAAM,CAAfG,KAAK;EAEfV,gBAAgB,CAAC,CAACS,CAAC,EAAEC,KAAK,CAAC,EAAE,OAAO,CAAC;EAErC,IAAMC,KAAK,GAAGH,OAAO,CAACI,IAAI,CAACC,GAAG,CAACJ,CAAC,CAACK,MAAM,CAAC,CAACC,MAAoB;EAC7D,IAAMC,KAAK,GAAGR,OAAO,CAACI,IAAI,CAACC,GAAG,CAACH,KAAK,CAACI,MAAM,CAAC,CAACC,MAAoB;EAEjE,IAAAE,UAAA,GACIf,SAAS,CAACO,CAAC,CAACS,KAAK,EAAER,KAAK,CAACQ,KAAK,EAAEP,KAAK,EAAEK,KAAK,EAAE,SAAS,CAAC;IAAAG,WAAA,GAAAC,cAAA,CAAAH,UAAA;IADrDI,UAAU,GAAAF,WAAA;IAAEG,WAAW,GAAAH,WAAA;EAG9B,OAAOX,OAAO,CAACe,cAAc,CAACD,WAAW,EAAE,SAAS,EAAED,UAAU,CAAC;AACnE;AAEA,OAAO,IAAMG,WAAW,GAAiB;EACvCC,UAAU,EAAE1B,KAAK;EACjB2B,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAEtB;CACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}