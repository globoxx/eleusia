{"ast":null,"code":"import _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport var GatherProgram = /*#__PURE__*/_createClass(function GatherProgram(aShape, outputShape) {\n  _classCallCheck(this, GatherProgram);\n  this.variableNames = ['A', 'indices'];\n  this.outputShape = outputShape;\n  this.rank = outputShape.length;\n  var dtype = getCoordsDataType(this.rank);\n  var sourceCoords = getSourceCoords(aShape, 2);\n  this.userCode = \"\\n      void main() {\\n        \".concat(dtype, \" resRC = getOutputCoords();\\n        int index = int(getIndices(resRC.x, resRC.z));\\n        float inBounds = (index >= 0) && (index < \").concat(aShape[2], \") ? 1.0 : 0.0;\\n        setOutput(inBounds * getA(\").concat(sourceCoords, \"));\\n      }\\n    \");\n});\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape, axis) {\n  var currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n  var sourceCoords = [];\n  for (var i = 0; i < aShape.length; i++) {\n    if (i === 2) {\n      sourceCoords.push('index');\n    } else {\n      sourceCoords.push(\"\".concat(currentCoords[i]));\n    }\n  }\n  return sourceCoords.join();\n}","map":{"version":3,"names":["getCoordsDataType","GatherProgram","_createClass","aShape","outputShape","_classCallCheck","variableNames","rank","length","dtype","sourceCoords","getSourceCoords","userCode","concat","axis","currentCoords","i","push","join"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\gather_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport type GatherShape = [number, number, number, number];\n\nexport class GatherProgram implements GPGPUProgram {\n  variableNames = ['A', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: GatherShape, outputShape: GatherShape) {\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape, 2);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${aShape[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape: GatherShape, axis: number): string {\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === 2) {\n      sourceCoords.push('index');\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,iBAAiB,QAAO,mBAAmB;AAInD,WAAaC,aAAa,gBAAAC,YAAA,CAMxB,SAAAD,cAAYE,MAAmB,EAAEC,WAAwB;EAAAC,eAAA,OAAAJ,aAAA;EALzD,KAAAK,aAAa,GAAG,CAAC,GAAG,EAAE,SAAS,CAAC;EAM9B,IAAI,CAACF,WAAW,GAAGA,WAAW;EAC9B,IAAI,CAACG,IAAI,GAAGH,WAAW,CAACI,MAAM;EAC9B,IAAMC,KAAK,GAAGT,iBAAiB,CAAC,IAAI,CAACO,IAAI,CAAC;EAC1C,IAAMG,YAAY,GAAGC,eAAe,CAACR,MAAM,EAAE,CAAC,CAAC;EAE/C,IAAI,CAACS,QAAQ,qCAAAC,MAAA,CAEPJ,KAAK,6IAAAI,MAAA,CAEqCV,MAAM,CAAC,CAAC,CAAC,wDAAAU,MAAA,CACzBH,YAAY,uBAE3C;AACH,CAAC;AAGH;AACA,SAASC,eAAeA,CAACR,MAAmB,EAAEW,IAAY;EACxD,IAAMC,aAAa,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;EAElE,IAAML,YAAY,GAAG,EAAE;EACvB,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,MAAM,CAACK,MAAM,EAAEQ,CAAC,EAAE,EAAE;IACtC,IAAIA,CAAC,KAAK,CAAC,EAAE;MACXN,YAAY,CAACO,IAAI,CAAC,OAAO,CAAC;KAC3B,MAAM;MACLP,YAAY,CAACO,IAAI,IAAAJ,MAAA,CAAIE,aAAa,CAACC,CAAC,CAAC,EAAG;;;EAG5C,OAAON,YAAY,CAACQ,IAAI,EAAE;AAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}