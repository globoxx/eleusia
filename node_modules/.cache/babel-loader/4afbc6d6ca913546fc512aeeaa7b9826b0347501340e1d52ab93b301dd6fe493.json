{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { nonMaxSuppressionV4Impl } from '../../backends/non_max_suppression_impl';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { scalar } from '../scalar';\nimport { tensor1d } from '../tensor1d';\n/**\r\n * Asynchronously performs non maximum suppression of bounding boxes based on\r\n * iou (intersection over union), with an option to pad results.\r\n *\r\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\r\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\r\n *     the bounding box.\r\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\r\n * @param maxOutputSize The maximum number of boxes to be selected.\r\n * @param iouThreshold A float representing the threshold for deciding whether\r\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\r\n *     Defaults to 0.5 (50% box overlap).\r\n * @param scoreThreshold A threshold for deciding when to remove boxes based\r\n *     on score. Defaults to -inf, which means any score is accepted.\r\n * @param padToMaxOutputSize Defaults to false. If true, size of output\r\n *     `selectedIndices` is padded to maxOutputSize.\r\n * @return A map with the following properties:\r\n *     - selectedIndices: A 1D tensor with the selected box indices.\r\n *     - validOutputs: A scalar denoting how many elements in `selectedIndices`\r\n *       are valid. Valid elements occur first, then padding.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\r\n */\nfunction nonMaxSuppressionPaddedAsync_(_x, _x2, _x3) {\n  return _nonMaxSuppressionPaddedAsync_.apply(this, arguments);\n}\nfunction _nonMaxSuppressionPaddedAsync_() {\n  _nonMaxSuppressionPaddedAsync_ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(boxes, scores, maxOutputSize) {\n    var iouThreshold,\n      scoreThreshold,\n      padToMaxOutputSize,\n      $boxes,\n      $scores,\n      params,\n      $maxOutputSize,\n      $iouThreshold,\n      $scoreThreshold,\n      _yield$Promise$all,\n      _yield$Promise$all2,\n      boxesVals,\n      scoresVals,\n      _nonMaxSuppressionV4I,\n      selectedIndices,\n      validOutputs,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          iouThreshold = _args.length > 3 && _args[3] !== undefined ? _args[3] : 0.5;\n          scoreThreshold = _args.length > 4 && _args[4] !== undefined ? _args[4] : Number.NEGATIVE_INFINITY;\n          padToMaxOutputSize = _args.length > 5 && _args[5] !== undefined ? _args[5] : false;\n          $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n          $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n          params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null /* softNmsSigma */);\n          $maxOutputSize = params.maxOutputSize;\n          $iouThreshold = params.iouThreshold;\n          $scoreThreshold = params.scoreThreshold;\n          _context.next = 11;\n          return Promise.all([$boxes.data(), $scores.data()]);\n        case 11:\n          _yield$Promise$all = _context.sent;\n          _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n          boxesVals = _yield$Promise$all2[0];\n          scoresVals = _yield$Promise$all2[1];\n          // We call a cpu based impl directly with the typedarray data here rather\n          // than a kernel because all kernels are synchronous (and thus cannot await\n          // .data()).\n          _nonMaxSuppressionV4I = nonMaxSuppressionV4Impl(boxesVals, scoresVals, $maxOutputSize, $iouThreshold, $scoreThreshold, padToMaxOutputSize), selectedIndices = _nonMaxSuppressionV4I.selectedIndices, validOutputs = _nonMaxSuppressionV4I.validOutputs;\n          if ($boxes !== boxes) {\n            $boxes.dispose();\n          }\n          if ($scores !== scores) {\n            $scores.dispose();\n          }\n          return _context.abrupt(\"return\", {\n            selectedIndices: tensor1d(selectedIndices, 'int32'),\n            validOutputs: scalar(validOutputs, 'int32')\n          });\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _nonMaxSuppressionPaddedAsync_.apply(this, arguments);\n}\nexport var nonMaxSuppressionPaddedAsync = nonMaxSuppressionPaddedAsync_;","map":{"version":3,"names":["nonMaxSuppressionV4Impl","convertToTensor","nonMaxSuppSanityCheck","scalar","tensor1d","nonMaxSuppressionPaddedAsync_","_x","_x2","_x3","_nonMaxSuppressionPaddedAsync_","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","padToMaxOutputSize","$boxes","$scores","params","$maxOutputSize","$iouThreshold","$scoreThreshold","_yield$Promise$all","_yield$Promise$all2","boxesVals","scoresVals","_nonMaxSuppressionV4I","selectedIndices","validOutputs","_args","wrap","_callee$","_context","prev","next","length","undefined","Number","NEGATIVE_INFINITY","Promise","all","data","sent","_slicedToArray","dispose","abrupt","stop","nonMaxSuppressionPaddedAsync"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\image\\non_max_suppression_padded_async.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {nonMaxSuppressionV4Impl} from '../../backends/non_max_suppression_impl';\nimport {Tensor1D, Tensor2D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {nonMaxSuppSanityCheck} from '../nonmax_util';\nimport {scalar} from '../scalar';\nimport {tensor1d} from '../tensor1d';\n\n/**\n * Asynchronously performs non maximum suppression of bounding boxes based on\n * iou (intersection over union), with an option to pad results.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param padToMaxOutputSize Defaults to false. If true, size of output\n *     `selectedIndices` is padded to maxOutputSize.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - validOutputs: A scalar denoting how many elements in `selectedIndices`\n *       are valid. Valid elements occur first, then padding.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nasync function nonMaxSuppressionPaddedAsync_(\n    boxes: Tensor2D|TensorLike, scores: Tensor1D|TensorLike,\n    maxOutputSize: number, iouThreshold = 0.5,\n    scoreThreshold = Number.NEGATIVE_INFINITY,\n    padToMaxOutputSize = false): Promise<NamedTensorMap> {\n  const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n  const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n\n  const params = nonMaxSuppSanityCheck(\n      $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold,\n      null /* softNmsSigma */);\n  const $maxOutputSize = params.maxOutputSize;\n  const $iouThreshold = params.iouThreshold;\n  const $scoreThreshold = params.scoreThreshold;\n\n  const [boxesVals, scoresVals] =\n      await Promise.all([$boxes.data(), $scores.data()]);\n\n  // We call a cpu based impl directly with the typedarray data here rather\n  // than a kernel because all kernels are synchronous (and thus cannot await\n  // .data()).\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, $maxOutputSize, $iouThreshold, $scoreThreshold,\n      padToMaxOutputSize);\n\n  if ($boxes !== boxes) {\n    $boxes.dispose();\n  }\n  if ($scores !== scores) {\n    $scores.dispose();\n  }\n\n  return {\n    selectedIndices: tensor1d(selectedIndices, 'int32'),\n    validOutputs: scalar(validOutputs, 'int32')\n  };\n}\n\nexport const nonMaxSuppressionPaddedAsync = nonMaxSuppressionPaddedAsync_;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}