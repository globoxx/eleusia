{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nvar getBroadcastDims = backend_util.getBroadcastDims;\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nexport function makeShader(inputsInfo, outputShape, program) {\n  var prefixSnippets = [];\n  inputsInfo.forEach(function (x) {\n    var size = util.sizeFromShape(x.shapeInfo.logicalShape);\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\"uniform float \".concat(x.name).concat(size > 1 ? \"[\".concat(size, \"]\") : '', \";\"));\n    } else {\n      prefixSnippets.push(\"uniform sampler2D \".concat(x.name, \";\"));\n      prefixSnippets.push(\"uniform int offset\".concat(x.name, \";\"));\n    }\n    if (program.enableShapeUniforms) {\n      var _getUniformInfoFromSh = getUniformInfoFromShape(program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape),\n        uniformShape = _getUniformInfoFromSh.uniformShape;\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(\"uniform int \".concat(x.name, \"Shape;\"));\n          break;\n        case 2:\n          prefixSnippets.push(\"uniform ivec2 \".concat(x.name, \"Shape;\"));\n          break;\n        case 3:\n          prefixSnippets.push(\"uniform ivec3 \".concat(x.name, \"Shape;\"));\n          break;\n        case 4:\n          prefixSnippets.push(\"uniform ivec4 \".concat(x.name, \"Shape;\"));\n          break;\n        default:\n          break;\n      }\n      prefixSnippets.push(\"uniform ivec2 \".concat(x.name, \"TexShape;\"));\n    }\n  });\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(\"uniform int outShape;\");\n        break;\n      case 2:\n        prefixSnippets.push(\"uniform ivec2 outShape;\");\n        prefixSnippets.push(\"uniform int outShapeStrides;\");\n        break;\n      case 3:\n        prefixSnippets.push(\"uniform ivec3 outShape;\");\n        prefixSnippets.push(\"uniform ivec2 outShapeStrides;\");\n        break;\n      case 4:\n        prefixSnippets.push(\"uniform ivec4 outShape;\");\n        prefixSnippets.push(\"uniform ivec3 outShapeStrides;\");\n        break;\n      default:\n        break;\n    }\n    prefixSnippets.push(\"uniform ivec2 outTexShape;\");\n  }\n  if (program.customUniforms) {\n    program.customUniforms.forEach(function (d) {\n      prefixSnippets.push(\"uniform \".concat(d.type, \" \").concat(d.name).concat(d.arrayIndex ? \"[\".concat(d.arrayIndex, \"]\") : '', \";\"));\n    });\n  }\n  var inputPrefixSnippet = prefixSnippets.join('\\n');\n  var inputSamplingSnippet = inputsInfo.map(function (x) {\n    return getInputSamplingSnippet(x, outputShape, program.packedInputs, program.enableShapeUniforms);\n  }).join('\\n');\n  var outTexShape = outputShape.texShape;\n  var glsl = getGlslDifferences();\n  var floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  var outputSamplingSnippet;\n  var floatTextureSetOutputSnippet;\n  var shaderPrefix = getShaderPrefix(glsl);\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n  var source = [shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet, inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, program.userCode].join('\\n');\n  return source;\n}\nfunction getSamplerFromInInfo(inInfo) {\n  var enableShapeUniforms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\"\".concat(shape.length, \"-D input sampling\") + \" is not yet supported\");\n  }\n}\nfunction getPackedSamplerFromInInfo(inInfo, enableShapeUniforms) {\n  var shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\nfunction getInputSamplingSnippet(inInfo, outShapeInfo) {\n  var usesPackedTextures = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var enableShapeUniforms = arguments.length > 3 ? arguments[3] : undefined;\n  var res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n  var inShape = inInfo.shapeInfo.logicalShape;\n  var outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\nfunction getPackedOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutputPacked2DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutputPacked3DCoords(outShape, outTexShape, enableShapeUniforms);\n    default:\n      return getOutputPackedNDCoords(outShape, outTexShape, enableShapeUniforms);\n  }\n}\nfunction getOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutput2DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutput3DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 4:\n      return getOutput4DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 5:\n      return getOutput5DCoords(outShape, outTexShape);\n    case 6:\n      return getOutput6DCoords(outShape, outTexShape);\n    default:\n      throw new Error(\"\".concat(outShape.length, \"-D output sampling is not yet supported\"));\n  }\n}\nfunction getFloatTextureSampleSnippet(glsl) {\n  return \"\\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\\n      return \".concat(glsl.texture2D, \"(textureSampler, uv).r;\\n    }\\n  \");\n}\nfunction getFloatTextureSetRSnippet(glsl) {\n  return \"\\n    void setOutput(float val) {\\n      \".concat(glsl.output, \" = vec4(val, 0, 0, 0);\\n    }\\n  \");\n}\nfunction getFloatTextureSetRGBASnippet(glsl) {\n  return \"\\n    void setOutput(vec4 val) {\\n      \".concat(glsl.output, \" = val;\\n    }\\n  \");\n}\nfunction getShaderPrefix(glsl) {\n  var SHADER_PREFIX = \"\".concat(glsl.version, \"\\n    precision highp float;\\n    precision highp int;\\n    precision highp sampler2D;\\n    \").concat(glsl.varyingFs, \" vec2 resultUV;\\n    \").concat(glsl.defineOutput, \"\\n    const vec2 halfCR = vec2(0.5, 0.5);\\n\\n    struct ivec5\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n    };\\n\\n    struct ivec6\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n      int v;\\n    };\\n\\n    uniform float NAN;\\n    \").concat(glsl.defineSpecialNaN, \"\\n    \").concat(glsl.defineSpecialInf, \"\\n    \").concat(glsl.defineRound, \"\\n\\n    int imod(int x, int y) {\\n      return x - y * (x / y);\\n    }\\n\\n    int idiv(int a, int b, float sign) {\\n      int res = a / b;\\n      int mod = imod(a, b);\\n      if (sign < 0. && mod != 0) {\\n        res -= 1;\\n      }\\n      return res;\\n    }\\n\\n    //Based on the work of Dave Hoskins\\n    //https://www.shadertoy.com/view/4djSRW\\n    #define HASHSCALE1 443.8975\\n    float random(float seed){\\n      vec2 p = resultUV * seed;\\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\\n      p3 += dot(p3, p3.yzx + 19.19);\\n      return fract((p3.x + p3.y) * p3.z);\\n    }\\n\\n    \").concat(SAMPLE_1D_SNIPPET, \"\\n    \").concat(SAMPLE_2D_SNIPPET, \"\\n    \").concat(SAMPLE_3D_SNIPPET, \"\\n  \");\n  return SHADER_PREFIX;\n}\nvar SAMPLE_1D_SNIPPET = \"\\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\\n  int texelIndex = index / 2;\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SAMPLE_2D_SNIPPET = \"\\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\\n  int texNumC, int row, int col) {\\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SAMPLE_3D_SNIPPET = \"\\nvec2 packedUVfrom3D(int texNumR, int texNumC,\\n    int texelsInBatch, int texelsInLogicalRow, int b,\\n    int row, int col) {\\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SHADER_PACKED_PREFIX = \"\\n  float getChannel(vec4 frag, vec2 innerDims) {\\n    vec2 modCoord = mod(innerDims, 2.);\\n    return modCoord.x == 0. ?\\n      (modCoord.y == 0. ? frag.r : frag.g) :\\n      (modCoord.y == 0. ? frag.b : frag.a);\\n  }\\n  float getChannel(vec4 frag, int dim) {\\n    float modCoord = mod(float(dim), 2.);\\n    return modCoord == 0. ? frag.r : frag.g;\\n  }\\n\";\nfunction getOutputScalarCoords() {\n  return \"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  \";\n}\nfunction getOutputPacked1DCoords(shape, texShape, enableShapeUniforms) {\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\\n      }\\n    \";\n    }\n    return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.x * \".concat(packedTexShape[1], \".0);\\n      }\\n    \");\n  }\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\\n      }\\n    \";\n    }\n    return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.y * \".concat(packedTexShape[0], \".0);\\n      }\\n    \");\n  }\n  if (enableShapeUniforms) {\n    return \"\\n    int getOutputCoords() {\\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(packedTexShape[0], packedTexShape[1]));\\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\\n    }\\n  \";\n  }\n  return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n      return 2 * (resTexRC.x * \").concat(packedTexShape[1], \" + resTexRC.y);\\n    }\\n  \");\n}\nfunction getOutput1DCoords(shape, texShape, enableShapeUniforms) {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      int getOutputCoords() {\\n        return int(resultUV.x * float(outTexShape[1]));\\n      }\\n    \";\n    }\n    return \"\\n      int getOutputCoords() {\\n        return int(resultUV.x * \".concat(texShape[1], \".0);\\n      }\\n    \");\n  }\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      int getOutputCoords() {\\n        return int(resultUV.y * float(outTexShape[0]));\\n      }\\n    \";\n    }\n    return \"\\n      int getOutputCoords() {\\n        return int(resultUV.y * \".concat(texShape[0], \".0);\\n      }\\n    \");\n  }\n  if (enableShapeUniforms) {\n    return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(outTexShape[0], outTexShape[1]));\\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\\n    }\\n  \";\n  }\n  return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      return resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n    }\\n  \");\n}\nfunction getOutputPacked3DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    return \"\\n    ivec3 getOutputCoords() {\\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(packedTexShape[0], packedTexShape[1]));\\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\\n\\n      int b = index / texelsInBatch;\\n      index -= b * texelsInBatch;\\n\\n      int r = 2 * (index / texelsInLogicalRow);\\n      int c = imod(index, texelsInLogicalRow) * 2;\\n\\n      return ivec3(b, r, c);\\n    }\\n  \";\n  }\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  var texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  var texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n  return \"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n      int index = resTexRC.x * \").concat(packedTexShape[1], \" + resTexRC.y;\\n\\n      int b = index / \").concat(texelsInBatch, \";\\n      index -= b * \").concat(texelsInBatch, \";\\n\\n      int r = 2 * (index / \").concat(texelsInLogicalRow, \");\\n      int c = imod(index, \").concat(texelsInLogicalRow, \") * 2;\\n\\n      return ivec3(b, r, c);\\n    }\\n  \");\n}\nfunction getOutput3DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    var _coordsFromIndexSnippet = shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], shape);\n    return \"\\n  ivec3 getOutputCoords() {\\n    ivec2 resTexRC = ivec2(resultUV.yx *\\n                           vec2(outTexShape[0], outTexShape[1]));\\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n    \".concat(_coordsFromIndexSnippet, \"\\n    return ivec3(r, c, d);\\n  }\\n\");\n  }\n  var coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n  return \"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n      \").concat(coordsFromIndexSnippet, \"\\n      return ivec3(r, c, d);\\n    }\\n  \");\n}\nfunction getOutputPackedNDCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return \"\\n    ivec4 getOutputCoords() {\\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(packedTexShape[0], packedTexShape[1]));\\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\\n\\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\\n      int texelsInBatchN = texelsInBatch * outShape[1];\\n\\n      int b2 = index / texelsInBatchN;\\n      index -= b2 * texelsInBatchN;\\n\\n      int b = index / texelsInBatch;\\n      index -= b * texelsInBatch;\\n\\n      int r = 2 * (index / texelsInLogicalRow);\\n      int c = imod(index, texelsInLogicalRow) * 2;\\n\\n      return ivec4(b2, b, r, c);\\n    }\\n  \";\n  }\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  var texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  var texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  var texelsInBatchN = texelsInBatch;\n  var batches = \"\";\n  var coords = 'b, r, c';\n  for (var b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = \"\\n      int b\".concat(b, \" = index / \").concat(texelsInBatchN, \";\\n      index -= b\").concat(b, \" * \").concat(texelsInBatchN, \";\\n    \") + batches;\n    coords = \"b\".concat(b, \", \") + coords;\n  }\n  return \"\\n    ivec\".concat(shape.length, \" getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\").concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n      int index = resTexRC.x * \").concat(packedTexShape[1], \" + resTexRC.y;\\n\\n      \").concat(batches, \"\\n\\n      int b = index / \").concat(texelsInBatch, \";\\n      index -= b * \").concat(texelsInBatch, \";\\n\\n      int r = 2 * (index / \").concat(texelsInLogicalRow, \");\\n      int c = imod(index, \").concat(texelsInLogicalRow, \") * 2;\\n\\n      return ivec\").concat(shape.length, \"(\").concat(coords, \");\\n    }\\n  \");\n}\nfunction getOutput4DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    var _coordsFromIndexSnippet2 = shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd', 'd2'], shape);\n    return \"\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(outTexShape[0], outTexShape[1]));\\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n      \".concat(_coordsFromIndexSnippet2, \"\\n      return ivec4(r, c, d, d2);\\n    }\\n  \");\n  }\n  var coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);\n  return \"\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n      \").concat(coordsFromIndexSnippet, \"\\n      return ivec4(r, c, d, d2);\\n    }\\n  \");\n}\nfunction getOutput5DCoords(shape, texShape) {\n  var coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);\n  return \"\\n    ivec5 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(\".concat(texShape[0], \",\\n                             \").concat(texShape[1], \"));\\n\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n\\n      \").concat(coordsFromIndexSnippet, \"\\n\\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\\n      return outShape;\\n    }\\n  \");\n}\nfunction getOutput6DCoords(shape, texShape) {\n  var coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n  return \"\\n    ivec6 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n\\n      \").concat(coordsFromIndexSnippet, \"\\n\\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\\n      return result;\\n    }\\n  \");\n}\nfunction getOutputPacked2DCoords(shape, texShape, enableShapeUniforms) {\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\\n      }\\n    \";\n    }\n    return \"\\n      ivec2 getOutputCoords() {\\n        return 2 * ivec2(resultUV.yx * vec2(\".concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n      }\\n    \");\n  }\n  // texels needed to accommodate a logical row\n  var texelsInLogicalRow = Math.ceil(shape[1] / 2);\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  if (enableShapeUniforms) {\n    return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(packedTexShape[0], packedTexShape[1]));\\n\\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\\n      int r = 2 * (index / texelsInLogicalRow);\\n      int c = imod(index, texelsInLogicalRow) * 2;\\n\\n      return ivec2(r, c);\\n    }\\n  \";\n  }\n  return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n\\n      int index = resTexRC.x * \").concat(packedTexShape[1], \" + resTexRC.y;\\n      int r = 2 * (index / \").concat(texelsInLogicalRow, \");\\n      int c = imod(index, \").concat(texelsInLogicalRow, \") * 2;\\n\\n      return ivec2(r, c);\\n    }\\n  \");\n}\nfunction getOutput2DCoords(shape, texShape, enableShapeUniforms) {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return \"\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\\n      }\\n    \";\n    }\n    return \"\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      }\\n    \");\n  }\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(outTexShape[0], outTexShape[1]));\\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    \";\n    }\n    return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n        int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    \");\n  }\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(outTexShape[0], outTexShape[1]));\\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    \";\n    }\n    return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n        int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    \");\n  }\n  if (enableShapeUniforms) {\n    return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(outTexShape[0], outTexShape[1]));\\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n      int r = index / outShape[1];\\n      int c = index - r * outShape[1];\\n      return ivec2(r, c);\\n    }\\n  \";\n  }\n  return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n      int r = index / \").concat(shape[1], \";\\n      int c = index - r * \").concat(shape[1], \";\\n      return ivec2(r, c);\\n    }\\n  \");\n}\nfunction getFlatOffsetUniformName(texName) {\n  return \"offset\".concat(texName);\n}\nfunction getPackedSamplerScalar(inputInfo) {\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var glsl = getGlslDifferences();\n  return \"\\n    vec4 \".concat(funcName, \"() {\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", halfCR);\\n    }\\n  \");\n}\nfunction getSamplerScalar(inputInfo, enableShapeUniforms) {\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return \"float \".concat(funcName, \"() {return \").concat(texName, \";}\");\n  }\n  var _inputInfo$shapeInfo$ = _slicedToArray(inputInfo.shapeInfo.texShape, 2),\n    texNumR = _inputInfo$shapeInfo$[0],\n    texNumC = _inputInfo$shapeInfo$[1];\n  if (texNumR === 1 && texNumC === 1) {\n    return \"\\n      float \".concat(funcName, \"() {\\n        return sampleTexture(\").concat(texName, \", halfCR);\\n      }\\n    \");\n  }\n  var offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return \"\\n    float \".concat(funcName, \"() {\\n      vec2 uv = uvFromFlat(\").concat(texName, \"TexShape[0], \").concat(texName, \"TexShape[1], \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  var _inputInfo$shapeInfo$2 = _slicedToArray(inputInfo.shapeInfo.texShape, 2),\n    tNumR = _inputInfo$shapeInfo$2[0],\n    tNumC = _inputInfo$shapeInfo$2[1];\n  return \"\\n    float \".concat(funcName, \"() {\\n      vec2 uv = uvFromFlat(\").concat(tNumR, \", \").concat(tNumC, \", \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getPackedSampler1D(inputInfo, enableShapeUniforms) {\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var texShape = inputInfo.shapeInfo.texShape;\n  var glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return \"\\n    vec4 \".concat(funcName, \"(int index) {\\n      ivec2 packedTexShape = ivec2(ceil(float(\").concat(texName, \"TexShape[0]) / 2.0), ceil(float(\").concat(texName, \"TexShape[1]) / 2.0));\\n      vec2 uv = packedUVfrom1D(\\n        packedTexShape[0], packedTexShape[1], index);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return \"\\n    vec4 \".concat(funcName, \"(int index) {\\n      vec2 uv = packedUVfrom1D(\\n        \").concat(packedTexShape[0], \", \").concat(packedTexShape[1], \", index);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getSampler1D(inputInfo, enableShapeUniforms) {\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int index) {\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n  var texShape = inputInfo.shapeInfo.texShape;\n  var tNumR = texShape[0];\n  var tNumC = texShape[1];\n  if (tNumC === 1 && tNumR === 1) {\n    return \"\\n      float \".concat(funcName, \"(int index) {\\n        return sampleTexture(\").concat(texName, \", halfCR);\\n      }\\n    \");\n  }\n  var offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int index) {\\n        vec2 uv = vec2(0.5, (float(index + \").concat(offset, \") + 0.5) / float(\").concat(texName, \"TexShape[0]));\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n      float \".concat(funcName, \"(int index) {\\n        vec2 uv = vec2(0.5, (float(index + \").concat(offset, \") + 0.5) / \").concat(tNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int index) {\\n        vec2 uv = vec2((float(index + \").concat(offset, \") + 0.5) / float(\").concat(texName, \"TexShape[1]), 0.5);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n      float \".concat(funcName, \"(int index) {\\n        vec2 uv = vec2((float(index + \").concat(offset, \") + 0.5) / \").concat(tNumC, \".0, 0.5);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  if (enableShapeUniforms) {\n    return \"\\n    float \".concat(funcName, \"(int index) {\\n      vec2 uv = uvFromFlat(\").concat(texName, \"TexShape[0], \").concat(texName, \"TexShape[1], index + \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  return \"\\n    float \".concat(funcName, \"(int index) {\\n      vec2 uv = uvFromFlat(\").concat(tNumR, \", \").concat(tNumC, \", index + \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getPackedSampler2D(inputInfo, enableShapeUniforms) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n  var glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return \"\\n      vec4 \".concat(funcName, \"(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(\").concat(texName, \"TexShape[1], \").concat(texName, \"TexShape[0]);\\n\\n        return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n      vec4 \".concat(funcName, \"(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n\\n        return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  if (enableShapeUniforms) {\n    return \"\\n    vec4 \".concat(funcName, \"(int row, int col) {\\n      ivec2 packedTexShape = ivec2(ceil(float(\").concat(texName, \"TexShape[0]) / 2.0), ceil(float(\").concat(texName, \"TexShape[1]) / 2.0));\\n      int valuesPerRow = int(ceil(float(\").concat(texName, \"Shape[1]) / 2.0));\\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  var valuesPerRow = Math.ceil(shape[1] / 2);\n  return \"\\n    vec4 \".concat(funcName, \"(int row, int col) {\\n      vec2 uv = packedUVfrom2D(\").concat(valuesPerRow, \", \").concat(packedTexShape[0], \", \").concat(packedTexShape[1], \", row, col);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getSampler2D(inputInfo, enableShapeUniforms) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var texShape = inputInfo.shapeInfo.texShape;\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(\").concat(texName, \"TexShape[1], \").concat(texName, \"TexShape[0]);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    var _texNumR = texShape[0];\n    var _texNumC = texShape[1];\n    return \"\\n    float \".concat(funcName, \"(int row, int col) {\\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(\").concat(_texNumC, \".0, \").concat(_texNumR, \".0);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  var _util$squeezeShape = util.squeezeShape(shape),\n    newShape = _util$squeezeShape.newShape,\n    keptDims = _util$squeezeShape.keptDims;\n  var squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    var params = ['row', 'col'];\n    return \"\\n      \".concat(getSamplerFromInInfo(newInputInfo, enableShapeUniforms), \"\\n      float \").concat(funcName, \"(int row, int col) {\\n        return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n      }\\n    \");\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col) {\\n        int index = round(dot(vec2(row, col), vec2(\").concat(shape[1], \", 1)));\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n  var offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col) {\\n        float index = dot(vec3(row, col, \").concat(offset, \"), vec3(\").concat(texName, \"Shape[1], 1, 1));\\n        vec2 uv = vec2(0.5, (index + 0.5) / float(\").concat(texName, \"TexShape[0]));\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n    float \".concat(funcName, \"(int row, int col) {\\n      float index = dot(vec3(row, col, \").concat(offset, \"), vec3(\").concat(shape[1], \", 1, 1));\\n      vec2 uv = vec2(0.5, (index + 0.5) / \").concat(texNumR, \".0);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col) {\\n        float index = dot(vec3(row, col, \").concat(offset, \"), vec3(\").concat(texName, \"Shape[1], 1, 1));\\n        vec2 uv = vec2((index + 0.5) / float(\").concat(texName, \"TexShape[1]), 0.5);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n    float \".concat(funcName, \"(int row, int col) {\\n      float index = dot(vec3(row, col, \").concat(offset, \"), vec3(\").concat(shape[1], \", 1, 1));\\n      vec2 uv = vec2((index + 0.5) / \").concat(texNumC, \".0, 0.5);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  if (enableShapeUniforms) {\n    return \"\\n      float \".concat(funcName, \"(int row, int col) {\\n        // Explicitly use integer operations as dot() only works on floats.\\n        int index = row * \").concat(texName, \"Shape[1] + col + \").concat(offset, \";\\n        vec2 uv = uvFromFlat(\").concat(texName, \"TexShape[0], \").concat(texName, \"TexShape[1], index);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  return \"\\n  float \".concat(funcName, \"(int row, int col) {\\n    // Explicitly use integer operations as dot() only works on floats.\\n    int index = row * \").concat(shape[1], \" + col + \").concat(offset, \";\\n    vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index);\\n    return sampleTexture(\").concat(texName, \", uv);\\n  }\\n\");\n}\nfunction getPackedSampler3D(inputInfo, enableShapeUniforms) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var texShape = inputInfo.shapeInfo.texShape;\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (shape[0] === 1) {\n    var squeezedShape = shape.slice(1);\n    var keptDims = [1, 2];\n    var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    var params = ['b', 'row', 'col'];\n    return \"\\n        \".concat(getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms), \"\\n        vec4 \").concat(funcName, \"(int b, int row, int col) {\\n          return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n        }\\n      \");\n  }\n  var glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return \"\\n    vec4 \".concat(funcName, \"(int b, int row, int col) {\\n      ivec2 packedTexShape = ivec2(ceil(float(\").concat(texName, \"TexShape[0]) / 2.0), ceil(float(\").concat(texName, \"TexShape[1]) / 2.0));\\n      int valuesPerRow = int(ceil(float(\").concat(texName, \"Shape[2]) / 2.0));\\n      int texelsInBatch = valuesPerRow * int(ceil(float(\").concat(texName, \"Shape[1]) / 2.0));\\n      vec2 uv = packedUVfrom3D(\\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  var texNumR = packedTexShape[0];\n  var texNumC = packedTexShape[1];\n  var valuesPerRow = Math.ceil(shape[2] / 2);\n  var texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n  return \"\\n    vec4 \".concat(funcName, \"(int b, int row, int col) {\\n      vec2 uv = packedUVfrom3D(\\n        \").concat(texNumR, \", \").concat(texNumC, \", \").concat(texelsInBatch, \", \").concat(valuesPerRow, \", b, row, col);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getSampler3D(inputInfo, enableShapeUniforms) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var stride0 = shape[1] * shape[2];\n  var stride1 = shape[2];\n  var _util$squeezeShape2 = util.squeezeShape(shape),\n    newShape = _util$squeezeShape2.newShape,\n    keptDims = _util$squeezeShape2.keptDims;\n  var squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    var params = ['row', 'col', 'depth'];\n    return \"\\n        \".concat(getSamplerFromInInfo(newInputInfo, enableShapeUniforms), \"\\n        float \").concat(funcName, \"(int row, int col, int depth) {\\n          return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n        }\\n      \");\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth) {\\n        int index = round(dot(vec3(row, col, depth),\\n                          vec3(\").concat(stride0, \", \").concat(stride1, \", 1)));\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n  var flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col, int depth) {\\n        int stride1 = \").concat(texName, \"Shape[2];\\n        float texR = float(row);\\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texName, \"TexShape[1], \").concat(texName, \"TexShape[0]);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n        float \".concat(funcName, \"(int row, int col, int depth) {\\n          float texR = float(row);\\n          float texC = dot(vec2(col, depth), vec2(\").concat(stride1, \", 1));\\n          vec2 uv = (vec2(texC, texR) + halfCR) /\\n                     vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n          return sampleTexture(\").concat(texName, \", uv);\\n        }\\n      \");\n  }\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col, int depth) {\\n        float texR = dot(vec2(row, col), vec2(\").concat(texName, \"Shape[1], 1));\\n        float texC = float(depth);\\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\").concat(texName, \"TexShape[1], \").concat(texName, \"TexShape[0]);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n    float \".concat(funcName, \"(int row, int col, int depth) {\\n      float texR = dot(vec2(row, col), vec2(\").concat(shape[1], \", 1));\\n      float texC = float(depth);\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  var offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return \"\\n    float \".concat(funcName, \"(int row, int col, int depth) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int stride0 = \").concat(texName, \"Shape[1] * \").concat(texName, \"Shape[2];\\n      int stride1 = \").concat(texName, \"Shape[2];\\n      int index = row * stride0 + col * stride1 + depth + \").concat(offset, \";\\n      vec2 uv = uvFromFlat(\").concat(texName, \"TexShape[0], \").concat(texName, \"TexShape[1], index);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n    \");\n  }\n  return \"\\n      float \".concat(funcName, \"(int row, int col, int depth) {\\n        // Explicitly use integer operations as dot() only works on floats.\\n        int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" + depth + \").concat(offset, \";\\n        vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n  \");\n}\nfunction getPackedSamplerND(inputInfo, enableShapeUniforms) {\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return \"\\n    vec4 \".concat(funcName, \"(int b2, int b, int row, int col) {\\n      int valuesPerRow = int(ceil(float(\").concat(texName, \"Shape[3]) / 2.0));\\n      int texelsInBatch = valuesPerRow * int(ceil(float(\").concat(texName, \"Shape[2]) / 2.0));\\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\\n      texelsInBatch *= \").concat(texName, \"Shape[1];\\n      index = b2 * texelsInBatch + index;\\n      ivec2 packedTexShape = ivec2(ceil(float(\").concat(texName, \"TexShape[0]) / 2.0), ceil(float(\").concat(texName, \"TexShape[1]) / 2.0));\\n      int texR = index / packedTexShape[1];\\n      int texC = index - texR * packedTexShape[1];\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var rank = shape.length;\n  var texShape = inputInfo.shapeInfo.texShape;\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  var texNumR = packedTexShape[0];\n  var texNumC = packedTexShape[1];\n  var valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  var texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  var params = \"int b, int row, int col\";\n  var index = \"b * \".concat(texelsInBatch, \" + (row / 2) * \").concat(valuesPerRow, \" + (col / 2)\");\n  for (var b = 2; b < rank - 1; b++) {\n    params = \"int b\".concat(b, \", \") + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = \"b\".concat(b, \" * \").concat(texelsInBatch, \" + \") + index;\n  }\n  return \"\\n    vec4 \".concat(funcName, \"(\").concat(params, \") {\\n      int index = \").concat(index, \";\\n      int texR = index / \").concat(texNumC, \";\\n      int texC = index - texR * \").concat(texNumC, \";\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\").concat(texNumC, \", \").concat(texNumR, \");\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getSampler4D(inputInfo, enableShapeUniforms) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var stride2 = shape[3];\n  var stride1 = shape[2] * stride2;\n  var stride0 = shape[1] * stride1;\n  var _util$squeezeShape3 = util.squeezeShape(shape),\n    newShape = _util$squeezeShape3.newShape,\n    keptDims = _util$squeezeShape3.keptDims;\n  if (newShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    var params = ['row', 'col', 'depth', 'depth2'];\n    return \"\\n      \".concat(getSamplerFromInInfo(newInputInfo, enableShapeUniforms), \"\\n      float \").concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n      }\\n    \");\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        int index = round(dot(vec4(row, col, depth, depth2),\\n                          vec4(\").concat(stride0, \", \").concat(stride1, \", \").concat(stride2, \", 1)));\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n  var flatOffset = inputInfo.shapeInfo.flatOffset;\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n  var stride2Str = \"int stride2 = \".concat(texName, \"Shape[3];\");\n  var stride1Str = \"int stride1 = \".concat(texName, \"Shape[2] * stride2;\");\n  var stride0Str = \"int stride0 = \".concat(texName, \"Shape[1] * stride1;\");\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        \").concat(stride2Str, \"\\n        \").concat(stride1Str, \"\\n        float texR = float(row);\\n        float texC =\\n            dot(vec3(col, depth, depth2),\\n                vec3(stride1, stride2, 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texName, \"TexShape[1], \").concat(texName, \"TexShape[0]);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        float texR = float(row);\\n        float texC =\\n            dot(vec3(col, depth, depth2),\\n                vec3(\").concat(stride1, \", \").concat(stride2, \", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        float texR = dot(vec3(row, col, depth),\\n                         vec3(\").concat(texName, \"Shape[1] * \").concat(texName, \"Shape[2], \").concat(texName, \"Shape[2], 1));\\n        float texC = float(depth2);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texName, \"TexShape[1], \").concat(texName, \"TexShape[0]);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        float texR = dot(vec3(row, col, depth),\\n                         vec3(\").concat(shape[1] * shape[2], \", \").concat(shape[2], \", 1));\\n        float texC = float(depth2);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  var offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return \"\\n    float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      \").concat(stride2Str, \"\\n      \").concat(stride1Str, \"\\n      \").concat(stride0Str, \"\\n      int index = row * stride0 + col * stride1 +\\n          depth * stride2 + depth2;\\n      vec2 uv = uvFromFlat(\").concat(texName, \"TexShape[0], \").concat(texName, \"TexShape[1], index + \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  return \"\\n    float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" +\\n          depth * \").concat(stride2, \" + depth2;\\n      vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index + \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getSampler5D(inputInfo) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var stride3 = shape[4];\n  var stride2 = shape[3] * stride3;\n  var stride1 = shape[2] * stride2;\n  var stride0 = shape[1] * stride1;\n  var _util$squeezeShape4 = util.squeezeShape(shape),\n    newShape = _util$squeezeShape4.newShape,\n    keptDims = _util$squeezeShape4.keptDims;\n  if (newShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    var params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return \"\\n      \".concat(getSamplerFromInInfo(newInputInfo), \"\\n      float \").concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n        return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n      }\\n    \");\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n        float index = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\").concat(stride0, \", \").concat(stride1, \", \").concat(stride2, \", \").concat(stride3, \")) +\\n          depth3;\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n  var flatOffset = inputInfo.shapeInfo.flatOffset;\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n                         vec4(\").concat(stride1, \", \").concat(stride2, \", \").concat(stride3, \", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n        float texR = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\").concat(shape[1] * shape[2] * shape[3], \",\\n               \").concat(shape[2] * shape[3], \", \").concat(shape[3], \", 1));\\n        int texC = depth3;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  var offset = getFlatOffsetUniformName(texName);\n  return \"\\n    float \".concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" + depth * \").concat(stride2, \" +\\n          depth2 * \").concat(stride3, \" + depth3 + \").concat(offset, \";\\n      vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getSampler6D(inputInfo) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var _util$squeezeShape5 = util.squeezeShape(shape),\n    newShape = _util$squeezeShape5.newShape,\n    keptDims = _util$squeezeShape5.keptDims;\n  if (newShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    var params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return \"\\n      \".concat(getSamplerFromInInfo(newInputInfo), \"\\n      float \").concat(funcName, \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n      }\\n    \");\n  }\n  var stride4 = shape[5];\n  var stride3 = shape[4] * stride4;\n  var stride2 = shape[3] * stride3;\n  var stride1 = shape[2] * stride2;\n  var stride0 = shape[1] * stride1;\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n        int index = round(dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\").concat(stride0, \", \").concat(stride1, \", \").concat(stride2, \", \").concat(stride3, \")) +\\n          dot(\\n            vec2(depth3, depth4),\\n            vec2(\").concat(stride4, \", 1)));\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n  var flatOffset = inputInfo.shapeInfo.flatOffset;\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n          vec4(\").concat(stride1, \", \").concat(stride2, \", \").concat(stride3, \", \").concat(stride4, \")) +\\n               float(depth4);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        float texR = dot(vec4(row, col, depth, depth2),\\n          vec4(\").concat(shape[1] * shape[2] * shape[3] * shape[4], \",\\n               \").concat(shape[2] * shape[3] * shape[4], \",\\n               \").concat(shape[3] * shape[4], \",\\n               \").concat(shape[4], \")) + float(depth3);\\n        int texC = depth4;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  var offset = getFlatOffsetUniformName(texName);\n  return \"\\n    float \".concat(funcName, \"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" + depth * \").concat(stride2, \" +\\n          depth2 * \").concat(stride3, \" + depth3 * \").concat(stride4, \" + depth4 + \").concat(offset, \";\\n      vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getUniformSampler(inputInfo) {\n  var texName = inputInfo.name;\n  var inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  if (inSize < 2) {\n    return \"return \".concat(texName, \";\");\n  }\n  return \"\\n    for (int i = 0; i < \".concat(inSize, \"; i++) {\\n      if (i == index) {\\n        return \").concat(texName, \"[i];\\n      }\\n    }\\n  \");\n}\nfunction getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  var texName = inputInfo.name;\n  var texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  var funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  var inRank = inputInfo.shapeInfo.logicalShape.length;\n  var outRank = outShapeInfo.logicalShape.length;\n  var broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  var type = getCoordsDataType(outRank);\n  var rankDiff = outRank - inRank;\n  var coordsSnippet;\n  var fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(function (d) {\n      return \"coords.\".concat(fields[d + rankDiff], \" = 0;\");\n    }).join('\\n');\n  }\n  var unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map(function (s, i) {\n      return \"coords.\".concat(fields[i + rankDiff]);\n    }).join(', ');\n  }\n  var output = \"return outputValue;\";\n  var inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  var isInputScalar = inSize === 1;\n  var outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  var isOutputScalar = outSize === 1;\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = \"\\n      return vec4(outputValue.xy, outputValue.xy);\\n    \";\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = \"\\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\\n      \";\n    } else {\n      output = \"\\n        return vec4(outputValue.x);\\n      \";\n    }\n  } else if (broadcastDims.length) {\n    var rows = inRank - 2;\n    var cols = inRank - 1;\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = \"return vec4(outputValue.x);\";\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = \"return vec4(outputValue.x, outputValue.y, \" + \"outputValue.x, outputValue.y);\";\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = \"return vec4(outputValue.xx, outputValue.zz);\";\n    }\n  }\n  return \"\\n    vec4 \".concat(funcName, \"() {\\n      \").concat(type, \" coords = getOutputCoords();\\n      \").concat(coordsSnippet, \"\\n      vec4 outputValue = get\").concat(texFuncSnippet, \"(\").concat(unpackedCoordsSnippet, \");\\n      \").concat(output, \"\\n    }\\n  \");\n}\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  var texName = inputInfo.name;\n  var texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  var funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  var outTexShape = outShapeInfo.texShape;\n  var inTexShape = inputInfo.shapeInfo.texShape;\n  var inRank = inputInfo.shapeInfo.logicalShape.length;\n  var outRank = outShapeInfo.logicalShape.length;\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank && inputInfo.shapeInfo.flatOffset == null && util.arraysEqual(inTexShape, outTexShape)) {\n    return \"\\n      float \".concat(funcName, \"() {\\n        return sampleTexture(\").concat(texName, \", resultUV);\\n      }\\n    \");\n  }\n  var type = getCoordsDataType(outRank);\n  var broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  var rankDiff = outRank - inRank;\n  var coordsSnippet;\n  var fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(function (d) {\n      return \"coords.\".concat(fields[d + rankDiff], \" = 0;\");\n    }).join('\\n');\n  }\n  var unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map(function (s, i) {\n      return \"coords.\".concat(fields[i + rankDiff]);\n    }).join(', ');\n  }\n  return \"\\n    float \".concat(funcName, \"() {\\n      \").concat(type, \" coords = getOutputCoords();\\n      \").concat(coordsSnippet, \"\\n      return get\").concat(texFuncSnippet, \"(\").concat(unpackedCoordsSnippet, \");\\n    }\\n  \");\n}\nexport function getCoordsDataType(rank) {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(\"GPU for rank \".concat(rank, \" is not yet supported\"));\n  }\n}\nexport function getUniformInfoFromShape(isPacked, shape, texShape) {\n  var _util$squeezeShape6 = util.squeezeShape(shape),\n    newShape = _util$squeezeShape6.newShape,\n    keptDims = _util$squeezeShape6.keptDims;\n  var rank = shape.length;\n  var useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  var squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  var useSqueezeShape = !isPacked && rank > 1 && !util.arraysEqual(shape, texShape) && newShape.length < rank || useSqueezePackedShape;\n  var uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {\n    useSqueezeShape: useSqueezeShape,\n    uniformShape: uniformShape,\n    keptDims: keptDims\n  };\n}\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(inInfo, squeezedShape) {\n  // Deep copy.\n  var newInputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\nfunction getSqueezedParams(params, keptDims) {\n  return keptDims.map(function (d) {\n    return params[d];\n  }).join(', ');\n}","map":{"version":3,"names":["backend_util","util","getBroadcastDims","getGlslDifferences","shader_util","makeShader","inputsInfo","outputShape","program","prefixSnippets","forEach","x","size","sizeFromShape","shapeInfo","logicalShape","isUniform","push","concat","name","enableShapeUniforms","_getUniformInfoFromSh","getUniformInfoFromShape","packedInputs","texShape","uniformShape","length","customUniforms","d","type","arrayIndex","inputPrefixSnippet","join","inputSamplingSnippet","map","getInputSamplingSnippet","outTexShape","glsl","floatTextureSampleSnippet","getFloatTextureSampleSnippet","outputSamplingSnippet","floatTextureSetOutputSnippet","shaderPrefix","getShaderPrefix","isPacked","getPackedOutputSamplingSnippet","getFloatTextureSetRGBASnippet","getOutputSamplingSnippet","getFloatTextureSetRSnippet","SHADER_PACKED_PREFIX","source","userCode","getSamplerFromInInfo","inInfo","arguments","undefined","shape","getSamplerScalar","getSampler1D","getSampler2D","getSampler3D","getSampler4D","getSampler5D","getSampler6D","Error","getPackedSamplerFromInInfo","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","outShapeInfo","usesPackedTextures","res","inShape","outShape","getPackedSamplerAtOutputCoords","getSamplerAtOutputCoords","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","getOutput1DCoords","getOutput2DCoords","getOutput3DCoords","getOutput4DCoords","getOutput5DCoords","getOutput6DCoords","texture2D","output","SHADER_PREFIX","version","varyingFs","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","packedTexShape","Math","ceil","texelsInLogicalRow","texelsInBatch","coordsFromIndexSnippet","getOutputLogicalCoordinatesFromFlatIndexByUniform","getLogicalCoordinatesFromFlatIndex","texelsInBatchN","batches","coords","b","arraysEqual","getFlatOffsetUniformName","texName","inputInfo","funcName","charAt","toUpperCase","slice","_inputInfo$shapeInfo$","_slicedToArray","texNumR","texNumC","offset","_inputInfo$shapeInfo$2","tNumR","tNumC","getUniformSampler","valuesPerRow","_util$squeezeShape","squeezeShape","newShape","keptDims","squeezedShape","newInputInfo","squeezeInputInfo","params","getSqueezedParams","stride0","stride1","_util$squeezeShape2","flatOffset","rank","index","stride2","_util$squeezeShape3","stride2Str","stride1Str","stride0Str","stride3","_util$squeezeShape4","_util$squeezeShape5","stride4","inSize","texFuncSnippet","inRank","outRank","broadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","unpackedCoordsSnippet","s","i","isInputScalar","outSize","isOutputScalar","rows","cols","indexOf","inTexShape","_util$squeezeShape6","useSqueezePackedShape","useSqueezeShape","JSON","parse","stringify"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\shader_compiler.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nconst {getBroadcastDims} = backend_util;\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport type UniformType =\n    'float'|'vec2'|'vec3'|'vec4'|'int'|'ivec2'|'ivec3'|'ivec4';\n\ninterface ProgramParams {\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  packedInputs?: boolean;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo,\n    program: ProgramParams): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n\n    if (program.enableShapeUniforms) {\n      const {uniformShape} = getUniformInfoFromShape(\n          program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(`uniform int ${x.name}Shape;`);\n          break;\n        case 2:\n          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n          break;\n        case 3:\n          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n          break;\n        case 4:\n          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n          break;\n        default:\n          break;\n      }\n      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n    }\n  });\n\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(`uniform int outShape;`);\n        break;\n      case 2:\n        prefixSnippets.push(`uniform ivec2 outShape;`);\n        prefixSnippets.push(`uniform int outShapeStrides;`);\n        break;\n      case 3:\n        prefixSnippets.push(`uniform ivec3 outShape;`);\n        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n        break;\n      case 4:\n        prefixSnippets.push(`uniform ivec4 outShape;`);\n        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n        break;\n      default:\n        break;\n    }\n    prefixSnippets.push(`uniform ivec2 outTexShape;`);\n  }\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d) => {\n      prefixSnippets.push(`uniform ${d.type} ${d.name}${\n          d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n    });\n  }\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet = inputsInfo\n                                   .map(\n                                       x => getInputSamplingSnippet(\n                                           x, outputShape, program.packedInputs,\n                                           program.enableShapeUniforms))\n                                   .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet,\n    program.userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms = false): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo, usesPackedTextures = false,\n    enableShapeUniforms: boolean): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutputPacked2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    default:\n      return getOutputPackedNDCoords(\n          outShape, outTexShape, enableShapeUniforms);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutput2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd'], shape);\n\n    return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n  }\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd', 'd2'], shape);\n\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n  }\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n  }\n\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${\n        offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n  }\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${\n        glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  const stride2Str = `int stride2 = ${texName}Shape[3];`;\n  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${\n          texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getUniformInfoFromShape(\n    isPacked: boolean, shape: number[], texShape: number[]) {\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const rank = shape.length;\n  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  const useSqueezeShape =\n      (!isPacked && rank > 1 && !util.arraysEqual(shape, texShape) &&\n       newShape.length < rank) ||\n      useSqueezePackedShape;\n  const uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {useSqueezeShape, uniformShape, keptDims};\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}