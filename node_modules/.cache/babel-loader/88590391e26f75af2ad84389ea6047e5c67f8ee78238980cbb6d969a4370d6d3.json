{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { env } from './environment';\nimport { isTypedArrayBrowser } from './platforms/is_typed_array_browser';\nimport * as base from './util_base';\nexport * from './util_base';\nexport * from './hash_util';\n/**\r\n * Create typed array for scalar value. Used for storing in `DataStorage`.\r\n */\nexport function createScalarValue(value, dtype) {\n  if (dtype === 'string') {\n    return encodeString(value);\n  }\n  return toTypedArray([value], dtype);\n}\nfunction noConversionNeeded(a, dtype) {\n  return a instanceof Float32Array && dtype === 'float32' || a instanceof Int32Array && dtype === 'int32' || a instanceof Uint8Array && dtype === 'bool';\n}\nexport function toTypedArray(a, dtype) {\n  if (dtype === 'string') {\n    throw new Error('Cannot convert a string[] to a TypedArray');\n  }\n  if (Array.isArray(a)) {\n    a = flatten(a);\n  }\n  if (env().getBool('DEBUG')) {\n    base.checkConversionForErrors(a, dtype);\n  }\n  if (noConversionNeeded(a, dtype)) {\n    return a;\n  }\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(a);\n  } else if (dtype === 'int32') {\n    return new Int32Array(a);\n  } else if (dtype === 'bool') {\n    var bool = new Uint8Array(a.length);\n    for (var i = 0; i < bool.length; ++i) {\n      if (Math.round(a[i]) !== 0) {\n        bool[i] = 1;\n      }\n    }\n    return bool;\n  } else {\n    throw new Error(\"Unknown data type \".concat(dtype));\n  }\n}\n/**\r\n * Returns the current high-resolution time in milliseconds relative to an\r\n * arbitrary time in the past. It works across different platforms (node.js,\r\n * browsers).\r\n *\r\n * ```js\r\n * console.log(tf.util.now());\r\n * ```\r\n *\r\n * @doc {heading: 'Util', namespace: 'util'}\r\n */\nexport function now() {\n  return env().platform.now();\n}\n/**\r\n * Returns a platform-specific implementation of\r\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\r\n *\r\n * If `fetch` is defined on the global object (`window`, `process`, etc.),\r\n * `tf.util.fetch` returns that function.\r\n *\r\n * If not, `tf.util.fetch` returns a platform-specific solution.\r\n *\r\n * ```js\r\n * const resource = await tf.util.fetch('https://cdn.jsdelivr.net/npm/@tensorflow/tfjs');\r\n * // handle response\r\n * ```\r\n *\r\n * @doc {heading: 'Util'}\r\n */\nexport function fetch(path, requestInits) {\n  return env().platform.fetch(path, requestInits);\n}\n/**\r\n * Encodes the provided string into bytes using the provided encoding scheme.\r\n *\r\n * @param s The string to encode.\r\n * @param encoding The encoding scheme. Defaults to utf-8.\r\n *\r\n * @doc {heading: 'Util'}\r\n */\nexport function encodeString(s) {\n  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf-8';\n  encoding = encoding || 'utf-8';\n  return env().platform.encode(s, encoding);\n}\n/**\r\n * Decodes the provided bytes into a string using the provided encoding scheme.\r\n * @param bytes The bytes to decode.\r\n *\r\n * @param encoding The encoding scheme. Defaults to utf-8.\r\n *\r\n * @doc {heading: 'Util'}\r\n */\nexport function decodeString(bytes) {\n  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf-8';\n  encoding = encoding || 'utf-8';\n  return env().platform.decode(bytes, encoding);\n}\nexport function isTypedArray(a) {\n  // TODO(mattsoulanille): Remove this fallback in 5.0.0\n  if (env().platform.isTypedArray != null) {\n    return env().platform.isTypedArray(a);\n  } else {\n    return isTypedArrayBrowser(a);\n  }\n}\n// NOTE: We explicitly type out what T extends instead of any so that\n// util.flatten on a nested array of number doesn't try to infer T as a\n// number[][], causing us to explicitly type util.flatten<number>().\n/**\r\n *  Flattens an arbitrarily nested array.\r\n *\r\n * ```js\r\n * const a = [[1, 2], [3, 4], [5, [6, [7]]]];\r\n * const flat = tf.util.flatten(a);\r\n * console.log(flat);\r\n * ```\r\n *\r\n *  @param arr The nested array to flatten.\r\n *  @param result The destination array which holds the elements.\r\n *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults\r\n *      to false.\r\n *\r\n * @doc {heading: 'Util', namespace: 'util'}\r\n */\nexport function flatten(arr) {\n  var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var skipTypedArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (result == null) {\n    result = [];\n  }\n  if (typeof arr === 'boolean' || typeof arr === 'number' || typeof arr === 'string' || base.isPromise(arr) || arr == null || isTypedArray(arr) && skipTypedArray) {\n    result.push(arr);\n  } else if (Array.isArray(arr) || isTypedArray(arr)) {\n    for (var i = 0; i < arr.length; ++i) {\n      flatten(arr[i], result, skipTypedArray);\n    }\n  } else {\n    var maxIndex = -1;\n    for (var _i = 0, _Object$keys = Object.keys(arr); _i < _Object$keys.length; _i++) {\n      var key = _Object$keys[_i];\n      // 0 or positive integer.\n      if (/^([1-9]+[0-9]*|0)$/.test(key)) {\n        maxIndex = Math.max(maxIndex, Number(key));\n      }\n    }\n    for (var _i2 = 0; _i2 <= maxIndex; _i2++) {\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      flatten(arr[_i2], result, skipTypedArray);\n    }\n  }\n  return result;\n}","map":{"version":3,"names":["env","isTypedArrayBrowser","base","createScalarValue","value","dtype","encodeString","toTypedArray","noConversionNeeded","a","Float32Array","Int32Array","Uint8Array","Error","Array","isArray","flatten","getBool","checkConversionForErrors","bool","length","i","Math","round","concat","now","platform","fetch","path","requestInits","s","encoding","arguments","undefined","encode","decodeString","bytes","decode","isTypedArray","arr","result","skipTypedArray","isPromise","push","maxIndex","_i","_Object$keys","Object","keys","key","test","max","Number"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from './environment';\nimport {isTypedArrayBrowser} from './platforms/is_typed_array_browser';\nimport {BackendValues, DataType, RecursiveArray, TensorLike, TypedArray} from './types';\nimport * as base from './util_base';\nexport * from './util_base';\nexport * from './hash_util';\n\n/**\n * Create typed array for scalar value. Used for storing in `DataStorage`.\n */\nexport function createScalarValue(\n    value: DataType, dtype: DataType): BackendValues {\n  if (dtype === 'string') {\n    return encodeString(value);\n  }\n\n  return toTypedArray([value], dtype);\n}\n\nfunction noConversionNeeded(a: TensorLike, dtype: DataType): boolean {\n  return (a instanceof Float32Array && dtype === 'float32') ||\n      (a instanceof Int32Array && dtype === 'int32') ||\n      (a instanceof Uint8Array && dtype === 'bool');\n}\n\nexport function toTypedArray(a: TensorLike, dtype: DataType): TypedArray {\n  if (dtype === 'string') {\n    throw new Error('Cannot convert a string[] to a TypedArray');\n  }\n  if (Array.isArray(a)) {\n    a = flatten(a);\n  }\n\n  if (env().getBool('DEBUG')) {\n    base.checkConversionForErrors(a as number[], dtype);\n  }\n  if (noConversionNeeded(a, dtype)) {\n    return a as TypedArray;\n  }\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(a as number[]);\n  } else if (dtype === 'int32') {\n    return new Int32Array(a as number[]);\n  } else if (dtype === 'bool') {\n    const bool = new Uint8Array((a as number[]).length);\n    for (let i = 0; i < bool.length; ++i) {\n      if (Math.round((a as number[])[i]) !== 0) {\n        bool[i] = 1;\n      }\n    }\n    return bool;\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n\n/**\n * Returns the current high-resolution time in milliseconds relative to an\n * arbitrary time in the past. It works across different platforms (node.js,\n * browsers).\n *\n * ```js\n * console.log(tf.util.now());\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function now(): number {\n  return env().platform.now();\n}\n\n/**\n * Returns a platform-specific implementation of\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n *\n * If `fetch` is defined on the global object (`window`, `process`, etc.),\n * `tf.util.fetch` returns that function.\n *\n * If not, `tf.util.fetch` returns a platform-specific solution.\n *\n * ```js\n * const resource = await tf.util.fetch('https://cdn.jsdelivr.net/npm/@tensorflow/tfjs');\n * // handle response\n * ```\n *\n * @doc {heading: 'Util'}\n */\nexport function fetch(\n    path: string, requestInits?: RequestInit): Promise<Response> {\n  return env().platform.fetch(path, requestInits);\n}\n\n/**\n * Encodes the provided string into bytes using the provided encoding scheme.\n *\n * @param s The string to encode.\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\nexport function encodeString(s: string, encoding = 'utf-8'): Uint8Array {\n  encoding = encoding || 'utf-8';\n  return env().platform.encode(s, encoding);\n}\n\n/**\n * Decodes the provided bytes into a string using the provided encoding scheme.\n * @param bytes The bytes to decode.\n *\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\nexport function decodeString(bytes: Uint8Array, encoding = 'utf-8'): string {\n  encoding = encoding || 'utf-8';\n  return env().platform.decode(bytes, encoding);\n}\n\nexport function isTypedArray(a: {}): a is Float32Array|Int32Array|Uint8Array|\n    Uint8ClampedArray {\n  // TODO(mattsoulanille): Remove this fallback in 5.0.0\n  if (env().platform.isTypedArray != null) {\n    return env().platform.isTypedArray(a);\n  } else {\n    return isTypedArrayBrowser(a);\n  }\n}\n\n// NOTE: We explicitly type out what T extends instead of any so that\n// util.flatten on a nested array of number doesn't try to infer T as a\n// number[][], causing us to explicitly type util.flatten<number>().\n/**\n *  Flattens an arbitrarily nested array.\n *\n * ```js\n * const a = [[1, 2], [3, 4], [5, [6, [7]]]];\n * const flat = tf.util.flatten(a);\n * console.log(flat);\n * ```\n *\n *  @param arr The nested array to flatten.\n *  @param result The destination array which holds the elements.\n *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults\n *      to false.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function\nflatten<T extends number|boolean|string|Promise<number>|TypedArray>(\n    arr: T|RecursiveArray<T>, result: T[] = [], skipTypedArray = false): T[] {\n  if (result == null) {\n    result = [];\n  }\n  if (typeof arr === 'boolean' || typeof arr === 'number' ||\n    typeof arr === 'string' || base.isPromise(arr) || arr == null ||\n      isTypedArray(arr) && skipTypedArray) {\n    result.push(arr as T);\n  } else if (Array.isArray(arr) || isTypedArray(arr)) {\n    for (let i = 0; i < arr.length; ++i) {\n      flatten(arr[i], result, skipTypedArray);\n    }\n  } else {\n    let maxIndex = -1;\n    for (const key of Object.keys(arr)) {\n      // 0 or positive integer.\n      if (/^([1-9]+[0-9]*|0)$/.test(key)) {\n        maxIndex = Math.max(maxIndex, Number(key));\n      }\n    }\n    for (let i = 0; i <= maxIndex; i++) {\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      flatten((arr as RecursiveArray<T>)[i], result, skipTypedArray);\n    }\n  }\n  return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}