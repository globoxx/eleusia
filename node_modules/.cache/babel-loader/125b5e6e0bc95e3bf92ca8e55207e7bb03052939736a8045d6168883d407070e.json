{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedBatchNorm } from '../kernel_names';\nimport { add } from '../ops/add';\nimport { getReductionAxes } from '../ops/broadcast_util';\nimport { mul } from '../ops/mul';\nimport { reshape } from '../ops/reshape';\nimport { rsqrt } from '../ops/rsqrt';\nimport { scalar } from '../ops/scalar';\nimport { sub } from '../ops/sub';\nimport { sum } from '../ops/sum';\nimport { tile } from '../ops/tile';\nexport var fusedBatchNormGradConfig = {\n  kernelName: FusedBatchNorm,\n  inputsToSave: ['x', 'mean', 'variance', 'scale'],\n  gradFunc: function gradFunc(dy, saved, attrs) {\n    var varianceEpsilon = attrs.varianceEpsilon;\n    var _saved = _slicedToArray(saved, 4),\n      x = _saved[0],\n      mean = _saved[1],\n      variance = _saved[2],\n      scale = _saved[3];\n    var scaleValue = scale == null ? scalar(1) : scale;\n    var reductionAxes = getReductionAxes(mean.shape, x.shape);\n    var tileShape = [];\n    if (mean.rank === 1) {\n      for (var i = 0; i < x.shape.length - 1; ++i) {\n        tileShape.push(x.shape[i]);\n      }\n      tileShape.push(1);\n    }\n    var xMinusMean = sub(x, mean);\n    var dyTimesScaleValue = mul(dy, scaleValue);\n    var oneOverSqrtVariance = rsqrt(add(variance, scalar(varianceEpsilon)));\n    var minusHalfRCube = mul(mul(mul(oneOverSqrtVariance, oneOverSqrtVariance), oneOverSqrtVariance), scalar(-0.5));\n    var derX = function derX() {\n      if (mean.rank === 1) {\n        return reshape(mul(mul(dy, tile(reshape(oneOverSqrtVariance, [1, 1, 1, mean.shape[0]]), tileShape)), scaleValue), x.shape);\n      } else {\n        return reshape(mul(mul(dy, oneOverSqrtVariance), scaleValue), x.shape);\n      }\n    };\n    var derMean = function derMean() {\n      var meanDer = mul(mul(oneOverSqrtVariance, scalar(-1)), dyTimesScaleValue);\n      if (mean.rank === 1) {\n        meanDer = sum(meanDer, reductionAxes);\n      }\n      return reshape(meanDer, mean.shape);\n    };\n    var derVariance = function derVariance() {\n      var varianceDer = mul(mul(minusHalfRCube, xMinusMean), dyTimesScaleValue);\n      if (mean.rank === 1) {\n        varianceDer = sum(varianceDer, reductionAxes);\n      }\n      return reshape(varianceDer, mean.shape);\n    };\n    var derScale = function derScale() {\n      var xMinusMean2TimesRsqrt = mul(xMinusMean, oneOverSqrtVariance);\n      var scaleDer = mul(dy, xMinusMean2TimesRsqrt);\n      if (mean.rank === 1) {\n        scaleDer = sum(scaleDer, reductionAxes);\n      }\n      return reshape(scaleDer, mean.shape);\n    };\n    var derOffset = function derOffset() {\n      var offsetDer = dy;\n      if (mean.rank === 1) {\n        offsetDer = sum(offsetDer, reductionAxes);\n      }\n      return reshape(offsetDer, mean.shape);\n    };\n    return {\n      x: derX,\n      mean: derMean,\n      variance: derVariance,\n      scale: derScale,\n      offset: derOffset\n    };\n  }\n};","map":{"version":3,"names":["FusedBatchNorm","add","getReductionAxes","mul","reshape","rsqrt","scalar","sub","sum","tile","fusedBatchNormGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","attrs","varianceEpsilon","_saved","_slicedToArray","x","mean","variance","scale","scaleValue","reductionAxes","shape","tileShape","rank","i","length","push","xMinusMean","dyTimesScaleValue","oneOverSqrtVariance","minusHalfRCube","derX","derMean","meanDer","derVariance","varianceDer","derScale","xMinusMean2TimesRsqrt","scaleDer","derOffset","offsetDer","offset"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\gradients\\FusedBatchNorm_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {FusedBatchNorm, FusedBatchNormAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {add} from '../ops/add';\nimport {getReductionAxes} from '../ops/broadcast_util';\nimport {mul} from '../ops/mul';\nimport {reshape} from '../ops/reshape';\nimport {rsqrt} from '../ops/rsqrt';\nimport {scalar} from '../ops/scalar';\nimport {sub} from '../ops/sub';\nimport {sum} from '../ops/sum';\nimport {tile} from '../ops/tile';\nimport {Tensor} from '../tensor';\nimport {Rank, ShapeMap} from '../types';\n\nexport const fusedBatchNormGradConfig: GradConfig = {\n  kernelName: FusedBatchNorm,\n  inputsToSave: ['x', 'mean', 'variance', 'scale'],\n  gradFunc: <R extends Rank>(\n      dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const {varianceEpsilon} = attrs as unknown as FusedBatchNormAttrs;\n    const [x, mean, variance, scale] = saved;\n\n    const scaleValue = scale == null ? scalar(1) : scale;\n    const reductionAxes = getReductionAxes(mean.shape, x.shape);\n    const tileShape: number[] = [];\n    if (mean.rank === 1) {\n      for (let i = 0; i < x.shape.length - 1; ++i) {\n        tileShape.push(x.shape[i]);\n      }\n      tileShape.push(1);\n    }\n\n    const xMinusMean = sub(x, mean);\n    const dyTimesScaleValue = mul(dy, scaleValue);\n    const oneOverSqrtVariance = rsqrt(add(variance, scalar(varianceEpsilon)));\n    const minusHalfRCube = mul(\n        mul(mul(oneOverSqrtVariance, oneOverSqrtVariance), oneOverSqrtVariance),\n        scalar(-0.5));\n\n    const derX = () => {\n      if (mean.rank === 1) {\n        return reshape(\n            mul(mul(dy,\n                    tile(\n                        reshape(oneOverSqrtVariance, [1, 1, 1, mean.shape[0]]),\n                        tileShape)),\n                scaleValue),\n            x.shape);\n      } else {\n        return reshape(mul(mul(dy, oneOverSqrtVariance), scaleValue), x.shape);\n      }\n    };\n    const derMean = () => {\n      let meanDer =\n          mul(mul(oneOverSqrtVariance, scalar(-1)), dyTimesScaleValue);\n      if (mean.rank === 1) {\n        meanDer = sum(meanDer, reductionAxes);\n      }\n      return reshape(meanDer, mean.shape as ShapeMap[R]);\n    };\n    const derVariance = () => {\n      let varianceDer = mul(mul(minusHalfRCube, xMinusMean), dyTimesScaleValue);\n\n      if (mean.rank === 1) {\n        varianceDer = sum(varianceDer, reductionAxes);\n      }\n      return reshape(varianceDer, mean.shape as ShapeMap[R]);\n    };\n    const derScale = () => {\n      const xMinusMean2TimesRsqrt = mul(xMinusMean, oneOverSqrtVariance);\n\n      let scaleDer = mul(dy, xMinusMean2TimesRsqrt);\n      if (mean.rank === 1) {\n        scaleDer = sum(scaleDer, reductionAxes);\n      }\n      return reshape(scaleDer, mean.shape as ShapeMap[R]);\n    };\n    const derOffset = () => {\n      let offsetDer = dy;\n      if (mean.rank === 1) {\n        offsetDer = sum(offsetDer, reductionAxes);\n      }\n      return reshape(offsetDer, mean.shape as ShapeMap[R]);\n    };\n\n    return {\n      x: derX,\n      mean: derMean,\n      variance: derVariance,\n      scale: derScale,\n      offset: derOffset\n    };\n  }\n};\n"],"mappings":";AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,cAAc,QAA4B,iBAAiB;AAEnE,SAAQC,GAAG,QAAO,YAAY;AAC9B,SAAQC,gBAAgB,QAAO,uBAAuB;AACtD,SAAQC,GAAG,QAAO,YAAY;AAC9B,SAAQC,OAAO,QAAO,gBAAgB;AACtC,SAAQC,KAAK,QAAO,cAAc;AAClC,SAAQC,MAAM,QAAO,eAAe;AACpC,SAAQC,GAAG,QAAO,YAAY;AAC9B,SAAQC,GAAG,QAAO,YAAY;AAC9B,SAAQC,IAAI,QAAO,aAAa;AAIhC,OAAO,IAAMC,wBAAwB,GAAe;EAClDC,UAAU,EAAEX,cAAc;EAC1BY,YAAY,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC;EAChDC,QAAQ,EAAE,SAAAA,SACNC,EAAU,EAAEC,KAAe,EAAEC,KAAmB,EAAI;IACtD,IAAOC,eAAe,GAAID,KAAuC,CAA1DC,eAAe;IACtB,IAAAC,MAAA,GAAAC,cAAA,CAAmCJ,KAAK;MAAjCK,CAAC,GAAAF,MAAA;MAAEG,IAAI,GAAAH,MAAA;MAAEI,QAAQ,GAAAJ,MAAA;MAAEK,KAAK,GAAAL,MAAA;IAE/B,IAAMM,UAAU,GAAGD,KAAK,IAAI,IAAI,GAAGjB,MAAM,CAAC,CAAC,CAAC,GAAGiB,KAAK;IACpD,IAAME,aAAa,GAAGvB,gBAAgB,CAACmB,IAAI,CAACK,KAAK,EAAEN,CAAC,CAACM,KAAK,CAAC;IAC3D,IAAMC,SAAS,GAAa,EAAE;IAC9B,IAAIN,IAAI,CAACO,IAAI,KAAK,CAAC,EAAE;MACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,CAAC,CAACM,KAAK,CAACI,MAAM,GAAG,CAAC,EAAE,EAAED,CAAC,EAAE;QAC3CF,SAAS,CAACI,IAAI,CAACX,CAAC,CAACM,KAAK,CAACG,CAAC,CAAC,CAAC;;MAE5BF,SAAS,CAACI,IAAI,CAAC,CAAC,CAAC;;IAGnB,IAAMC,UAAU,GAAGzB,GAAG,CAACa,CAAC,EAAEC,IAAI,CAAC;IAC/B,IAAMY,iBAAiB,GAAG9B,GAAG,CAACW,EAAE,EAAEU,UAAU,CAAC;IAC7C,IAAMU,mBAAmB,GAAG7B,KAAK,CAACJ,GAAG,CAACqB,QAAQ,EAAEhB,MAAM,CAACW,eAAe,CAAC,CAAC,CAAC;IACzE,IAAMkB,cAAc,GAAGhC,GAAG,CACtBA,GAAG,CAACA,GAAG,CAAC+B,mBAAmB,EAAEA,mBAAmB,CAAC,EAAEA,mBAAmB,CAAC,EACvE5B,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;IAEjB,IAAM8B,IAAI,GAAG,SAAPA,IAAIA,CAAA,EAAQ;MAChB,IAAIf,IAAI,CAACO,IAAI,KAAK,CAAC,EAAE;QACnB,OAAOxB,OAAO,CACVD,GAAG,CAACA,GAAG,CAACW,EAAE,EACFL,IAAI,CACAL,OAAO,CAAC8B,mBAAmB,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEb,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EACtDC,SAAS,CAAC,CAAC,EACnBH,UAAU,CAAC,EACfJ,CAAC,CAACM,KAAK,CAAC;OACb,MAAM;QACL,OAAOtB,OAAO,CAACD,GAAG,CAACA,GAAG,CAACW,EAAE,EAAEoB,mBAAmB,CAAC,EAAEV,UAAU,CAAC,EAAEJ,CAAC,CAACM,KAAK,CAAC;;IAE1E,CAAC;IACD,IAAMW,OAAO,GAAG,SAAVA,OAAOA,CAAA,EAAQ;MACnB,IAAIC,OAAO,GACPnC,GAAG,CAACA,GAAG,CAAC+B,mBAAmB,EAAE5B,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE2B,iBAAiB,CAAC;MAChE,IAAIZ,IAAI,CAACO,IAAI,KAAK,CAAC,EAAE;QACnBU,OAAO,GAAG9B,GAAG,CAAC8B,OAAO,EAAEb,aAAa,CAAC;;MAEvC,OAAOrB,OAAO,CAACkC,OAAO,EAAEjB,IAAI,CAACK,KAAoB,CAAC;IACpD,CAAC;IACD,IAAMa,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAQ;MACvB,IAAIC,WAAW,GAAGrC,GAAG,CAACA,GAAG,CAACgC,cAAc,EAAEH,UAAU,CAAC,EAAEC,iBAAiB,CAAC;MAEzE,IAAIZ,IAAI,CAACO,IAAI,KAAK,CAAC,EAAE;QACnBY,WAAW,GAAGhC,GAAG,CAACgC,WAAW,EAAEf,aAAa,CAAC;;MAE/C,OAAOrB,OAAO,CAACoC,WAAW,EAAEnB,IAAI,CAACK,KAAoB,CAAC;IACxD,CAAC;IACD,IAAMe,QAAQ,GAAG,SAAXA,QAAQA,CAAA,EAAQ;MACpB,IAAMC,qBAAqB,GAAGvC,GAAG,CAAC6B,UAAU,EAAEE,mBAAmB,CAAC;MAElE,IAAIS,QAAQ,GAAGxC,GAAG,CAACW,EAAE,EAAE4B,qBAAqB,CAAC;MAC7C,IAAIrB,IAAI,CAACO,IAAI,KAAK,CAAC,EAAE;QACnBe,QAAQ,GAAGnC,GAAG,CAACmC,QAAQ,EAAElB,aAAa,CAAC;;MAEzC,OAAOrB,OAAO,CAACuC,QAAQ,EAAEtB,IAAI,CAACK,KAAoB,CAAC;IACrD,CAAC;IACD,IAAMkB,SAAS,GAAG,SAAZA,SAASA,CAAA,EAAQ;MACrB,IAAIC,SAAS,GAAG/B,EAAE;MAClB,IAAIO,IAAI,CAACO,IAAI,KAAK,CAAC,EAAE;QACnBiB,SAAS,GAAGrC,GAAG,CAACqC,SAAS,EAAEpB,aAAa,CAAC;;MAE3C,OAAOrB,OAAO,CAACyC,SAAS,EAAExB,IAAI,CAACK,KAAoB,CAAC;IACtD,CAAC;IAED,OAAO;MACLN,CAAC,EAAEgB,IAAI;MACPf,IAAI,EAAEgB,OAAO;MACbf,QAAQ,EAAEiB,WAAW;MACrBhB,KAAK,EAAEkB,QAAQ;MACfK,MAAM,EAAEF;KACT;EACH;CACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}