{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Fill } from '../kernel_names';\nimport { inferDtype } from '../util';\nimport { assertNonNegativeIntegerDimensions } from '../util_base';\n/**\r\n * Creates a `tf.Tensor` filled with a scalar value.\r\n *\r\n * ```js\r\n * tf.fill([2, 2], 4).print();\r\n * ```\r\n *\r\n * @param shape An array of integers defining the output tensor shape.\r\n * @param value The scalar value to fill the tensor with.\r\n * @param dtype The type of an element in the resulting tensor. Defaults to\r\n *     'float32' if the given param value is a number, otherwise 'string'.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n */\nfunction fill(shape, value, dtype) {\n  assertNonNegativeIntegerDimensions(shape);\n  dtype = dtype || inferDtype(value);\n  var attrs = {\n    shape: shape,\n    value: value,\n    dtype: dtype\n  };\n  return ENGINE.runKernel(Fill, {}, attrs);\n}\nexport { fill };","map":{"version":3,"names":["ENGINE","Fill","inferDtype","assertNonNegativeIntegerDimensions","fill","shape","value","dtype","attrs","runKernel"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\fill.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Fill, FillAttrs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {DataType, Rank, ShapeMap} from '../types';\nimport {inferDtype} from '../util';\nimport {assertNonNegativeIntegerDimensions} from '../util_base';\n\n/**\n * Creates a `tf.Tensor` filled with a scalar value.\n *\n * ```js\n * tf.fill([2, 2], 4).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param value The scalar value to fill the tensor with.\n * @param dtype The type of an element in the resulting tensor. Defaults to\n *     'float32' if the given param value is a number, otherwise 'string'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction fill<R extends Rank>(\n    shape: ShapeMap[R], value: number|string, dtype?: DataType): Tensor<R> {\n  assertNonNegativeIntegerDimensions(shape);\n\n  dtype = dtype || inferDtype(value);\n  const attrs: FillAttrs = {shape, value, dtype};\n\n  return ENGINE.runKernel(Fill, {}, attrs as unknown as NamedAttrMap);\n}\n\nexport {fill};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,IAAI,QAAkB,iBAAiB;AAI/C,SAAQC,UAAU,QAAO,SAAS;AAClC,SAAQC,kCAAkC,QAAO,cAAc;AAE/D;;;;;;;;;;;;;;AAcA,SAASC,IAAIA,CACTC,KAAkB,EAAEC,KAAoB,EAAEC,KAAgB;EAC5DJ,kCAAkC,CAACE,KAAK,CAAC;EAEzCE,KAAK,GAAGA,KAAK,IAAIL,UAAU,CAACI,KAAK,CAAC;EAClC,IAAME,KAAK,GAAc;IAACH,KAAK,EAALA,KAAK;IAAEC,KAAK,EAALA,KAAK;IAAEC,KAAK,EAALA;EAAK,CAAC;EAE9C,OAAOP,MAAM,CAACS,SAAS,CAACR,IAAI,EAAE,EAAE,EAAEO,KAAgC,CAAC;AACrE;AAEA,SAAQJ,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}