{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\r\n * @license\r\n * Copyright 2022 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { RaggedGather } from '@tensorflow/tfjs-core';\nimport { raggedGatherImpl } from './RaggedGather_impl';\nexport function raggedGather(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var paramsNestedSplits = inputs.paramsNestedSplits,\n    paramsDenseValues = inputs.paramsDenseValues,\n    indices = inputs.indices;\n  var outputRaggedRank = attrs.outputRaggedRank;\n  var $paramsNestedSplits = paramsNestedSplits.map(function (t) {\n    return backend.data.get(t.dataId).values;\n  });\n  var $paramsNestedSplitsShapes = paramsNestedSplits.map(function (t) {\n    return t.shape;\n  });\n  var $paramsDenseValues = backend.data.get(paramsDenseValues.dataId).values;\n  var $indices = backend.data.get(indices.dataId).values;\n  var _raggedGatherImpl = raggedGatherImpl($paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues, paramsDenseValues.shape, paramsDenseValues.dtype, $indices, indices.shape, outputRaggedRank),\n    _raggedGatherImpl2 = _slicedToArray(_raggedGatherImpl, 3),\n    outputNestedSplits = _raggedGatherImpl2[0],\n    outputDenseValues = _raggedGatherImpl2[1],\n    outputDenseValuesShape = _raggedGatherImpl2[2];\n  var outputNestedSplitsTensors = outputNestedSplits.map(function (splits) {\n    return backend.makeTensorInfo([splits.length], 'int32', splits);\n  });\n  var outputDenseValuesTensor = backend.makeTensorInfo(outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\nexport var raggedGatherConfig = {\n  kernelName: RaggedGather,\n  backendName: 'cpu',\n  kernelFunc: raggedGather\n};","map":{"version":3,"names":["RaggedGather","raggedGatherImpl","raggedGather","args","inputs","backend","attrs","paramsNestedSplits","paramsDenseValues","indices","outputRaggedRank","$paramsNestedSplits","map","t","data","get","dataId","values","$paramsNestedSplitsShapes","shape","$paramsDenseValues","$indices","_raggedGatherImpl","dtype","_raggedGatherImpl2","_slicedToArray","outputNestedSplits","outputDenseValues","outputDenseValuesShape","outputNestedSplitsTensors","splits","makeTensorInfo","length","outputDenseValuesTensor","concat","raggedGatherConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-cpu\\src\\kernels\\RaggedGather.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedGather, RaggedGatherAttrs, RaggedGatherInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {raggedGatherImpl} from './RaggedGather_impl';\n\nexport function raggedGather(args: {\n  inputs: RaggedGatherInputs,\n  backend: MathBackendCPU,\n  attrs: RaggedGatherAttrs\n}): TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {paramsNestedSplits, paramsDenseValues, indices} = inputs;\n  const {outputRaggedRank} = attrs;\n\n  const $paramsNestedSplits = paramsNestedSplits.map(\n      t => backend.data.get(t.dataId).values as TypedArray);\n  const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);\n  const $paramsDenseValues =\n      backend.data.get(paramsDenseValues.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n\n  const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] =\n      raggedGatherImpl(\n          $paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues,\n          paramsDenseValues.shape, paramsDenseValues.dtype, $indices,\n          indices.shape, outputRaggedRank);\n\n  const outputNestedSplitsTensors = outputNestedSplits.map(\n      (splits) => backend.makeTensorInfo([splits.length], 'int32', splits));\n\n  const outputDenseValuesTensor = backend.makeTensorInfo(\n      outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n\n  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\n\nexport const raggedGatherConfig: KernelConfig = {\n  kernelName: RaggedGather,\n  backendName: 'cpu',\n  kernelFunc: raggedGather as unknown as KernelFunc,\n};\n"],"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,YAAY,QAAsE,uBAAuB;AAI3I,SAAQC,gBAAgB,QAAO,qBAAqB;AAEpD,OAAM,SAAUC,YAAYA,CAACC,IAI5B;EACC,IAAOC,MAAM,GAAoBD,IAAI,CAA9BC,MAAM;IAAEC,OAAO,GAAWF,IAAI,CAAtBE,OAAO;IAAEC,KAAK,GAAIH,IAAI,CAAbG,KAAK;EAC7B,IAAOC,kBAAkB,GAAgCH,MAAM,CAAxDG,kBAAkB;IAAEC,iBAAiB,GAAaJ,MAAM,CAApCI,iBAAiB;IAAEC,OAAO,GAAIL,MAAM,CAAjBK,OAAO;EACrD,IAAOC,gBAAgB,GAAIJ,KAAK,CAAzBI,gBAAgB;EAEvB,IAAMC,mBAAmB,GAAGJ,kBAAkB,CAACK,GAAG,CAC9C,UAAAC,CAAC;IAAA,OAAIR,OAAO,CAACS,IAAI,CAACC,GAAG,CAACF,CAAC,CAACG,MAAM,CAAC,CAACC,MAAoB;EAAA,EAAC;EACzD,IAAMC,yBAAyB,GAAGX,kBAAkB,CAACK,GAAG,CAAC,UAAAC,CAAC;IAAA,OAAIA,CAAC,CAACM,KAAK;EAAA,EAAC;EACtE,IAAMC,kBAAkB,GACpBf,OAAO,CAACS,IAAI,CAACC,GAAG,CAACP,iBAAiB,CAACQ,MAAM,CAAC,CAACC,MAAoB;EACnE,IAAMI,QAAQ,GAAGhB,OAAO,CAACS,IAAI,CAACC,GAAG,CAACN,OAAO,CAACO,MAAM,CAAC,CAACC,MAAoB;EAEtE,IAAAK,iBAAA,GACIrB,gBAAgB,CACZU,mBAAmB,EAAEO,yBAAyB,EAAEE,kBAAkB,EAClEZ,iBAAiB,CAACW,KAAK,EAAEX,iBAAiB,CAACe,KAAK,EAAEF,QAAQ,EAC1DZ,OAAO,CAACU,KAAK,EAAET,gBAAgB,CAAC;IAAAc,kBAAA,GAAAC,cAAA,CAAAH,iBAAA;IAJjCI,kBAAkB,GAAAF,kBAAA;IAAEG,iBAAiB,GAAAH,kBAAA;IAAEI,sBAAsB,GAAAJ,kBAAA;EAMpE,IAAMK,yBAAyB,GAAGH,kBAAkB,CAACd,GAAG,CACpD,UAACkB,MAAM;IAAA,OAAKzB,OAAO,CAAC0B,cAAc,CAAC,CAACD,MAAM,CAACE,MAAM,CAAC,EAAE,OAAO,EAAEF,MAAM,CAAC;EAAA,EAAC;EAEzE,IAAMG,uBAAuB,GAAG5B,OAAO,CAAC0B,cAAc,CAClDH,sBAAsB,EAAEpB,iBAAiB,CAACe,KAAK,EAAEI,iBAAiB,CAAC;EAEvE,OAAOE,yBAAyB,CAACK,MAAM,CAAC,CAACD,uBAAuB,CAAC,CAAC;AACpE;AAEA,OAAO,IAAME,kBAAkB,GAAiB;EAC9CC,UAAU,EAAEpC,YAAY;EACxBqC,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAEpC;CACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}