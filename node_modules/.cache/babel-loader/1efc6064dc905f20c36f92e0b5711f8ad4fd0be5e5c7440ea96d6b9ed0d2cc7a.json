{"ast":null,"code":"import _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport var LRNProgram = /*#__PURE__*/_createClass(function LRNProgram(xShape, radius, bias, alpha, beta) {\n  _classCallCheck(this, LRNProgram);\n  this.variableNames = ['x'];\n  this.outputShape = [];\n  var rad = radius;\n  var maxD = xShape[3] - 1;\n  this.outputShape = xShape;\n  // optimize pow(bias + alpha * sum, -beta)\n  // src: https://github.com/tensorflow/tensorflow/..\n  // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n  // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n  var powOperator;\n  var basis = \"float(\".concat(bias, \") + float(\").concat(alpha, \") * sum\");\n  if (beta === 0.5) {\n    powOperator = \"inversesqrt(\".concat(basis, \")\");\n  } else if (beta === 1.0) {\n    powOperator = \"1.0/(\".concat(basis, \")\");\n  } else {\n    powOperator = \"exp(log(\".concat(basis, \") * float(-\").concat(beta, \"));\");\n  }\n  this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int r = coords[1];\\n        int c = coords[2];\\n        int d = coords[3];\\n        float x = getX(b, r, c, d);\\n        float sum = 0.0;\\n        for (int j = -\".concat(rad, \"; j <= \").concat(rad, \"; j++) {\\n          int idx = d + j;\\n          if (idx >= 0 && idx <=  \").concat(maxD, \") {\\n            float z = getX(b, r, c, idx);\\n            sum += z * z;\\n          }\\n        }\\n        float val = x * \").concat(powOperator, \";\\n        setOutput(val);\\n      }\\n    \");\n});","map":{"version":3,"names":["LRNProgram","_createClass","xShape","radius","bias","alpha","beta","_classCallCheck","variableNames","outputShape","rad","maxD","powOperator","basis","concat","userCode"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\lrn_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n  }\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAmBA,WAAaA,UAAU,gBAAAC,YAAA,CAKrB,SAAAD,WACIE,MAAgB,EAAEC,MAAc,EAAEC,IAAY,EAAEC,KAAa,EAC7DC,IAAY;EAAAC,eAAA,OAAAP,UAAA;EANhB,KAAAQ,aAAa,GAAG,CAAC,GAAG,CAAC;EACrB,KAAAC,WAAW,GAAa,EAAE;EAMxB,IAAMC,GAAG,GAAGP,MAAM;EAClB,IAAMQ,IAAI,GAAGT,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;EAC1B,IAAI,CAACO,WAAW,GAAGP,MAAM;EAEzB;EACA;EACA;EACA;EACA,IAAIU,WAAW;EACf,IAAMC,KAAK,YAAAC,MAAA,CAAYV,IAAI,gBAAAU,MAAA,CAAaT,KAAK,YAAS;EACtD,IAAIC,IAAI,KAAK,GAAG,EAAE;IAChBM,WAAW,kBAAAE,MAAA,CAAkBD,KAAK,MAAG;GACtC,MAAM,IAAIP,IAAI,KAAK,GAAG,EAAE;IACvBM,WAAW,WAAAE,MAAA,CAAWD,KAAK,MAAG;GAC/B,MAAM;IACLD,WAAW,cAAAE,MAAA,CAAcD,KAAK,iBAAAC,MAAA,CAAcR,IAAI,QAAK;;EAGvD,IAAI,CAACS,QAAQ,6QAAAD,MAAA,CASOJ,GAAG,aAAAI,MAAA,CAAUJ,GAAG,8EAAAI,MAAA,CAEJH,IAAI,iIAAAG,MAAA,CAKdF,WAAW,8CAGhC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}