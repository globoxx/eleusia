{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport * as util from './util';\nexport var Profiler = /*#__PURE__*/function () {\n  function Profiler(backendTimer, logger) {\n    _classCallCheck(this, Profiler);\n    this.backendTimer = backendTimer;\n    this.logger = logger;\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n  _createClass(Profiler, [{\n    key: \"profileKernel\",\n    value: function profileKernel(kernelName, inputs, f) {\n      var outputs;\n      var holdResultWrapperFn = function holdResultWrapperFn() {\n        outputs = f();\n      };\n      var timer;\n      var start = util.now();\n      if (this.backendTimer.timerAvailable()) {\n        timer = this.backendTimer.time(holdResultWrapperFn);\n      } else {\n        holdResultWrapperFn();\n        var _iterator = _createForOfIteratorHelper(outputs),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var output = _step.value;\n            output.dataSync();\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        timer = Promise.resolve({\n          kernelMs: util.now() - start\n        });\n      }\n      if (env().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {\n        var _loop = function _loop() {\n          var output = outputs[i];\n          // Dangling promise here because we don't want to propagate up\n          // asynchronicity.\n          output.data().then(function (tensorVals) {\n            checkComputationForErrors(tensorVals, output.dtype, kernelName);\n          });\n        };\n        for (var i = 0; i < outputs.length; i++) {\n          _loop();\n        }\n      }\n      var kernelProfile = {\n        kernelName: kernelName,\n        outputs: outputs,\n        inputs: inputs,\n        timeMs: timer.then(function (timing) {\n          return timing.kernelMs;\n        }),\n        extraInfo: timer.then(function (timing) {\n          return timing.getExtraProfileInfo != null ? timing.getExtraProfileInfo() : '';\n        })\n      };\n      return kernelProfile;\n    }\n  }, {\n    key: \"logKernelProfile\",\n    value: function logKernelProfile(kernelProfile) {\n      var _this = this;\n      var kernelName = kernelProfile.kernelName,\n        outputs = kernelProfile.outputs,\n        timeMs = kernelProfile.timeMs,\n        inputs = kernelProfile.inputs,\n        extraInfo = kernelProfile.extraInfo;\n      outputs.forEach(function (result) {\n        Promise.all([result.data(), timeMs, extraInfo]).then(function (valueContainer) {\n          _this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);\n        });\n      });\n    }\n  }]);\n  return Profiler;\n}();\nexport function checkComputationForErrors(vals, dtype, kernelName) {\n  if (dtype !== 'float32') {\n    // Only floating point computations will generate NaN values\n    return false;\n  }\n  for (var i = 0; i < vals.length; i++) {\n    var num = vals[i];\n    if (isNaN(num) || !isFinite(num)) {\n      // Throwing custom exception so behavior is testable.\n      console.warn(\"Found \".concat(num, \" in the result of '\").concat(kernelName, \"'\"));\n      return true;\n    }\n  }\n  return false;\n}\nexport var Logger = /*#__PURE__*/function () {\n  function Logger() {\n    _classCallCheck(this, Logger);\n  }\n  _createClass(Logger, [{\n    key: \"logKernelProfile\",\n    value: function logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {\n      var time = typeof timeMs === 'number' ? util.rightPad(\"\".concat(timeMs, \"ms\"), 9) : timeMs['error'];\n      var paddedName = util.rightPad(name, 25);\n      var rank = result.rank;\n      var size = result.size;\n      var shape = util.rightPad(result.shape.toString(), 14);\n      var inputShapesDescription = '';\n      for (var _name in inputs) {\n        var input = inputs[_name];\n        if (input != null) {\n          // The input might be a non-tensor (e.g HTMLImageElement), in which case\n          // we claim the output shape as input shape.\n          var inputShape = input.shape || result.shape;\n          var inputRank = inputShape.length;\n          inputShapesDescription += \"\".concat(_name, \": \").concat(inputRank, \"D \").concat(inputRank > 0 ? inputShape : '', \" \");\n        }\n      }\n      console.log(\"%c\".concat(paddedName, \"\\t%c\").concat(time, \"\\t%c\").concat(rank, \"D \").concat(shape, \"\\t%c\").concat(size, \"\\t%c\").concat(inputShapesDescription, \"\\t%c\").concat(extraInfo), 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');\n    }\n  }]);\n  return Logger;\n}();","map":{"version":3,"names":["env","util","Profiler","backendTimer","logger","_classCallCheck","Logger","_createClass","key","value","profileKernel","kernelName","inputs","f","outputs","holdResultWrapperFn","timer","start","now","timerAvailable","time","_iterator","_createForOfIteratorHelper","_step","s","n","done","output","dataSync","err","e","Promise","resolve","kernelMs","getBool","_loop","i","data","then","tensorVals","checkComputationForErrors","dtype","length","kernelProfile","timeMs","timing","extraInfo","getExtraProfileInfo","logKernelProfile","_this","forEach","result","all","valueContainer","vals","num","isNaN","isFinite","console","warn","concat","name","rightPad","paddedName","rank","size","shape","toString","inputShapesDescription","input","inputShape","inputRank","log"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\profiler.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendTimer, BackendTimingInfo} from './backends/backend';\nimport {env} from './environment';\nimport {Tensor} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport {DataType, DataTypeMap, TypedArray} from './types';\nimport * as util from './util';\n\nexport type KernelProfile = {\n  kernelName: string,\n  outputs: Tensor[],\n  inputs: NamedTensorMap,\n  timeMs: Promise<number|{error: string}>,\n  extraInfo: Promise<string>\n};\n\nexport class Profiler {\n  constructor(private backendTimer: BackendTimer, private logger?: Logger) {\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n\n  profileKernel(kernelName: string, inputs: NamedTensorMap, f: () => Tensor[]):\n      KernelProfile {\n    let outputs: Tensor[];\n    const holdResultWrapperFn = () => {\n      outputs = f();\n    };\n    let timer: Promise<BackendTimingInfo>;\n    const start = util.now();\n    if (this.backendTimer.timerAvailable()) {\n      timer = this.backendTimer.time(holdResultWrapperFn);\n    } else {\n      holdResultWrapperFn();\n      for (const output of outputs) {\n        output.dataSync();\n      }\n      timer = Promise.resolve({kernelMs: util.now() - start});\n    }\n    if (env().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {\n      for (let i = 0; i < outputs.length; i++) {\n        const output = outputs[i];\n        // Dangling promise here because we don't want to propagate up\n        // asynchronicity.\n        output.data().then(tensorVals => {\n          checkComputationForErrors(tensorVals, output.dtype, kernelName);\n        });\n      }\n    }\n\n    const kernelProfile = {\n      kernelName,\n      outputs,\n      inputs,\n      timeMs: timer.then(timing => timing.kernelMs),\n      extraInfo: timer.then(\n          timing => timing.getExtraProfileInfo != null ?\n              timing.getExtraProfileInfo() :\n              '')\n    };\n    return kernelProfile;\n  }\n\n  logKernelProfile(kernelProfile: KernelProfile): void {\n    const {kernelName, outputs, timeMs, inputs, extraInfo} = kernelProfile;\n\n    outputs.forEach(result => {\n      Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {\n        this.logger.logKernelProfile(\n            kernelName, result, valueContainer[0], valueContainer[1], inputs,\n            valueContainer[2]);\n      });\n    });\n  }\n}\n\nexport function checkComputationForErrors<D extends DataType>(\n    vals: DataTypeMap[D], dtype: D, kernelName: string): boolean {\n  if (dtype !== 'float32') {\n    // Only floating point computations will generate NaN values\n    return false;\n  }\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i] as number;\n    if (isNaN(num) || !isFinite(num)) {\n      // Throwing custom exception so behavior is testable.\n      console.warn(`Found ${num} in the result of '${kernelName}'`);\n      return true;\n    }\n  }\n  return false;\n}\n\nexport class Logger {\n  logKernelProfile(\n      name: string, result: Tensor, vals: TypedArray,\n      timeMs: number|{error: string}, inputs: NamedTensorMap,\n      extraInfo?: string) {\n    const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) :\n                                              timeMs['error'];\n    const paddedName = util.rightPad(name, 25);\n    const rank = result.rank;\n    const size = result.size;\n    const shape = util.rightPad(result.shape.toString(), 14);\n    let inputShapesDescription = '';\n\n    for (const name in inputs) {\n      const input = inputs[name];\n      if (input != null) {\n        // The input might be a non-tensor (e.g HTMLImageElement), in which case\n        // we claim the output shape as input shape.\n        const inputShape = input.shape || result.shape;\n        const inputRank = inputShape.length;\n        inputShapesDescription +=\n            `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n      }\n    }\n\n    console.log(\n        `%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${\n            inputShapesDescription}\\t%c${extraInfo}`,\n        'font-weight:bold', 'color:red', 'color:blue', 'color: orange',\n        'color: green', 'color: steelblue');\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}