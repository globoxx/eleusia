{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */\nimport { DataSource } from '../datasource';\nimport { urlChunkIterator } from '../iterators/url_chunk_iterator';\nimport { isLocalPath } from '../util/source_util';\nimport { FileDataSource } from './file_data_source';\n/*\r\n * Represents a URL readable as a stream of binary data chunks.\r\n */\nexport var URLDataSource = /*#__PURE__*/function (_DataSource) {\n  _inherits(URLDataSource, _DataSource);\n  var _super = _createSuper(URLDataSource);\n  /**\r\n   * Create a `URLDataSource`.\r\n   *\r\n   * @param url A source URL string, or a `Request` object.\r\n   * @param options Options passed to the underlying `FileChunkIterator`s,\r\n   *   such as {chunksize: 1024}.\r\n   */\n  function URLDataSource(url) {\n    var _this;\n    var fileOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, URLDataSource);\n    _this = _super.call(this);\n    _this.url = url;\n    _this.fileOptions = fileOptions;\n    return _this;\n  }\n  // TODO(soergel): provide appropriate caching options.  Currently this\n  // will download the URL anew for each call to iterator().  Since we have\n  // to treat the downloaded file as a blob/buffer anyway, we may as well retain\n  // it-- but that raises GC issues.  Also we may want a persistent disk cache.\n  _createClass(URLDataSource, [{\n    key: \"iterator\",\n    value: function () {\n      var _iterator = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!isLocalPath(this.url)) {\n                _context.next = 4;\n                break;\n              }\n              return _context.abrupt(\"return\", new FileDataSource(this.url, this.fileOptions).iterator());\n            case 4:\n              return _context.abrupt(\"return\", urlChunkIterator(this.url, this.fileOptions));\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function iterator() {\n        return _iterator.apply(this, arguments);\n      }\n      return iterator;\n    }()\n  }]);\n  return URLDataSource;\n}(DataSource);","map":{"version":3,"names":["DataSource","urlChunkIterator","isLocalPath","FileDataSource","URLDataSource","_DataSource","_inherits","_super","_createSuper","url","_this","fileOptions","arguments","length","undefined","_classCallCheck","call","_createClass","key","value","_iterator","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","iterator","stop","apply"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-data\\src\\sources\\url_data_source.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {DataSource} from '../datasource';\nimport {ByteChunkIterator} from '../iterators/byte_chunk_iterator';\nimport {FileChunkIteratorOptions} from '../iterators/file_chunk_iterator';\nimport {urlChunkIterator} from '../iterators/url_chunk_iterator';\nimport {isLocalPath} from '../util/source_util';\nimport {FileDataSource} from './file_data_source';\n\n/*\n * Represents a URL readable as a stream of binary data chunks.\n */\nexport class URLDataSource extends DataSource {\n  /**\n   * Create a `URLDataSource`.\n   *\n   * @param url A source URL string, or a `Request` object.\n   * @param options Options passed to the underlying `FileChunkIterator`s,\n   *   such as {chunksize: 1024}.\n   */\n  constructor(\n      protected readonly url: RequestInfo,\n      protected readonly fileOptions: FileChunkIteratorOptions = {}) {\n    super();\n  }\n\n  // TODO(soergel): provide appropriate caching options.  Currently this\n  // will download the URL anew for each call to iterator().  Since we have\n  // to treat the downloaded file as a blob/buffer anyway, we may as well retain\n  // it-- but that raises GC issues.  Also we may want a persistent disk cache.\n  async iterator(): Promise<ByteChunkIterator> {\n    if (isLocalPath(this.url)) {\n      return (new FileDataSource(this.url as string, this.fileOptions))\n          .iterator();\n    } else {\n      return urlChunkIterator(this.url, this.fileOptions);\n    }\n  }\n}\n"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;AAkBA,SAAQA,UAAU,QAAO,eAAe;AAGxC,SAAQC,gBAAgB,QAAO,iCAAiC;AAChE,SAAQC,WAAW,QAAO,qBAAqB;AAC/C,SAAQC,cAAc,QAAO,oBAAoB;AAEjD;;;AAGA,WAAaC,aAAc,0BAAAC,WAAA;EAAAC,SAAA,CAAAF,aAAA,EAAAC,WAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,aAAA;EACzB;;;;;;;EAOA,SAAAA,cACuBK,GAAgB,EAC0B;IAAA,IAAAC,KAAA;IAAA,IAA1CC,WAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAwC,EAAE;IAAAG,eAAA,OAAAX,aAAA;IAC/DM,KAAA,GAAAH,MAAA,CAAAS,IAAA;IAFqBN,KAAA,CAAAD,GAAG,GAAHA,GAAG;IACHC,KAAA,CAAAC,WAAW,GAAXA,WAAW;IAA+B,OAAAD,KAAA;EAEjE;EAEA;EACA;EACA;EACA;EAAAO,YAAA,CAAAb,aAAA;IAAAc,GAAA;IAAAC,KAAA;MAAA,IAAAC,SAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CACA,SAAAC,QAAA;QAAA,OAAAF,mBAAA,GAAAG,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAA,KACM3B,WAAW,CAAC,IAAI,CAACO,GAAG,CAAC;gBAAAkB,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,OAAAF,QAAA,CAAAG,MAAA,WACf,IAAI3B,cAAc,CAAC,IAAI,CAACM,GAAa,EAAE,IAAI,CAACE,WAAW,CAAC,CAC3DoB,QAAQ,EAAE;YAAA;cAAA,OAAAJ,QAAA,CAAAG,MAAA,WAER7B,gBAAgB,CAAC,IAAI,CAACQ,GAAG,EAAE,IAAI,CAACE,WAAW,CAAC;YAAA;YAAA;cAAA,OAAAgB,QAAA,CAAAK,IAAA;UAAA;QAAA,GAAAR,OAAA;MAAA,CAEtD;MAAA,SAAAO,SAAA;QAAA,OAAAX,SAAA,CAAAa,KAAA,OAAArB,SAAA;MAAA;MAAA,OAAAmB,QAAA;IAAA;EAAA;EAAA,OAAA3B,aAAA;AAAA,EAzBgCJ,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}