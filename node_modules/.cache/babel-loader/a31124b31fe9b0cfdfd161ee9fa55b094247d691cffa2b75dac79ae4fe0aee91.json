{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2023 Google LLC.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { arraysEqualWithNull } from '../util_base';\nimport { op } from './operation';\n/**\r\n * Checks the input tensor mathes the given shape.\r\n *\r\n * Given an input tensor, returns a new tensor with the same values as the\r\n * input tensor with shape `shape`.\r\n *\r\n * The method supports the null value in tensor. It will still check the shapes,\r\n * and null is a placeholder.\r\n *\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n * const y = tf.tensor1d([1, null, 3, 4]);\r\n * const z = tf.tensor2d([1, 2, 3, 4], [2,2]);\r\n * tf.ensureShape(x, [4]).print();\r\n * tf.ensureShape(y, [4]).print();\r\n * tf.ensureShape(z, [null, 2]).print();\r\n * ```\r\n *\r\n * @param x The input tensor to be ensured.\r\n * @param shape A TensorShape representing the shape of this tensor, an array\r\n *     or null.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\r\n */\nfunction ensureShape_(x, shape) {\n  var $x = convertToTensor(x, 'x', 'ensureShape', 'string_or_numeric');\n  if (!arraysEqualWithNull($x.shape, shape)) {\n    throw new Error(\"EnsureShape: Shape of tensor \".concat($x.shape, \" is not compatible with expected shape \").concat(shape));\n  }\n  return x;\n}\nexport var ensureShape = /* @__PURE__ */op({\n  ensureShape_: ensureShape_\n});","map":{"version":3,"names":["convertToTensor","arraysEqualWithNull","op","ensureShape_","x","shape","$x","Error","concat","ensureShape"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\ensure_shape.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {Rank, ShapeMap} from '../types';\nimport {arraysEqualWithNull} from '../util_base';\n\nimport {op} from './operation';\n\n/**\n * Checks the input tensor mathes the given shape.\n *\n * Given an input tensor, returns a new tensor with the same values as the\n * input tensor with shape `shape`.\n *\n * The method supports the null value in tensor. It will still check the shapes,\n * and null is a placeholder.\n *\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const y = tf.tensor1d([1, null, 3, 4]);\n * const z = tf.tensor2d([1, 2, 3, 4], [2,2]);\n * tf.ensureShape(x, [4]).print();\n * tf.ensureShape(y, [4]).print();\n * tf.ensureShape(z, [null, 2]).print();\n * ```\n *\n * @param x The input tensor to be ensured.\n * @param shape A TensorShape representing the shape of this tensor, an array\n *     or null.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction ensureShape_<R extends Rank>(x: Tensor, shape: ShapeMap[R]): Tensor {\n  const $x = convertToTensor(x, 'x', 'ensureShape', 'string_or_numeric');\n  if (!arraysEqualWithNull($x.shape, shape)) {\n    throw new Error(`EnsureShape: Shape of tensor ${\n        $x.shape} is not compatible with expected shape ${shape}`);\n  }\n\n  return x;\n}\nexport const ensureShape = /* @__PURE__ */ op({ensureShape_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,eAAe,QAAO,oBAAoB;AAElD,SAAQC,mBAAmB,QAAO,cAAc;AAEhD,SAAQC,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAASC,YAAYA,CAAiBC,CAAS,EAAEC,KAAkB;EACjE,IAAMC,EAAE,GAAGN,eAAe,CAACI,CAAC,EAAE,GAAG,EAAE,aAAa,EAAE,mBAAmB,CAAC;EACtE,IAAI,CAACH,mBAAmB,CAACK,EAAE,CAACD,KAAK,EAAEA,KAAK,CAAC,EAAE;IACzC,MAAM,IAAIE,KAAK,iCAAAC,MAAA,CACXF,EAAE,CAACD,KAAK,6CAAAG,MAAA,CAA0CH,KAAK,EAAG;;EAGhE,OAAOD,CAAC;AACV;AACA,OAAO,IAAMK,WAAW,GAAG,eAAgBP,EAAE,CAAC;EAACC,YAAY,EAAZA;AAAY,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}