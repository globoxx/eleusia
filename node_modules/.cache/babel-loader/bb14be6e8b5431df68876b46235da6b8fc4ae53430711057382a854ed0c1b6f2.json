{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { createSimpleUnaryImpl } from './unary_impl';\n/**\r\n * Template that creates a `KernelFunc` for unary ops.\r\n * @param name Kernel name.\r\n * @param op A `SimpleUnaryOperation` for the kernel.\r\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\r\n *     result has the same dtype as the input. This is mainly used in certain\r\n *     kernels that return bool type, such as isFinite, isInf, etc.\r\n */\nexport function unaryKernelFunc(name, op, dtype) {\n  var impl = createSimpleUnaryImpl(op);\n  return unaryKernelFuncFromImpl(name, impl, dtype);\n}\n/**\r\n * Template that creates a `KernelFunc` for unary ops from the given\r\n * `SimpleUnaryImpl`..\r\n * @param name Kernel name.\r\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\r\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\r\n *     result has the same dtype as the input. This is mainly used in certain\r\n *     kernels that return bool type, such as isFinite, isInf, etc.\r\n */\nexport function unaryKernelFuncFromImpl(name, unaryImpl, dtype) {\n  return function (_ref) {\n    var inputs = _ref.inputs,\n      attrs = _ref.attrs,\n      backend = _ref.backend;\n    var x = inputs.x;\n    assertNotComplex(x, name);\n    var cpuBackend = backend;\n    var values = cpuBackend.data.get(x.dataId).values;\n    var decoded;\n    if (x.dtype === 'string') {\n      if (!Array.isArray(values)) {\n        throw new Error('String tensor\\'s value was not an instance of Array');\n      }\n      decoded = backend_util.fromUint8ToStringArray(values);\n    } else {\n      decoded = values;\n    }\n    var $dtype = dtype || x.dtype;\n    var newValues = unaryImpl(decoded, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}","map":{"version":3,"names":["backend_util","assertNotComplex","createSimpleUnaryImpl","unaryKernelFunc","name","op","dtype","impl","unaryKernelFuncFromImpl","unaryImpl","_ref","inputs","attrs","backend","x","cpuBackend","values","data","get","dataId","decoded","Array","isArray","Error","fromUint8ToStringArray","$dtype","newValues","makeTensorInfo","shape"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-cpu\\src\\utils\\unary_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataTypeFor, KernelFunc, UnaryInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {createSimpleUnaryImpl} from './unary_impl';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc<I extends number | string = number,\n  O extends number | string = number>(\n  name: string, op: SimpleUnaryOperation<I, O>,\n  dtype?: DataTypeFor<O>): KernelFunc {\n\n  const impl = createSimpleUnaryImpl<I, O>(op);\n\n  return unaryKernelFuncFromImpl<I, O>(name, impl, dtype);\n}\n\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl<I extends number | string = number,\n  O extends number | string = number>(\n  name: string, unaryImpl: SimpleUnaryImpl<I, O>,\n  dtype?: DataTypeFor<O>): KernelFunc {\n\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values;\n    let decoded: ArrayLike<I>;\n    if (x.dtype === 'string') {\n      if (!Array.isArray(values)) {\n        throw new Error('String tensor\\'s value was not an instance of Array');\n      }\n      decoded = backend_util.fromUint8ToStringArray(values) as unknown as\n        ArrayLike<I>;\n    } else {\n      decoded = values as unknown as ArrayLike<I>;\n    }\n\n    const $dtype = dtype || x.dtype as DataTypeFor<O>;\n    const newValues = unaryImpl(decoded, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,QAA6C,uBAAuB;AAGxF,SAAQC,gBAAgB,QAAO,aAAa;AAC5C,SAAQC,qBAAqB,QAAO,cAAc;AAIlD;;;;;;;;AAQA,OAAM,SAAUC,eAAeA,CAE7BC,IAAY,EAAEC,EAA8B,EAC5CC,KAAsB;EAEtB,IAAMC,IAAI,GAAGL,qBAAqB,CAAOG,EAAE,CAAC;EAE5C,OAAOG,uBAAuB,CAAOJ,IAAI,EAAEG,IAAI,EAAED,KAAK,CAAC;AACzD;AAEA;;;;;;;;;AASA,OAAM,SAAUE,uBAAuBA,CAErCJ,IAAY,EAAEK,SAAgC,EAC9CH,KAAsB;EAEtB,OAAO,UAAAI,IAAA,EAA6B;IAAA,IAA3BC,MAAM,GAAAD,IAAA,CAANC,MAAM;MAAEC,KAAK,GAAAF,IAAA,CAALE,KAAK;MAAEC,OAAO,GAAAH,IAAA,CAAPG,OAAO;IAC7B,IAAOC,CAAC,GAAIH,MAAqB,CAA1BG,CAAC;IACRb,gBAAgB,CAACa,CAAC,EAAEV,IAAI,CAAC;IAEzB,IAAMW,UAAU,GAAGF,OAAyB;IAC5C,IAAMG,MAAM,GAAGD,UAAU,CAACE,IAAI,CAACC,GAAG,CAACJ,CAAC,CAACK,MAAM,CAAC,CAACH,MAAM;IACnD,IAAII,OAAqB;IACzB,IAAIN,CAAC,CAACR,KAAK,KAAK,QAAQ,EAAE;MACxB,IAAI,CAACe,KAAK,CAACC,OAAO,CAACN,MAAM,CAAC,EAAE;QAC1B,MAAM,IAAIO,KAAK,CAAC,qDAAqD,CAAC;;MAExEH,OAAO,GAAGpB,YAAY,CAACwB,sBAAsB,CAACR,MAAM,CACtC;KACf,MAAM;MACLI,OAAO,GAAGJ,MAAiC;;IAG7C,IAAMS,MAAM,GAAGnB,KAAK,IAAIQ,CAAC,CAACR,KAAuB;IACjD,IAAMoB,SAAS,GAAGjB,SAAS,CAACW,OAAO,EAAEK,MAAM,EAAEb,KAAK,CAAC;IACnD,OAAOG,UAAU,CAACY,cAAc,CAACb,CAAC,CAACc,KAAK,EAAEH,MAAM,EAAEC,SAAS,CAAC;EAC9D,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}