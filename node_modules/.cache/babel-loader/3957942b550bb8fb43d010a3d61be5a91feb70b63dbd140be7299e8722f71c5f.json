{"ast":null,"code":"import _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport var ConcatPackedProgram = /*#__PURE__*/_createClass(function ConcatPackedProgram(shapes, axis) {\n  _classCallCheck(this, ConcatPackedProgram);\n  this.packedInputs = true;\n  this.packedOutput = true;\n  this.outputShape = [];\n  this.outputShape = backend_util.computeOutShape(shapes, axis);\n  var shape = this.outputShape;\n  var rank = shape.length;\n  var dtype = getCoordsDataType(rank);\n  var coords = getChannels('coords', rank);\n  var channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n  this.variableNames = shapes.map(function (_, i) {\n    return \"T\".concat(i);\n  });\n  var offsets = new Array(shapes.length - 1);\n  offsets[0] = shapes[0][axis];\n  for (var i = 1; i < offsets.length; i++) {\n    offsets[i] = offsets[i - 1] + shapes[i][axis];\n  }\n  var channel = channels[axis];\n  var lastChannels = channels.slice(-2);\n  var allChannels = channels.join();\n  var getValueSnippet = \"if (\".concat(channel, \" < \").concat(offsets[0], \") {\\n        return getChannel(\\n            getT0(\").concat(allChannels, \"), vec2(\").concat(lastChannels.join(), \"));\\n        }\");\n  for (var _i = 1; _i < offsets.length; _i++) {\n    var _shift = offsets[_i - 1];\n    // Note: the >= comparison below may seem unnecessary given the check\n    // above but is needed to workaround branch execution issues on some\n    // devices. It makes all the conditions exclusive without relying on\n    // execution order.\n    getValueSnippet += \"\\n        if (\".concat(channel, \" < \").concat(offsets[_i], \"  && \").concat(channel, \" >= \").concat(offsets[_i - 1], \") {\\n          return getChannel(\\n            getT\").concat(_i, \"(\").concat(shiftedChannels(channels, channel, _shift), \"),\\n            vec2(\").concat(shiftedChannels(lastChannels, channel, _shift), \"));\\n        }\");\n  }\n  var lastIndex = offsets.length;\n  var shift = offsets[offsets.length - 1];\n  getValueSnippet += \"\\n        return getChannel(\\n          getT\".concat(lastIndex, \"(\").concat(shiftedChannels(channels, channel, shift), \"),\\n          vec2(\").concat(shiftedChannels(lastChannels, channel, shift), \"));\");\n  this.userCode = \"\\n      float getValue(\".concat(channels.map(function (x) {\n    return 'int ' + x;\n  }), \") {\\n        \").concat(getValueSnippet, \"\\n      }\\n\\n      void main() {\\n        \").concat(dtype, \" coords = getOutputCoords();\\n        vec4 result = vec4(getValue(\").concat(coords, \"), 0., 0., 0.);\\n\\n        \").concat(coords[rank - 1], \" = \").concat(coords[rank - 1], \" + 1;\\n        if (\").concat(coords[rank - 1], \" < \").concat(shape[rank - 1], \") {\\n          result.g = getValue(\").concat(coords, \");\\n        }\\n\\n        \").concat(coords[rank - 2], \" = \").concat(coords[rank - 2], \" + 1;\\n        if (\").concat(coords[rank - 2], \" < \").concat(shape[rank - 2], \") {\\n          result.a = getValue(\").concat(coords, \");\\n        }\\n\\n        \").concat(coords[rank - 1], \" = \").concat(coords[rank - 1], \" - 1;\\n        if (\").concat(coords[rank - 2], \" < \").concat(shape[rank - 2], \" &&\\n            \").concat(coords[rank - 1], \" < \").concat(shape[rank - 1], \") {\\n          result.b = getValue(\").concat(coords, \");\\n        }\\n        setOutput(result);\\n      }\\n    \");\n});\n/**\r\n * Return an expression for coordinates into a vector where a given channel\r\n * will be offset by [shift].\r\n *\r\n * @param channels the channels to consider\r\n * @param channel the channel we want shifted\r\n * @param shift  the amount to subtract from the channel.\r\n *\r\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\r\n * have the shift applied.\r\n */\nfunction shiftedChannels(channels, channel, shift) {\n  var channelIdx = channels.indexOf(channel);\n  var res = channels.map(function (c, idx) {\n    if (idx === channelIdx) {\n      return \"\".concat(c, \" - \").concat(shift);\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n}","map":{"version":3,"names":["backend_util","getChannels","getCoordsDataType","ConcatPackedProgram","_createClass","shapes","axis","_classCallCheck","packedInputs","packedOutput","outputShape","computeOutShape","shape","rank","length","dtype","coords","channels","slice","variableNames","map","_","i","concat","offsets","Array","channel","lastChannels","allChannels","join","getValueSnippet","shift","shiftedChannels","lastIndex","userCode","x","channelIdx","indexOf","res","c","idx"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\concat_packed_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ConcatPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(shapes: number[][], axis: number) {\n    this.outputShape = backend_util.computeOutShape(shapes, axis);\n    const shape = this.outputShape;\n    const rank = shape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][axis];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][axis];\n    }\n\n    const channel = channels[axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      // Note: the >= comparison below may seem unnecessary given the check\n      // above but is needed to workaround branch execution issues on some\n      // devices. It makes all the conditions exclusive without relying on\n      // execution order.\n      getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n    }\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n\n    this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels: string[], channel: string, shift: number) {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}