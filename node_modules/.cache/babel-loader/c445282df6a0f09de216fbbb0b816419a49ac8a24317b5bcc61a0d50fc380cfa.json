{"ast":null,"code":"import _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { eye, linalg, mul, ones, randomUniform, scalar, serialization, tidy, truncatedNormal, util, zeros } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { checkDataFormat } from './common';\nimport { NotImplementedError, ValueError } from './errors';\nimport { VALID_DISTRIBUTION_VALUES, VALID_FAN_MODE_VALUES } from './keras_format/initializer_config';\nimport { checkStringTypeUnionValue, deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\nimport { arrayProd } from './utils/math_utils';\nexport function checkFanMode(value) {\n  checkStringTypeUnionValue(VALID_FAN_MODE_VALUES, 'FanMode', value);\n}\nexport function checkDistribution(value) {\n  checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES, 'Distribution', value);\n}\n/**\n * Initializer base class.\n *\n * @doc {\n *   heading: 'Initializers', subheading: 'Classes', namespace: 'initializers'}\n */\nexport var Initializer = /*#__PURE__*/function (_serialization$Serial) {\n  _inherits(Initializer, _serialization$Serial);\n  var _super = _createSuper(Initializer);\n  function Initializer() {\n    _classCallCheck(this, Initializer);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Initializer, [{\n    key: \"fromConfigUsesCustomObjects\",\n    value: function fromConfigUsesCustomObjects() {\n      return false;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {};\n    }\n  }]);\n  return Initializer;\n}(serialization.Serializable);\nexport var Zeros = /*#__PURE__*/function (_Initializer) {\n  _inherits(Zeros, _Initializer);\n  var _super2 = _createSuper(Zeros);\n  function Zeros() {\n    _classCallCheck(this, Zeros);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(Zeros, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      return zeros(shape, dtype);\n    }\n  }]);\n  return Zeros;\n}(Initializer);\n/** @nocollapse */\nZeros.className = 'Zeros';\nserialization.registerClass(Zeros);\nexport var Ones = /*#__PURE__*/function (_Initializer2) {\n  _inherits(Ones, _Initializer2);\n  var _super3 = _createSuper(Ones);\n  function Ones() {\n    _classCallCheck(this, Ones);\n    return _super3.apply(this, arguments);\n  }\n  _createClass(Ones, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      return ones(shape, dtype);\n    }\n  }]);\n  return Ones;\n}(Initializer);\n/** @nocollapse */\nOnes.className = 'Ones';\nserialization.registerClass(Ones);\nexport var Constant = /*#__PURE__*/function (_Initializer3) {\n  _inherits(Constant, _Initializer3);\n  var _super4 = _createSuper(Constant);\n  function Constant(args) {\n    var _this;\n    _classCallCheck(this, Constant);\n    _this = _super4.call(this);\n    if (typeof args !== 'object') {\n      throw new ValueError(\"Expected argument of type ConstantConfig but got \".concat(args));\n    }\n    if (args.value === undefined) {\n      throw new ValueError(\"config must have value set but got \".concat(args));\n    }\n    _this.value = args.value;\n    return _this;\n  }\n  _createClass(Constant, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      var _this2 = this;\n      return tidy(function () {\n        return mul(scalar(_this2.value), ones(shape, dtype));\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        value: this.value\n      };\n    }\n  }]);\n  return Constant;\n}(Initializer);\n/** @nocollapse */\nConstant.className = 'Constant';\nserialization.registerClass(Constant);\nexport var RandomUniform = /*#__PURE__*/function (_Initializer4) {\n  _inherits(RandomUniform, _Initializer4);\n  var _super5 = _createSuper(RandomUniform);\n  function RandomUniform(args) {\n    var _this3;\n    _classCallCheck(this, RandomUniform);\n    _this3 = _super5.call(this);\n    _this3.DEFAULT_MINVAL = -0.05;\n    _this3.DEFAULT_MAXVAL = 0.05;\n    _this3.minval = args.minval || _this3.DEFAULT_MINVAL;\n    _this3.maxval = args.maxval || _this3.DEFAULT_MAXVAL;\n    _this3.seed = args.seed;\n    return _this3;\n  }\n  _createClass(RandomUniform, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      return randomUniform(shape, this.minval, this.maxval, dtype, this.seed);\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        minval: this.minval,\n        maxval: this.maxval,\n        seed: this.seed\n      };\n    }\n  }]);\n  return RandomUniform;\n}(Initializer);\n/** @nocollapse */\nRandomUniform.className = 'RandomUniform';\nserialization.registerClass(RandomUniform);\nexport var RandomNormal = /*#__PURE__*/function (_Initializer5) {\n  _inherits(RandomNormal, _Initializer5);\n  var _super6 = _createSuper(RandomNormal);\n  function RandomNormal(args) {\n    var _this4;\n    _classCallCheck(this, RandomNormal);\n    _this4 = _super6.call(this);\n    _this4.DEFAULT_MEAN = 0.;\n    _this4.DEFAULT_STDDEV = 0.05;\n    _this4.mean = args.mean || _this4.DEFAULT_MEAN;\n    _this4.stddev = args.stddev || _this4.DEFAULT_STDDEV;\n    _this4.seed = args.seed;\n    return _this4;\n  }\n  _createClass(RandomNormal, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      dtype = dtype || 'float32';\n      if (dtype !== 'float32' && dtype !== 'int32') {\n        throw new NotImplementedError(\"randomNormal does not support dType \".concat(dtype, \".\"));\n      }\n      return K.randomNormal(shape, this.mean, this.stddev, dtype, this.seed);\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        mean: this.mean,\n        stddev: this.stddev,\n        seed: this.seed\n      };\n    }\n  }]);\n  return RandomNormal;\n}(Initializer);\n/** @nocollapse */\nRandomNormal.className = 'RandomNormal';\nserialization.registerClass(RandomNormal);\nexport var TruncatedNormal = /*#__PURE__*/function (_Initializer6) {\n  _inherits(TruncatedNormal, _Initializer6);\n  var _super7 = _createSuper(TruncatedNormal);\n  function TruncatedNormal(args) {\n    var _this5;\n    _classCallCheck(this, TruncatedNormal);\n    _this5 = _super7.call(this);\n    _this5.DEFAULT_MEAN = 0.;\n    _this5.DEFAULT_STDDEV = 0.05;\n    _this5.mean = args.mean || _this5.DEFAULT_MEAN;\n    _this5.stddev = args.stddev || _this5.DEFAULT_STDDEV;\n    _this5.seed = args.seed;\n    return _this5;\n  }\n  _createClass(TruncatedNormal, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      dtype = dtype || 'float32';\n      if (dtype !== 'float32' && dtype !== 'int32') {\n        throw new NotImplementedError(\"truncatedNormal does not support dType \".concat(dtype, \".\"));\n      }\n      return truncatedNormal(shape, this.mean, this.stddev, dtype, this.seed);\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        mean: this.mean,\n        stddev: this.stddev,\n        seed: this.seed\n      };\n    }\n  }]);\n  return TruncatedNormal;\n}(Initializer);\n/** @nocollapse */\nTruncatedNormal.className = 'TruncatedNormal';\nserialization.registerClass(TruncatedNormal);\nexport var Identity = /*#__PURE__*/function (_Initializer7) {\n  _inherits(Identity, _Initializer7);\n  var _super8 = _createSuper(Identity);\n  function Identity(args) {\n    var _this6;\n    _classCallCheck(this, Identity);\n    _this6 = _super8.call(this);\n    _this6.gain = args.gain != null ? args.gain : 1.0;\n    return _this6;\n  }\n  _createClass(Identity, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      var _this7 = this;\n      return tidy(function () {\n        if (shape.length !== 2 || shape[0] !== shape[1]) {\n          throw new ValueError('Identity matrix initializer can only be used for' + ' 2D square matrices.');\n        } else {\n          return mul(_this7.gain, eye(shape[0]));\n        }\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        gain: this.gain\n      };\n    }\n  }]);\n  return Identity;\n}(Initializer);\n/** @nocollapse */\nIdentity.className = 'Identity';\nserialization.registerClass(Identity);\n/**\n * Computes the number of input and output units for a weight shape.\n * @param shape Shape of weight.\n * @param dataFormat data format to use for convolution kernels.\n *   Note that all kernels in Keras are standardized on the\n *   CHANNEL_LAST ordering (even when inputs are set to CHANNEL_FIRST).\n * @return An length-2 array: fanIn, fanOut.\n */\nfunction computeFans(shape) {\n  var dataFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'channelsLast';\n  var fanIn;\n  var fanOut;\n  checkDataFormat(dataFormat);\n  if (shape.length === 2) {\n    fanIn = shape[0];\n    fanOut = shape[1];\n  } else if ([3, 4, 5].indexOf(shape.length) !== -1) {\n    if (dataFormat === 'channelsFirst') {\n      var receptiveFieldSize = arrayProd(shape, 2);\n      fanIn = shape[1] * receptiveFieldSize;\n      fanOut = shape[0] * receptiveFieldSize;\n    } else if (dataFormat === 'channelsLast') {\n      var _receptiveFieldSize = arrayProd(shape, 0, shape.length - 2);\n      fanIn = shape[shape.length - 2] * _receptiveFieldSize;\n      fanOut = shape[shape.length - 1] * _receptiveFieldSize;\n    }\n  } else {\n    var shapeProd = arrayProd(shape);\n    fanIn = Math.sqrt(shapeProd);\n    fanOut = Math.sqrt(shapeProd);\n  }\n  return [fanIn, fanOut];\n}\nexport var VarianceScaling = /*#__PURE__*/function (_Initializer8) {\n  _inherits(VarianceScaling, _Initializer8);\n  var _super9 = _createSuper(VarianceScaling);\n  /**\n   * Constructor of VarianceScaling.\n   * @throws ValueError for invalid value in scale.\n   */\n  function VarianceScaling(args) {\n    var _this8;\n    _classCallCheck(this, VarianceScaling);\n    _this8 = _super9.call(this);\n    if (args.scale < 0.0) {\n      throw new ValueError(\"scale must be a positive float. Got: \".concat(args.scale));\n    }\n    _this8.scale = args.scale == null ? 1.0 : args.scale;\n    _this8.mode = args.mode == null ? 'fanIn' : args.mode;\n    checkFanMode(_this8.mode);\n    _this8.distribution = args.distribution == null ? 'normal' : args.distribution;\n    checkDistribution(_this8.distribution);\n    _this8.seed = args.seed;\n    return _this8;\n  }\n  _createClass(VarianceScaling, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      var fans = computeFans(shape);\n      var fanIn = fans[0];\n      var fanOut = fans[1];\n      var scale = this.scale;\n      if (this.mode === 'fanIn') {\n        scale /= Math.max(1, fanIn);\n      } else if (this.mode === 'fanOut') {\n        scale /= Math.max(1, fanOut);\n      } else {\n        scale /= Math.max(1, (fanIn + fanOut) / 2);\n      }\n      if (this.distribution === 'normal') {\n        var stddev = Math.sqrt(scale);\n        dtype = dtype || 'float32';\n        if (dtype !== 'float32' && dtype !== 'int32') {\n          throw new NotImplementedError(\"\".concat(this.getClassName(), \" does not support dType \").concat(dtype, \".\"));\n        }\n        return truncatedNormal(shape, 0, stddev, dtype, this.seed);\n      } else {\n        var limit = Math.sqrt(3 * scale);\n        return randomUniform(shape, -limit, limit, dtype, this.seed);\n      }\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        scale: this.scale,\n        mode: this.mode,\n        distribution: this.distribution,\n        seed: this.seed\n      };\n    }\n  }]);\n  return VarianceScaling;\n}(Initializer);\n/** @nocollapse */\nVarianceScaling.className = 'VarianceScaling';\nserialization.registerClass(VarianceScaling);\nexport var GlorotUniform = /*#__PURE__*/function (_VarianceScaling) {\n  _inherits(GlorotUniform, _VarianceScaling);\n  var _super10 = _createSuper(GlorotUniform);\n  /**\n   * Constructor of GlorotUniform\n   * @param scale\n   * @param mode\n   * @param distribution\n   * @param seed\n   */\n  function GlorotUniform(args) {\n    _classCallCheck(this, GlorotUniform);\n    return _super10.call(this, {\n      scale: 1.0,\n      mode: 'fanAvg',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n  _createClass(GlorotUniform, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      // In Python Keras, GlorotUniform is not a class, but a helper method\n      // that creates a VarianceScaling object. Use 'VarianceScaling' as\n      // class name to be compatible with that.\n      return VarianceScaling.className;\n    }\n  }]);\n  return GlorotUniform;\n}(VarianceScaling);\n/** @nocollapse */\nGlorotUniform.className = 'GlorotUniform';\nserialization.registerClass(GlorotUniform);\nexport var GlorotNormal = /*#__PURE__*/function (_VarianceScaling2) {\n  _inherits(GlorotNormal, _VarianceScaling2);\n  var _super11 = _createSuper(GlorotNormal);\n  /**\n   * Constructor of GlorotNormal.\n   * @param scale\n   * @param mode\n   * @param distribution\n   * @param seed\n   */\n  function GlorotNormal(args) {\n    _classCallCheck(this, GlorotNormal);\n    return _super11.call(this, {\n      scale: 1.0,\n      mode: 'fanAvg',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n  _createClass(GlorotNormal, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      // In Python Keras, GlorotNormal is not a class, but a helper method\n      // that creates a VarianceScaling object. Use 'VarianceScaling' as\n      // class name to be compatible with that.\n      return VarianceScaling.className;\n    }\n  }]);\n  return GlorotNormal;\n}(VarianceScaling);\n/** @nocollapse */\nGlorotNormal.className = 'GlorotNormal';\nserialization.registerClass(GlorotNormal);\nexport var HeNormal = /*#__PURE__*/function (_VarianceScaling3) {\n  _inherits(HeNormal, _VarianceScaling3);\n  var _super12 = _createSuper(HeNormal);\n  function HeNormal(args) {\n    _classCallCheck(this, HeNormal);\n    return _super12.call(this, {\n      scale: 2.0,\n      mode: 'fanIn',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n  _createClass(HeNormal, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      // In Python Keras, HeNormal is not a class, but a helper method\n      // that creates a VarianceScaling object. Use 'VarianceScaling' as\n      // class name to be compatible with that.\n      return VarianceScaling.className;\n    }\n  }]);\n  return HeNormal;\n}(VarianceScaling);\n/** @nocollapse */\nHeNormal.className = 'HeNormal';\nserialization.registerClass(HeNormal);\nexport var HeUniform = /*#__PURE__*/function (_VarianceScaling4) {\n  _inherits(HeUniform, _VarianceScaling4);\n  var _super13 = _createSuper(HeUniform);\n  function HeUniform(args) {\n    _classCallCheck(this, HeUniform);\n    return _super13.call(this, {\n      scale: 2.0,\n      mode: 'fanIn',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n  _createClass(HeUniform, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      // In Python Keras, HeUniform is not a class, but a helper method\n      // that creates a VarianceScaling object. Use 'VarianceScaling' as\n      // class name to be compatible with that.\n      return VarianceScaling.className;\n    }\n  }]);\n  return HeUniform;\n}(VarianceScaling);\n/** @nocollapse */\nHeUniform.className = 'HeUniform';\nserialization.registerClass(HeUniform);\nexport var LeCunNormal = /*#__PURE__*/function (_VarianceScaling5) {\n  _inherits(LeCunNormal, _VarianceScaling5);\n  var _super14 = _createSuper(LeCunNormal);\n  function LeCunNormal(args) {\n    _classCallCheck(this, LeCunNormal);\n    return _super14.call(this, {\n      scale: 1.0,\n      mode: 'fanIn',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n  _createClass(LeCunNormal, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      // In Python Keras, LeCunNormal is not a class, but a helper method\n      // that creates a VarianceScaling object. Use 'VarianceScaling' as\n      // class name to be compatible with that.\n      return VarianceScaling.className;\n    }\n  }]);\n  return LeCunNormal;\n}(VarianceScaling);\n/** @nocollapse */\nLeCunNormal.className = 'LeCunNormal';\nserialization.registerClass(LeCunNormal);\nexport var LeCunUniform = /*#__PURE__*/function (_VarianceScaling6) {\n  _inherits(LeCunUniform, _VarianceScaling6);\n  var _super15 = _createSuper(LeCunUniform);\n  function LeCunUniform(args) {\n    _classCallCheck(this, LeCunUniform);\n    return _super15.call(this, {\n      scale: 1.0,\n      mode: 'fanIn',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n  _createClass(LeCunUniform, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      // In Python Keras, LeCunUniform is not a class, but a helper method\n      // that creates a VarianceScaling object. Use 'VarianceScaling' as\n      // class name to be compatible with that.\n      return VarianceScaling.className;\n    }\n  }]);\n  return LeCunUniform;\n}(VarianceScaling);\n/** @nocollapse */\nLeCunUniform.className = 'LeCunUniform';\nserialization.registerClass(LeCunUniform);\nexport var Orthogonal = /*#__PURE__*/function (_Initializer9) {\n  _inherits(Orthogonal, _Initializer9);\n  var _super16 = _createSuper(Orthogonal);\n  function Orthogonal(args) {\n    var _this9;\n    _classCallCheck(this, Orthogonal);\n    _this9 = _super16.call(this);\n    _this9.DEFAULT_GAIN = 1;\n    _this9.ELEMENTS_WARN_SLOW = 2000;\n    _this9.gain = args.gain == null ? _this9.DEFAULT_GAIN : args.gain;\n    _this9.seed = args.seed;\n    return _this9;\n  }\n  _createClass(Orthogonal, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      var _this10 = this;\n      return tidy(function () {\n        if (shape.length < 2) {\n          throw new NotImplementedError('Shape must be at least 2D.');\n        }\n        if (dtype !== 'int32' && dtype !== 'float32' && dtype !== undefined) {\n          throw new TypeError(\"Unsupported data type \".concat(dtype, \".\"));\n        }\n        dtype = dtype;\n        // flatten the input shape with the last dimension remaining its\n        // original shape so it works for conv2d\n        var numRows = util.sizeFromShape(shape.slice(0, -1));\n        var numCols = shape[shape.length - 1];\n        var numElements = numRows * numCols;\n        if (numElements > _this10.ELEMENTS_WARN_SLOW) {\n          console.warn(\"Orthogonal initializer is being called on a matrix with more \" + \"than \".concat(_this10.ELEMENTS_WARN_SLOW, \" (\").concat(numElements, \") elements: \") + \"Slowness may result.\");\n        }\n        var flatShape = [Math.max(numCols, numRows), Math.min(numCols, numRows)];\n        // Generate a random matrix\n        var randNormalMat = K.randomNormal(flatShape, 0, 1, dtype, _this10.seed);\n        // Compute QR factorization\n        var qr = linalg.qr(randNormalMat, false);\n        var qMat = qr[0];\n        var rMat = qr[1];\n        // Make Q uniform\n        var diag = rMat.flatten().stridedSlice([0], [Math.min(numCols, numRows) * Math.min(numCols, numRows)], [Math.min(numCols, numRows) + 1]);\n        qMat = mul(qMat, diag.sign());\n        if (numRows < numCols) {\n          qMat = qMat.transpose();\n        }\n        return mul(scalar(_this10.gain), qMat.reshape(shape));\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        gain: this.gain,\n        seed: this.seed\n      };\n    }\n  }]);\n  return Orthogonal;\n}(Initializer);\n/** @nocollapse */\nOrthogonal.className = 'Orthogonal';\nserialization.registerClass(Orthogonal);\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport var INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n  'constant': 'Constant',\n  'glorotNormal': 'GlorotNormal',\n  'glorotUniform': 'GlorotUniform',\n  'heNormal': 'HeNormal',\n  'heUniform': 'HeUniform',\n  'identity': 'Identity',\n  'leCunNormal': 'LeCunNormal',\n  'leCunUniform': 'LeCunUniform',\n  'ones': 'Ones',\n  'orthogonal': 'Orthogonal',\n  'randomNormal': 'RandomNormal',\n  'randomUniform': 'RandomUniform',\n  'truncatedNormal': 'TruncatedNormal',\n  'varianceScaling': 'VarianceScaling',\n  'zeros': 'Zeros'\n};\nfunction deserializeInitializer(config) {\n  var customObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'initializer');\n}\nexport function serializeInitializer(initializer) {\n  return serializeKerasObject(initializer);\n}\nexport function getInitializer(identifier) {\n  if (typeof identifier === 'string') {\n    var className = identifier in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n    /* We have four 'helper' classes for common initializers that\n    all get serialized as 'VarianceScaling' and shouldn't go through\n    the deserializeInitializer pathway. */\n    if (className === 'GlorotNormal') {\n      return new GlorotNormal();\n    } else if (className === 'GlorotUniform') {\n      return new GlorotUniform();\n    } else if (className === 'HeNormal') {\n      return new HeNormal();\n    } else if (className === 'HeUniform') {\n      return new HeUniform();\n    } else if (className === 'LeCunNormal') {\n      return new LeCunNormal();\n    } else if (className === 'LeCunUniform') {\n      return new LeCunUniform();\n    } else {\n      var config = {};\n      config['className'] = className;\n      config['config'] = {};\n      return deserializeInitializer(config);\n    }\n  } else if (identifier instanceof Initializer) {\n    return identifier;\n  } else {\n    return deserializeInitializer(identifier);\n  }\n}","map":{"version":3,"names":["eye","linalg","mul","ones","randomUniform","scalar","serialization","tidy","truncatedNormal","util","zeros","K","checkDataFormat","NotImplementedError","ValueError","VALID_DISTRIBUTION_VALUES","VALID_FAN_MODE_VALUES","checkStringTypeUnionValue","deserializeKerasObject","serializeKerasObject","arrayProd","checkFanMode","value","checkDistribution","Initializer","_serialization$Serial","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","fromConfigUsesCustomObjects","getConfig","Serializable","Zeros","_Initializer","_super2","shape","dtype","className","registerClass","Ones","_Initializer2","_super3","Constant","_Initializer3","_super4","args","_this","call","concat","undefined","_this2","RandomUniform","_Initializer4","_super5","_this3","DEFAULT_MINVAL","DEFAULT_MAXVAL","minval","maxval","seed","RandomNormal","_Initializer5","_super6","_this4","DEFAULT_MEAN","DEFAULT_STDDEV","mean","stddev","randomNormal","TruncatedNormal","_Initializer6","_super7","_this5","Identity","_Initializer7","_super8","_this6","gain","_this7","length","computeFans","dataFormat","fanIn","fanOut","indexOf","receptiveFieldSize","shapeProd","Math","sqrt","VarianceScaling","_Initializer8","_super9","_this8","scale","mode","distribution","fans","max","getClassName","limit","GlorotUniform","_VarianceScaling","_super10","GlorotNormal","_VarianceScaling2","_super11","HeNormal","_VarianceScaling3","_super12","HeUniform","_VarianceScaling4","_super13","LeCunNormal","_VarianceScaling5","_super14","LeCunUniform","_VarianceScaling6","_super15","Orthogonal","_Initializer9","_super16","_this9","DEFAULT_GAIN","ELEMENTS_WARN_SLOW","_this10","TypeError","numRows","sizeFromShape","slice","numCols","numElements","console","warn","flatShape","min","randNormalMat","qr","qMat","rMat","diag","flatten","stridedSlice","sign","transpose","reshape","INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP","deserializeInitializer","config","customObjects","SerializationMap","getMap","classNameMap","serializeInitializer","initializer","getInitializer","identifier"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-layers\\src\\initializers.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {DataType, eye, linalg, mul, ones, randomUniform, scalar, serialization, Tensor, tidy, truncatedNormal, util, zeros} from '@tensorflow/tfjs-core';\n\nimport * as K from './backend/tfjs_backend';\nimport {checkDataFormat} from './common';\nimport {NotImplementedError, ValueError} from './errors';\nimport {DataFormat, Shape} from './keras_format/common';\nimport {Distribution, FanMode, VALID_DISTRIBUTION_VALUES, VALID_FAN_MODE_VALUES} from './keras_format/initializer_config';\nimport {checkStringTypeUnionValue, deserializeKerasObject, serializeKerasObject} from './utils/generic_utils';\nimport {arrayProd} from './utils/math_utils';\n\nexport function checkFanMode(value?: string): void {\n  checkStringTypeUnionValue(VALID_FAN_MODE_VALUES, 'FanMode', value);\n}\n\nexport function checkDistribution(value?: string): void {\n  checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES, 'Distribution', value);\n}\n\n/**\n * Initializer base class.\n *\n * @doc {\n *   heading: 'Initializers', subheading: 'Classes', namespace: 'initializers'}\n */\nexport abstract class Initializer extends serialization.Serializable {\n  public fromConfigUsesCustomObjects(): boolean {\n    return false;\n  }\n  /**\n   * Generate an initial value.\n   * @param shape\n   * @param dtype\n   * @return The init value.\n   */\n  abstract apply(shape: Shape, dtype?: DataType): Tensor;\n\n  getConfig(): serialization.ConfigDict {\n    return {};\n  }\n}\n\nexport class Zeros extends Initializer {\n  /** @nocollapse */\n  static className = 'Zeros';\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return zeros(shape, dtype);\n  }\n}\nserialization.registerClass(Zeros);\n\nexport class Ones extends Initializer {\n  /** @nocollapse */\n  static className = 'Ones';\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return ones(shape, dtype);\n  }\n}\nserialization.registerClass(Ones);\n\nexport interface ConstantArgs {\n  /** The value for each element in the variable. */\n  value: number;\n}\n\nexport class Constant extends Initializer {\n  /** @nocollapse */\n  static className = 'Constant';\n  private value: number;\n  constructor(args: ConstantArgs) {\n    super();\n    if (typeof args !== 'object') {\n      throw new ValueError(\n          `Expected argument of type ConstantConfig but got ${args}`);\n    }\n    if (args.value === undefined) {\n      throw new ValueError(`config must have value set but got ${args}`);\n    }\n    this.value = args.value;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return tidy(() => mul(scalar(this.value), ones(shape, dtype)));\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {\n      value: this.value,\n    };\n  }\n}\nserialization.registerClass(Constant);\n\nexport interface RandomUniformArgs {\n  /** Lower bound of the range of random values to generate. */\n  minval?: number;\n  /** Upper bound of the range of random values to generate. */\n  maxval?: number;\n  /** Used to seed the random generator. */\n  seed?: number;\n}\n\nexport class RandomUniform extends Initializer {\n  /** @nocollapse */\n  static className = 'RandomUniform';\n  readonly DEFAULT_MINVAL = -0.05;\n  readonly DEFAULT_MAXVAL = 0.05;\n  private minval: number;\n  private maxval: number;\n  private seed: number;\n\n  constructor(args: RandomUniformArgs) {\n    super();\n    this.minval = args.minval || this.DEFAULT_MINVAL;\n    this.maxval = args.maxval || this.DEFAULT_MAXVAL;\n    this.seed = args.seed;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return randomUniform(shape, this.minval, this.maxval, dtype, this.seed);\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {minval: this.minval, maxval: this.maxval, seed: this.seed};\n  }\n}\nserialization.registerClass(RandomUniform);\n\nexport interface RandomNormalArgs {\n  /** Mean of the random values to generate. */\n  mean?: number;\n  /** Standard deviation of the random values to generate. */\n  stddev?: number;\n  /** Used to seed the random generator. */\n  seed?: number;\n}\n\nexport class RandomNormal extends Initializer {\n  /** @nocollapse */\n  static className = 'RandomNormal';\n  readonly DEFAULT_MEAN = 0.;\n  readonly DEFAULT_STDDEV = 0.05;\n  private mean: number;\n  private stddev: number;\n  private seed: number;\n\n  constructor(args: RandomNormalArgs) {\n    super();\n    this.mean = args.mean || this.DEFAULT_MEAN;\n    this.stddev = args.stddev || this.DEFAULT_STDDEV;\n    this.seed = args.seed;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    dtype = dtype || 'float32';\n    if (dtype !== 'float32' && dtype !== 'int32') {\n      throw new NotImplementedError(\n          `randomNormal does not support dType ${dtype}.`);\n    }\n\n    return K.randomNormal(shape, this.mean, this.stddev, dtype, this.seed);\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {mean: this.mean, stddev: this.stddev, seed: this.seed};\n  }\n}\nserialization.registerClass(RandomNormal);\n\nexport interface TruncatedNormalArgs {\n  /** Mean of the random values to generate. */\n  mean?: number;\n  /** Standard deviation of the random values to generate. */\n  stddev?: number;\n  /** Used to seed the random generator. */\n  seed?: number;\n}\n\nexport class TruncatedNormal extends Initializer {\n  /** @nocollapse */\n  static className = 'TruncatedNormal';\n\n  readonly DEFAULT_MEAN = 0.;\n  readonly DEFAULT_STDDEV = 0.05;\n  private mean: number;\n  private stddev: number;\n  private seed: number;\n\n  constructor(args: TruncatedNormalArgs) {\n    super();\n    this.mean = args.mean || this.DEFAULT_MEAN;\n    this.stddev = args.stddev || this.DEFAULT_STDDEV;\n    this.seed = args.seed;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    dtype = dtype || 'float32';\n    if (dtype !== 'float32' && dtype !== 'int32') {\n      throw new NotImplementedError(\n          `truncatedNormal does not support dType ${dtype}.`);\n    }\n    return truncatedNormal(shape, this.mean, this.stddev, dtype, this.seed);\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {mean: this.mean, stddev: this.stddev, seed: this.seed};\n  }\n}\nserialization.registerClass(TruncatedNormal);\n\nexport interface IdentityArgs {\n  /**\n   * Multiplicative factor to apply to the identity matrix.\n   */\n  gain?: number;\n}\n\nexport class Identity extends Initializer {\n  /** @nocollapse */\n  static className = 'Identity';\n  private gain: number;\n  constructor(args: IdentityArgs) {\n    super();\n    this.gain = args.gain != null ? args.gain : 1.0;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return tidy(() => {\n      if (shape.length !== 2 || shape[0] !== shape[1]) {\n        throw new ValueError(\n            'Identity matrix initializer can only be used for' +\n            ' 2D square matrices.');\n      } else {\n        return mul(this.gain, eye(shape[0]));\n      }\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {gain: this.gain};\n  }\n}\nserialization.registerClass(Identity);\n\n/**\n * Computes the number of input and output units for a weight shape.\n * @param shape Shape of weight.\n * @param dataFormat data format to use for convolution kernels.\n *   Note that all kernels in Keras are standardized on the\n *   CHANNEL_LAST ordering (even when inputs are set to CHANNEL_FIRST).\n * @return An length-2 array: fanIn, fanOut.\n */\nfunction computeFans(\n    shape: Shape, dataFormat: DataFormat = 'channelsLast'): number[] {\n  let fanIn: number;\n  let fanOut: number;\n  checkDataFormat(dataFormat);\n  if (shape.length === 2) {\n    fanIn = shape[0];\n    fanOut = shape[1];\n  } else if ([3, 4, 5].indexOf(shape.length) !== -1) {\n    if (dataFormat === 'channelsFirst') {\n      const receptiveFieldSize = arrayProd(shape, 2);\n      fanIn = shape[1] * receptiveFieldSize;\n      fanOut = shape[0] * receptiveFieldSize;\n    } else if (dataFormat === 'channelsLast') {\n      const receptiveFieldSize = arrayProd(shape, 0, shape.length - 2);\n      fanIn = shape[shape.length - 2] * receptiveFieldSize;\n      fanOut = shape[shape.length - 1] * receptiveFieldSize;\n    }\n  } else {\n    const shapeProd = arrayProd(shape);\n    fanIn = Math.sqrt(shapeProd);\n    fanOut = Math.sqrt(shapeProd);\n  }\n\n  return [fanIn, fanOut];\n}\n\nexport interface VarianceScalingArgs {\n  /** Scaling factor (positive float). */\n  scale?: number;\n\n  /** Fanning mode for inputs and outputs. */\n  mode?: FanMode;\n\n  /** Probabilistic distribution of the values. */\n  distribution?: Distribution;\n\n  /** Random number generator seed. */\n  seed?: number;\n}\n\nexport class VarianceScaling extends Initializer {\n  /** @nocollapse */\n  static className = 'VarianceScaling';\n  private scale: number;\n  private mode: FanMode;\n  private distribution: Distribution;\n  private seed: number;\n\n  /**\n   * Constructor of VarianceScaling.\n   * @throws ValueError for invalid value in scale.\n   */\n  constructor(args: VarianceScalingArgs) {\n    super();\n    if (args.scale < 0.0) {\n      throw new ValueError(\n          `scale must be a positive float. Got: ${args.scale}`);\n    }\n    this.scale = args.scale == null ? 1.0 : args.scale;\n    this.mode = args.mode == null ? 'fanIn' : args.mode;\n    checkFanMode(this.mode);\n    this.distribution =\n        args.distribution == null ? 'normal' : args.distribution;\n    checkDistribution(this.distribution);\n    this.seed = args.seed;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    const fans = computeFans(shape);\n    const fanIn = fans[0];\n    const fanOut = fans[1];\n    let scale = this.scale;\n    if (this.mode === 'fanIn') {\n      scale /= Math.max(1, fanIn);\n    } else if (this.mode === 'fanOut') {\n      scale /= Math.max(1, fanOut);\n    } else {\n      scale /= Math.max(1, (fanIn + fanOut) / 2);\n    }\n\n    if (this.distribution === 'normal') {\n      const stddev = Math.sqrt(scale);\n      dtype = dtype || 'float32';\n      if (dtype !== 'float32' && dtype !== 'int32') {\n        throw new NotImplementedError(\n            `${this.getClassName()} does not support dType ${dtype}.`);\n      }\n      return truncatedNormal(shape, 0, stddev, dtype, this.seed);\n    } else {\n      const limit = Math.sqrt(3 * scale);\n      return randomUniform(shape, -limit, limit, dtype, this.seed);\n    }\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {\n      scale: this.scale,\n      mode: this.mode,\n      distribution: this.distribution,\n      seed: this.seed\n    };\n  }\n}\nserialization.registerClass(VarianceScaling);\n\nexport interface SeedOnlyInitializerArgs {\n  /** Random number generator seed. */\n  seed?: number;\n}\n\nexport class GlorotUniform extends VarianceScaling {\n  /** @nocollapse */\n  static override className = 'GlorotUniform';\n\n  /**\n   * Constructor of GlorotUniform\n   * @param scale\n   * @param mode\n   * @param distribution\n   * @param seed\n   */\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 1.0,\n      mode: 'fanAvg',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  override getClassName(): string {\n    // In Python Keras, GlorotUniform is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(GlorotUniform);\n\nexport class GlorotNormal extends VarianceScaling {\n  /** @nocollapse */\n  static override className = 'GlorotNormal';\n\n  /**\n   * Constructor of GlorotNormal.\n   * @param scale\n   * @param mode\n   * @param distribution\n   * @param seed\n   */\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 1.0,\n      mode: 'fanAvg',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  override getClassName(): string {\n    // In Python Keras, GlorotNormal is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(GlorotNormal);\n\nexport class HeNormal extends VarianceScaling {\n  /** @nocollapse */\n  static override className = 'HeNormal';\n\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 2.0,\n      mode: 'fanIn',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  override getClassName(): string {\n    // In Python Keras, HeNormal is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(HeNormal);\n\nexport class HeUniform extends VarianceScaling {\n  /** @nocollapse */\n  static override className = 'HeUniform';\n\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 2.0,\n      mode: 'fanIn',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  override getClassName(): string {\n    // In Python Keras, HeUniform is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(HeUniform);\n\nexport class LeCunNormal extends VarianceScaling {\n  /** @nocollapse */\n  static override className = 'LeCunNormal';\n\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 1.0,\n      mode: 'fanIn',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  override getClassName(): string {\n    // In Python Keras, LeCunNormal is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(LeCunNormal);\n\nexport class LeCunUniform extends VarianceScaling {\n  /** @nocollapse */\n  static override className = 'LeCunUniform';\n\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 1.0,\n      mode: 'fanIn',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  override getClassName(): string {\n    // In Python Keras, LeCunUniform is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(LeCunUniform);\n\nexport interface OrthogonalArgs extends SeedOnlyInitializerArgs {\n  /**\n   * Multiplicative factor to apply to the orthogonal matrix. Defaults to 1.\n   */\n  gain?: number;\n}\n\nexport class Orthogonal extends Initializer {\n  /** @nocollapse */\n  static className = 'Orthogonal';\n  readonly DEFAULT_GAIN = 1;\n  readonly ELEMENTS_WARN_SLOW = 2000;\n  protected readonly gain: number;\n  protected readonly seed: number;\n\n  constructor(args?: OrthogonalArgs) {\n    super();\n    this.gain = args.gain == null ? this.DEFAULT_GAIN : args.gain;\n    this.seed = args.seed;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return tidy(() => {\n      if (shape.length < 2) {\n        throw new NotImplementedError('Shape must be at least 2D.');\n      }\n      if (dtype !== 'int32' && dtype !== 'float32' && dtype !== undefined) {\n        throw new TypeError(`Unsupported data type ${dtype}.`);\n      }\n      dtype = dtype as 'int32' | 'float32' | undefined;\n\n      // flatten the input shape with the last dimension remaining its\n      // original shape so it works for conv2d\n      const numRows = util.sizeFromShape(shape.slice(0, -1));\n      const numCols = shape[shape.length - 1];\n      const numElements = numRows * numCols;\n      if (numElements > this.ELEMENTS_WARN_SLOW) {\n        console.warn(\n            `Orthogonal initializer is being called on a matrix with more ` +\n            `than ${this.ELEMENTS_WARN_SLOW} (${numElements}) elements: ` +\n            `Slowness may result.`);\n      }\n      const flatShape =\n          [Math.max(numCols, numRows), Math.min(numCols, numRows)];\n\n      // Generate a random matrix\n      const randNormalMat = K.randomNormal(flatShape, 0, 1, dtype, this.seed);\n\n      // Compute QR factorization\n      const qr = linalg.qr(randNormalMat, false);\n      let qMat = qr[0];\n      const rMat = qr[1];\n\n      // Make Q uniform\n      const diag = rMat.flatten().stridedSlice(\n          [0], [Math.min(numCols, numRows) * Math.min(numCols, numRows)],\n          [Math.min(numCols, numRows) + 1]);\n      qMat = mul(qMat, diag.sign());\n      if (numRows < numCols) {\n        qMat = qMat.transpose();\n      }\n\n      return mul(scalar(this.gain), qMat.reshape(shape));\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {\n      gain: this.gain,\n      seed: this.seed,\n    };\n  }\n}\nserialization.registerClass(Orthogonal);\n\n/** @docinline */\nexport type InitializerIdentifier =\n    'constant'|'glorotNormal'|'glorotUniform'|'heNormal'|'heUniform'|'identity'|\n    'leCunNormal'|'leCunUniform'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string;\n\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP:\n    {[identifier in InitializerIdentifier]: string} = {\n      'constant': 'Constant',\n      'glorotNormal': 'GlorotNormal',\n      'glorotUniform': 'GlorotUniform',\n      'heNormal': 'HeNormal',\n      'heUniform': 'HeUniform',\n      'identity': 'Identity',\n      'leCunNormal': 'LeCunNormal',\n      'leCunUniform': 'LeCunUniform',\n      'ones': 'Ones',\n      'orthogonal': 'Orthogonal',\n      'randomNormal': 'RandomNormal',\n      'randomUniform': 'RandomUniform',\n      'truncatedNormal': 'TruncatedNormal',\n      'varianceScaling': 'VarianceScaling',\n      'zeros': 'Zeros'\n    };\n\nfunction deserializeInitializer(\n    config: serialization.ConfigDict,\n    customObjects: serialization.ConfigDict = {}): Initializer {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'initializer');\n}\n\nexport function serializeInitializer(initializer: Initializer):\n    serialization.ConfigDictValue {\n  return serializeKerasObject(initializer);\n}\n\nexport function getInitializer(identifier: InitializerIdentifier|Initializer|\n                               serialization.ConfigDict): Initializer {\n  if (typeof identifier === 'string') {\n    const className = identifier in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n        INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n        identifier;\n    /* We have four 'helper' classes for common initializers that\n    all get serialized as 'VarianceScaling' and shouldn't go through\n    the deserializeInitializer pathway. */\n    if (className === 'GlorotNormal') {\n      return new GlorotNormal();\n    } else if (className === 'GlorotUniform') {\n      return new GlorotUniform();\n    } else if (className === 'HeNormal') {\n      return new HeNormal();\n    } else if (className === 'HeUniform') {\n      return new HeUniform();\n    } else if (className === 'LeCunNormal') {\n      return new LeCunNormal();\n    } else if (className === 'LeCunUniform') {\n      return new LeCunUniform();\n    } else {\n      const config: serialization.ConfigDict = {};\n      config['className'] = className;\n      config['config'] = {};\n      return deserializeInitializer(config);\n    }\n  } else if (identifier instanceof Initializer) {\n    return identifier;\n  } else {\n    return deserializeInitializer(identifier);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}