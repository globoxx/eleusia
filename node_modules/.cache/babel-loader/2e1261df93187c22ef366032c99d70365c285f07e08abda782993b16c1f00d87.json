{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { backend_util, DepthwiseConv2dNativeBackpropInput, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function depthwiseConv2dNativeBackpropInput(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var dy = inputs.dy,\n    filter = inputs.filter;\n  var strides = attrs.strides,\n    dilations = attrs.dilations,\n    pad = attrs.pad,\n    dimRoundingMode = attrs.dimRoundingMode,\n    inputShape = attrs.inputShape;\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n  var dyStrides = util.computeStrides(dy.shape);\n  var filterStrides = util.computeStrides(filter.shape);\n  var convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n  var dx = new TensorBuffer(convInfo.inShape, 'float32');\n  var dxValues = dx.values;\n  var _dx$strides = _slicedToArray(dx.strides, 3),\n    dxS0 = _dx$strides[0],\n    dxS1 = _dx$strides[1],\n    dxS2 = _dx$strides[2];\n  var dyValues = backend.data.get(dy.dataId).values;\n  var _dyStrides = _slicedToArray(dyStrides, 3),\n    dyS0 = _dyStrides[0],\n    dyS1 = _dyStrides[1],\n    dyS2 = _dyStrides[2];\n  var fltValues = backend.data.get(filter.dataId).values;\n  var _filterStrides = _slicedToArray(filterStrides, 3),\n    fltS0 = _filterStrides[0],\n    fltS1 = _filterStrides[1],\n    fltS2 = _filterStrides[2];\n  var batchSize = convInfo.batchSize,\n    filterHeight = convInfo.filterHeight,\n    filterWidth = convInfo.filterWidth,\n    inChannels = convInfo.inChannels,\n    inHeight = convInfo.inHeight,\n    inWidth = convInfo.inWidth,\n    outChannels = convInfo.outChannels,\n    outHeight = convInfo.outHeight,\n    outWidth = convInfo.outWidth,\n    strideHeight = convInfo.strideHeight,\n    strideWidth = convInfo.strideWidth;\n  var topPad = filterHeight - 1 - convInfo.padInfo.top;\n  var leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  var chMul = outChannels / inChannels;\n  for (var b = 0; b < batchSize; ++b) {\n    for (var d1 = 0; d1 < inChannels; ++d1) {\n      for (var xR = 0; xR < inHeight; ++xR) {\n        var xRCorner = xR - topPad;\n        var xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        var yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n        for (var xC = 0; xC < inWidth; ++xC) {\n          var xCCorner = xC - leftPad;\n          var xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          var yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n          var dotProd = 0;\n          for (var yR = xRMin; yR < yRMax; ++yR) {\n            var wR = yR * strideHeight - xRCorner;\n            for (var yC = xCMin; yC < yCMax; ++yC) {\n              var wC = yC * strideWidth - xCCorner;\n              var dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              var fltOffset = fltS0 * (filterHeight - 1 - wR) + fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n              for (var dm = 0; dm < chMul; ++dm) {\n                var d2 = d1 * chMul + dm;\n                var pixel = dyValues[dyOffset + d2];\n                var weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport var depthwiseConv2dNativeBackpropInputConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput\n};","map":{"version":3,"names":["backend_util","DepthwiseConv2dNativeBackpropInput","TensorBuffer","util","assertNotComplex","depthwiseConv2dNativeBackpropInput","args","inputs","backend","attrs","dy","filter","strides","dilations","pad","dimRoundingMode","inputShape","dyStrides","computeStrides","shape","filterStrides","convInfo","computeConv2DInfo","dx","inShape","dxValues","values","_dx$strides","_slicedToArray","dxS0","dxS1","dxS2","dyValues","data","get","dataId","_dyStrides","dyS0","dyS1","dyS2","fltValues","_filterStrides","fltS0","fltS1","fltS2","batchSize","filterHeight","filterWidth","inChannels","inHeight","inWidth","outChannels","outHeight","outWidth","strideHeight","strideWidth","topPad","padInfo","top","leftPad","left","chMul","b","d1","xR","xRCorner","xRMin","Math","max","ceil","yRMax","min","xC","xCCorner","xCMin","yCMax","dotProd","yR","wR","yC","wC","dyOffset","fltOffset","dm","d2","pixel","weight","makeTensorInfo","dtype","depthwiseConv2dNativeBackpropInputConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-cpu\\src\\kernels\\DepthwiseConv2dNativeBackpropInput.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const chMul = outChannels / inChannels;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let dm = 0; dm < chMul; ++dm) {\n                const d2 = d1 * chMul + dm;\n                const pixel = dyValues[dyOffset + d2];\n                const weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as unknown as KernelFunc\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}