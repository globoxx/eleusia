{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */\nimport { Dataset } from '../dataset';\n/**\r\n * Represents a potentially large collection of text lines.\r\n *\r\n * The results are not batched.\r\n */\nexport var TextLineDataset = /*#__PURE__*/function (_Dataset) {\n  _inherits(TextLineDataset, _Dataset);\n  var _super = _createSuper(TextLineDataset);\n  /**\r\n   * Create a `TextLineDataset`.\r\n   *\r\n   * @param input A `DataSource` providing a chunked, UTF8-encoded byte stream.\r\n   */\n  function TextLineDataset(input) {\n    var _this;\n    _classCallCheck(this, TextLineDataset);\n    _this = _super.call(this);\n    _this.input = input;\n    return _this;\n  }\n  _createClass(TextLineDataset, [{\n    key: \"iterator\",\n    value: function () {\n      var _iterator = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var inputIterator, utf8Iterator, lineIterator;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.input.iterator();\n            case 2:\n              inputIterator = _context.sent;\n              utf8Iterator = inputIterator.decodeUTF8();\n              lineIterator = utf8Iterator.split('\\n').map(function (line) {\n                // Windows/DOS format text file has extra line breaker at the end of line.\n                if (line.endsWith('\\r')) {\n                  line = line.slice(0, -1);\n                }\n                return line;\n              });\n              return _context.abrupt(\"return\", lineIterator);\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function iterator() {\n        return _iterator.apply(this, arguments);\n      }\n      return iterator;\n    }()\n  }]);\n  return TextLineDataset;\n}(Dataset);","map":{"version":3,"names":["Dataset","TextLineDataset","_Dataset","_inherits","_super","_createSuper","input","_this","_classCallCheck","call","_createClass","key","value","_iterator","_asyncToGenerator","_regeneratorRuntime","mark","_callee","inputIterator","utf8Iterator","lineIterator","wrap","_callee$","_context","prev","next","iterator","sent","decodeUTF8","split","map","line","endsWith","slice","abrupt","stop","apply","arguments"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-data\\src\\datasets\\text_line_dataset.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {Dataset} from '../dataset';\nimport {DataSource} from '../datasource';\nimport {LazyIterator} from '../iterators/lazy_iterator';\n\n/**\n * Represents a potentially large collection of text lines.\n *\n * The results are not batched.\n */\nexport class TextLineDataset extends Dataset<string> {\n  /**\n   * Create a `TextLineDataset`.\n   *\n   * @param input A `DataSource` providing a chunked, UTF8-encoded byte stream.\n   */\n  constructor(protected readonly input: DataSource) {\n    super();\n  }\n\n  async iterator(): Promise<LazyIterator<string>> {\n    const inputIterator = await this.input.iterator();\n    const utf8Iterator = inputIterator.decodeUTF8();\n    const lineIterator = utf8Iterator.split('\\n').map(line => {\n      // Windows/DOS format text file has extra line breaker at the end of line.\n      if (line.endsWith('\\r')) {\n        line = line.slice(0, -1);\n      }\n      return line;\n    });\n    return lineIterator;\n  }\n}\n"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;AAkBA,SAAQA,OAAO,QAAO,YAAY;AAIlC;;;;;AAKA,WAAaC,eAAgB,0BAAAC,QAAA;EAAAC,SAAA,CAAAF,eAAA,EAAAC,QAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,eAAA;EAC3B;;;;;EAKA,SAAAA,gBAA+BK,KAAiB;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAP,eAAA;IAC9CM,KAAA,GAAAH,MAAA,CAAAK,IAAA;IAD6BF,KAAA,CAAAD,KAAK,GAALA,KAAK;IAAY,OAAAC,KAAA;EAEhD;EAACG,YAAA,CAAAT,eAAA;IAAAU,GAAA;IAAAC,KAAA;MAAA,IAAAC,SAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAC,QAAA;QAAA,IAAAC,aAAA,EAAAC,YAAA,EAAAC,YAAA;QAAA,OAAAL,mBAAA,GAAAM,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAE,IAAA;cAAA,OAC8B,IAAI,CAACnB,KAAK,CAACoB,QAAQ,EAAE;YAAA;cAA3CR,aAAa,GAAAK,QAAA,CAAAI,IAAA;cACbR,YAAY,GAAGD,aAAa,CAACU,UAAU,EAAE;cACzCR,YAAY,GAAGD,YAAY,CAACU,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,UAAAC,IAAI,EAAG;gBACvD;gBACA,IAAIA,IAAI,CAACC,QAAQ,CAAC,IAAI,CAAC,EAAE;kBACvBD,IAAI,GAAGA,IAAI,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;gBAE1B,OAAOF,IAAI;cACb,CAAC,CAAC;cAAA,OAAAR,QAAA,CAAAW,MAAA,WACKd,YAAY;YAAA;YAAA;cAAA,OAAAG,QAAA,CAAAY,IAAA;UAAA;QAAA,GAAAlB,OAAA;MAAA,CACpB;MAAA,SAAAS,SAAA;QAAA,OAAAb,SAAA,CAAAuB,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAX,QAAA;IAAA;EAAA;EAAA,OAAAzB,eAAA;AAAA,EArBkCD,OAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}