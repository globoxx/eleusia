{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { GreaterEqual } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\r\n * Returns the truth value of (a >= b) element-wise. Supports broadcasting.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2, 3]);\r\n * const b = tf.tensor1d([2, 2, 2]);\r\n *\r\n * a.greaterEqual(b).print();\r\n * ```\r\n *\r\n * @param a The first input tensor.\r\n * @param b The second input tensor. Must have the same dtype as `a`.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Logical'}\r\n */\nfunction greaterEqual_(a, b) {\n  var $a = convertToTensor(a, 'a', 'greaterEqual', 'string_or_numeric');\n  var $b = convertToTensor(b, 'b', 'greaterEqual', 'string_or_numeric');\n  var _makeTypesMatch = makeTypesMatch($a, $b);\n  var _makeTypesMatch2 = _slicedToArray(_makeTypesMatch, 2);\n  $a = _makeTypesMatch2[0];\n  $b = _makeTypesMatch2[1];\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n  var inputs = {\n    a: $a,\n    b: $b\n  };\n  return ENGINE.runKernel(GreaterEqual, inputs);\n}\nexport var greaterEqual = /* @__PURE__ */op({\n  greaterEqual_: greaterEqual_\n});","map":{"version":3,"names":["ENGINE","GreaterEqual","makeTypesMatch","convertToTensor","assertAndGetBroadcastShape","op","greaterEqual_","a","b","$a","$b","_makeTypesMatch","_makeTypesMatch2","_slicedToArray","shape","inputs","runKernel","greaterEqual"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\greater_equal.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {GreaterEqual, GreaterEqualInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\n\n/**\n * Returns the truth value of (a >= b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.greaterEqual(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction greaterEqual_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'greaterEqual', 'string_or_numeric');\n  let $b = convertToTensor(b, 'b', 'greaterEqual', 'string_or_numeric');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const inputs: GreaterEqualInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(GreaterEqual, inputs as unknown as NamedTensorMap);\n}\n\nexport const greaterEqual = /* @__PURE__ */ op({greaterEqual_});\n"],"mappings":";AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,YAAY,QAA2B,iBAAiB;AAGhE,SAAQC,cAAc,QAAO,gBAAgB;AAC7C,SAAQC,eAAe,QAAO,oBAAoB;AAGlD,SAAQC,0BAA0B,QAAO,kBAAkB;AAC3D,SAAQC,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;;;;;AAeA,SAASC,aAAaA,CAClBC,CAAoB,EAAEC,CAAoB;EAC5C,IAAIC,EAAE,GAAGN,eAAe,CAACI,CAAC,EAAE,GAAG,EAAE,cAAc,EAAE,mBAAmB,CAAC;EACrE,IAAIG,EAAE,GAAGP,eAAe,CAACK,CAAC,EAAE,GAAG,EAAE,cAAc,EAAE,mBAAmB,CAAC;EAAC,IAAAG,eAAA,GAC3DT,cAAc,CAACO,EAAE,EAAEC,EAAE,CAAC;EAAA,IAAAE,gBAAA,GAAAC,cAAA,CAAAF,eAAA;EAAhCF,EAAE,GAAAG,gBAAA;EAAEF,EAAE,GAAAE,gBAAA;EAEPR,0BAA0B,CAACK,EAAE,CAACK,KAAK,EAAEJ,EAAE,CAACI,KAAK,CAAC;EAE9C,IAAMC,MAAM,GAAuB;IAACR,CAAC,EAAEE,EAAE;IAAED,CAAC,EAAEE;EAAE,CAAC;EAEjD,OAAOV,MAAM,CAACgB,SAAS,CAACf,YAAY,EAAEc,MAAmC,CAAC;AAC5E;AAEA,OAAO,IAAME,YAAY,GAAG,eAAgBZ,EAAE,CAAC;EAACC,aAAa,EAAbA;AAAa,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}