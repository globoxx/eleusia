{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON } from './io_utils';\nimport { CompositeArrayBuffer } from './composite_array_buffer';\nimport { IORouterRegistry } from './router_registry';\nvar PATH_SEPARATOR = '/';\nvar PATH_PREFIX = 'tensorflowjs_models';\nvar INFO_SUFFIX = 'info';\nvar MODEL_TOPOLOGY_SUFFIX = 'model_topology';\nvar WEIGHT_SPECS_SUFFIX = 'weight_specs';\nvar WEIGHT_DATA_SUFFIX = 'weight_data';\nvar MODEL_METADATA_SUFFIX = 'model_metadata';\n/**\r\n * Purge all tensorflow.js-saved model artifacts from local storage.\r\n *\r\n * @returns Paths of the models purged.\r\n */\nexport function purgeLocalStorageArtifacts() {\n  if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' || typeof window.localStorage === 'undefined') {\n    throw new Error('purgeLocalStorageModels() cannot proceed because local storage is ' + 'unavailable in the current environment.');\n  }\n  var LS = window.localStorage;\n  var purgedModelPaths = [];\n  for (var i = 0; i < LS.length; ++i) {\n    var key = LS.key(i);\n    var prefix = PATH_PREFIX + PATH_SEPARATOR;\n    if (key.startsWith(prefix) && key.length > prefix.length) {\n      LS.removeItem(key);\n      var modelName = getModelPathFromKey(key);\n      if (purgedModelPaths.indexOf(modelName) === -1) {\n        purgedModelPaths.push(modelName);\n      }\n    }\n  }\n  return purgedModelPaths;\n}\nfunction getModelKeys(path) {\n  return {\n    info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n    topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n    weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n    weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n    modelMetadata: [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n  };\n}\nfunction removeItems(keys) {\n  for (var _i = 0, _Object$values = Object.values(keys); _i < _Object$values.length; _i++) {\n    var key = _Object$values[_i];\n    window.localStorage.removeItem(key);\n  }\n}\n/**\r\n * Get model path from a local-storage key.\r\n *\r\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\r\n *\r\n * @param key\r\n */\nfunction getModelPathFromKey(key) {\n  var items = key.split(PATH_SEPARATOR);\n  if (items.length < 3) {\n    throw new Error(\"Invalid key format: \".concat(key));\n  }\n  return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\nfunction maybeStripScheme(key) {\n  return key.startsWith(BrowserLocalStorage.URL_SCHEME) ? key.slice(BrowserLocalStorage.URL_SCHEME.length) : key;\n}\n/**\r\n * IOHandler subclass: Browser Local Storage.\r\n *\r\n * See the doc string to `browserLocalStorage` for more details.\r\n */\nexport var BrowserLocalStorage = /*#__PURE__*/function () {\n  function BrowserLocalStorage(modelPath) {\n    _classCallCheck(this, BrowserLocalStorage);\n    if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' || typeof window.localStorage === 'undefined') {\n      // TODO(cais): Add more info about what IOHandler subtypes are\n      // available.\n      //   Maybe point to a doc page on the web and/or automatically determine\n      //   the available IOHandlers and print them in the error message.\n      throw new Error('The current environment does not support local storage.');\n    }\n    this.LS = window.localStorage;\n    if (modelPath == null || !modelPath) {\n      throw new Error('For local storage, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n    this.keys = getModelKeys(this.modelPath);\n  }\n  /**\r\n   * Save model artifacts to browser local storage.\r\n   *\r\n   * See the documentation to `browserLocalStorage` for details on the saved\r\n   * artifacts.\r\n   *\r\n   * @param modelArtifacts The model artifacts to be stored.\r\n   * @returns An instance of SaveResult.\r\n   */\n  _createClass(BrowserLocalStorage, [{\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(modelArtifacts) {\n        var topology, weightSpecs, modelArtifactsInfo, weightBuffer, metadata;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(modelArtifacts.modelTopology instanceof ArrayBuffer)) {\n                _context.next = 4;\n                break;\n              }\n              throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');\n            case 4:\n              topology = JSON.stringify(modelArtifacts.modelTopology);\n              weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n              modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts); // TODO(mattsoulanille): Support saving models over 2GB that exceed\n              // Chrome's ArrayBuffer size limit.\n              weightBuffer = CompositeArrayBuffer.join(modelArtifacts.weightData);\n              _context.prev = 8;\n              this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));\n              this.LS.setItem(this.keys.topology, topology);\n              this.LS.setItem(this.keys.weightSpecs, weightSpecs);\n              this.LS.setItem(this.keys.weightData, arrayBufferToBase64String(weightBuffer));\n              // Note that JSON.stringify doesn't write out keys that have undefined\n              // values, so for some keys, we set undefined instead of a null-ish\n              // value.\n              metadata = {\n                format: modelArtifacts.format,\n                generatedBy: modelArtifacts.generatedBy,\n                convertedBy: modelArtifacts.convertedBy,\n                signature: modelArtifacts.signature != null ? modelArtifacts.signature : undefined,\n                userDefinedMetadata: modelArtifacts.userDefinedMetadata != null ? modelArtifacts.userDefinedMetadata : undefined,\n                modelInitializer: modelArtifacts.modelInitializer != null ? modelArtifacts.modelInitializer : undefined,\n                initializerSignature: modelArtifacts.initializerSignature != null ? modelArtifacts.initializerSignature : undefined,\n                trainingConfig: modelArtifacts.trainingConfig != null ? modelArtifacts.trainingConfig : undefined\n              };\n              this.LS.setItem(this.keys.modelMetadata, JSON.stringify(metadata));\n              return _context.abrupt(\"return\", {\n                modelArtifactsInfo: modelArtifactsInfo\n              });\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](8);\n              // If saving failed, clean up all items saved so far.\n              removeItems(this.keys);\n              throw new Error(\"Failed to save model '\".concat(this.modelPath, \"' to local storage: \") + \"size quota being exceeded is a possible cause of this failure: \" + \"modelTopologyBytes=\".concat(modelArtifactsInfo.modelTopologyBytes, \", \") + \"weightSpecsBytes=\".concat(modelArtifactsInfo.weightSpecsBytes, \", \") + \"weightDataBytes=\".concat(modelArtifactsInfo.weightDataBytes, \".\"));\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[8, 18]]);\n      }));\n      function save(_x) {\n        return _save.apply(this, arguments);\n      }\n      return save;\n    }()\n    /**\r\n     * Load a model from local storage.\r\n     *\r\n     * See the documentation to `browserLocalStorage` for details on the saved\r\n     * artifacts.\r\n     *\r\n     * @returns The loaded model (if loading succeeds).\r\n     */\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var info, out, topology, weightSpecs, metadataString, metadata, weightDataBase64;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              info = JSON.parse(this.LS.getItem(this.keys.info));\n              if (!(info == null)) {\n                _context2.next = 3;\n                break;\n              }\n              throw new Error(\"In local storage, there is no model with name '\".concat(this.modelPath, \"'\"));\n            case 3:\n              if (!(info.modelTopologyType !== 'JSON')) {\n                _context2.next = 5;\n                break;\n              }\n              throw new Error('BrowserLocalStorage does not support loading non-JSON model ' + 'topology yet.');\n            case 5:\n              out = {}; // Load topology.\n              topology = JSON.parse(this.LS.getItem(this.keys.topology));\n              if (!(topology == null)) {\n                _context2.next = 9;\n                break;\n              }\n              throw new Error(\"In local storage, the topology of model '\".concat(this.modelPath, \"' \") + \"is missing.\");\n            case 9:\n              out.modelTopology = topology;\n              // Load weight specs.\n              weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));\n              if (!(weightSpecs == null)) {\n                _context2.next = 13;\n                break;\n              }\n              throw new Error(\"In local storage, the weight specs of model '\".concat(this.modelPath, \"' \") + \"are missing.\");\n            case 13:\n              out.weightSpecs = weightSpecs;\n              // Load meta-data fields.\n              metadataString = this.LS.getItem(this.keys.modelMetadata);\n              if (metadataString != null) {\n                metadata = JSON.parse(metadataString);\n                out.format = metadata.format;\n                out.generatedBy = metadata.generatedBy;\n                out.convertedBy = metadata.convertedBy;\n                if (metadata.signature != null) {\n                  out.signature = metadata.signature;\n                }\n                if (metadata.userDefinedMetadata != null) {\n                  out.userDefinedMetadata = metadata.userDefinedMetadata;\n                }\n                if (metadata.modelInitializer != null) {\n                  out.modelInitializer = metadata.modelInitializer;\n                }\n                if (metadata.initializerSignature != null) {\n                  out.initializerSignature = metadata.initializerSignature;\n                }\n                if (metadata.trainingConfig != null) {\n                  out.trainingConfig = metadata.trainingConfig;\n                }\n              }\n              // Load weight data.\n              weightDataBase64 = this.LS.getItem(this.keys.weightData);\n              if (!(weightDataBase64 == null)) {\n                _context2.next = 19;\n                break;\n              }\n              throw new Error(\"In local storage, the binary weight values of model \" + \"'\".concat(this.modelPath, \"' are missing.\"));\n            case 19:\n              out.weightData = base64StringToArrayBuffer(weightDataBase64);\n              return _context2.abrupt(\"return\", out);\n            case 21:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function load() {\n        return _load.apply(this, arguments);\n      }\n      return load;\n    }()\n  }]);\n  return BrowserLocalStorage;\n}();\nBrowserLocalStorage.URL_SCHEME = 'localstorage://';\nexport var localStorageRouter = function localStorageRouter(url) {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n      return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\n/**\r\n * Factory function for local storage IOHandler.\r\n *\r\n * This `IOHandler` supports both `save` and `load`.\r\n *\r\n * For each model's saved artifacts, four items are saved to local storage.\r\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\r\n *     model, such as date saved, type of the topology, size in bytes, etc.\r\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\r\n *     style models, this is a stringized JSON.\r\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\r\n *     model, can be used to decode the saved binary weight values (see\r\n *     item below).\r\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\r\n *     weight values, stored as a base64-encoded string.\r\n *\r\n * Saving may throw an `Error` if the total size of the artifacts exceed the\r\n * browser-specific quota.\r\n *\r\n * @param modelPath A unique identifier for the model to be saved. Must be a\r\n *   non-empty string.\r\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\r\n *   `tf.Model.save`.\r\n */\nexport function browserLocalStorage(modelPath) {\n  return new BrowserLocalStorage(modelPath);\n}\nexport var BrowserLocalStorageManager = /*#__PURE__*/function () {\n  function BrowserLocalStorageManager() {\n    _classCallCheck(this, BrowserLocalStorageManager);\n    assert(env().getBool('IS_BROWSER'), function () {\n      return 'Current environment is not a web browser';\n    });\n    assert(typeof window === 'undefined' || typeof window.localStorage !== 'undefined', function () {\n      return 'Current browser does not appear to support localStorage';\n    });\n    this.LS = window.localStorage;\n  }\n  _createClass(BrowserLocalStorageManager, [{\n    key: \"listModels\",\n    value: function () {\n      var _listModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var out, prefix, suffix, i, key, modelPath;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              out = {};\n              prefix = PATH_PREFIX + PATH_SEPARATOR;\n              suffix = PATH_SEPARATOR + INFO_SUFFIX;\n              for (i = 0; i < this.LS.length; ++i) {\n                key = this.LS.key(i);\n                if (key.startsWith(prefix) && key.endsWith(suffix)) {\n                  modelPath = getModelPathFromKey(key);\n                  out[modelPath] = JSON.parse(this.LS.getItem(key));\n                }\n              }\n              return _context3.abrupt(\"return\", out);\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function listModels() {\n        return _listModels.apply(this, arguments);\n      }\n      return listModels;\n    }()\n  }, {\n    key: \"removeModel\",\n    value: function () {\n      var _removeModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(path) {\n        var keys, info;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              path = maybeStripScheme(path);\n              keys = getModelKeys(path);\n              if (!(this.LS.getItem(keys.info) == null)) {\n                _context4.next = 4;\n                break;\n              }\n              throw new Error(\"Cannot find model at path '\".concat(path, \"'\"));\n            case 4:\n              info = JSON.parse(this.LS.getItem(keys.info));\n              removeItems(keys);\n              return _context4.abrupt(\"return\", info);\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function removeModel(_x2) {\n        return _removeModel.apply(this, arguments);\n      }\n      return removeModel;\n    }()\n  }]);\n  return BrowserLocalStorageManager;\n}();","map":{"version":3,"names":["env","assert","arrayBufferToBase64String","base64StringToArrayBuffer","getModelArtifactsInfoForJSON","CompositeArrayBuffer","IORouterRegistry","PATH_SEPARATOR","PATH_PREFIX","INFO_SUFFIX","MODEL_TOPOLOGY_SUFFIX","WEIGHT_SPECS_SUFFIX","WEIGHT_DATA_SUFFIX","MODEL_METADATA_SUFFIX","purgeLocalStorageArtifacts","getBool","window","localStorage","Error","LS","purgedModelPaths","i","length","key","prefix","startsWith","removeItem","modelName","getModelPathFromKey","indexOf","push","getModelKeys","path","info","join","topology","weightSpecs","weightData","modelMetadata","removeItems","keys","_i","_Object$values","Object","values","items","split","concat","slice","maybeStripScheme","BrowserLocalStorage","URL_SCHEME","modelPath","_classCallCheck","_createClass","value","_save","_asyncToGenerator","_regeneratorRuntime","mark","_callee","modelArtifacts","modelArtifactsInfo","weightBuffer","metadata","wrap","_callee$","_context","prev","next","modelTopology","ArrayBuffer","JSON","stringify","setItem","format","generatedBy","convertedBy","signature","undefined","userDefinedMetadata","modelInitializer","initializerSignature","trainingConfig","abrupt","t0","modelTopologyBytes","weightSpecsBytes","weightDataBytes","stop","save","_x","apply","arguments","_load","_callee2","out","metadataString","weightDataBase64","_callee2$","_context2","parse","getItem","modelTopologyType","load","localStorageRouter","url","Array","isArray","browserLocalStorage","registerSaveRouter","registerLoadRouter","BrowserLocalStorageManager","_listModels","_callee3","suffix","_callee3$","_context3","endsWith","listModels","_removeModel","_callee4","_callee4$","_context4","removeModel","_x2"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\io\\local_storage.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport '../flags';\nimport {env} from '../environment';\n\nimport {assert} from '../util';\nimport {arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON} from './io_utils';\nimport {CompositeArrayBuffer} from './composite_array_buffer';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelArtifactsInfo, ModelJSON, ModelStoreManager, SaveResult} from './types';\n\nconst PATH_SEPARATOR = '/';\nconst PATH_PREFIX = 'tensorflowjs_models';\nconst INFO_SUFFIX = 'info';\nconst MODEL_TOPOLOGY_SUFFIX = 'model_topology';\nconst WEIGHT_SPECS_SUFFIX = 'weight_specs';\nconst WEIGHT_DATA_SUFFIX = 'weight_data';\nconst MODEL_METADATA_SUFFIX = 'model_metadata';\n\n/**\n * Purge all tensorflow.js-saved model artifacts from local storage.\n *\n * @returns Paths of the models purged.\n */\nexport function purgeLocalStorageArtifacts(): string[] {\n  if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n      typeof window.localStorage === 'undefined') {\n    throw new Error(\n        'purgeLocalStorageModels() cannot proceed because local storage is ' +\n        'unavailable in the current environment.');\n  }\n  const LS = window.localStorage;\n  const purgedModelPaths: string[] = [];\n  for (let i = 0; i < LS.length; ++i) {\n    const key = LS.key(i);\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    if (key.startsWith(prefix) && key.length > prefix.length) {\n      LS.removeItem(key);\n      const modelName = getModelPathFromKey(key);\n      if (purgedModelPaths.indexOf(modelName) === -1) {\n        purgedModelPaths.push(modelName);\n      }\n    }\n  }\n  return purgedModelPaths;\n}\n\ntype LocalStorageKeys = {\n  /** Key of the localStorage entry storing `ModelArtifactsInfo`. */\n  info: string,\n  /**\n   * Key of the localStorage entry storing the 'modelTopology' key of\n   * `model.json`\n   */\n  topology: string,\n  /**\n   * Key of the localStorage entry storing the `weightsManifest.weights` entries\n   * of `model.json`\n   */\n  weightSpecs: string,\n  /** Key of the localStorage entry storing the weight data in Base64 */\n  weightData: string,\n  /**\n   * Key of the localStorage entry storing the remaining fields of `model.json`\n   * @see {@link ModelMetadata}\n   */\n  modelMetadata: string,\n};\n\ntype ModelMetadata = Omit<ModelJSON, 'modelTopology'|'weightsManifest'>;\n\nfunction getModelKeys(path: string): LocalStorageKeys {\n  return {\n    info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n    topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n    weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n    weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n    modelMetadata:\n        [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n  };\n}\n\nfunction removeItems(keys: LocalStorageKeys): void {\n  for (const key of Object.values(keys)) {\n    window.localStorage.removeItem(key);\n  }\n}\n\n/**\n * Get model path from a local-storage key.\n *\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\n *\n * @param key\n */\nfunction getModelPathFromKey(key: string) {\n  const items = key.split(PATH_SEPARATOR);\n  if (items.length < 3) {\n    throw new Error(`Invalid key format: ${key}`);\n  }\n  return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\n\nfunction maybeStripScheme(key: string) {\n  return key.startsWith(BrowserLocalStorage.URL_SCHEME) ?\n      key.slice(BrowserLocalStorage.URL_SCHEME.length) :\n      key;\n}\n\n/**\n * IOHandler subclass: Browser Local Storage.\n *\n * See the doc string to `browserLocalStorage` for more details.\n */\nexport class BrowserLocalStorage implements IOHandler {\n  protected readonly LS: Storage;\n  protected readonly modelPath: string;\n  protected readonly keys: LocalStorageKeys;\n\n  static readonly URL_SCHEME = 'localstorage://';\n\n  constructor(modelPath: string) {\n    if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n        typeof window.localStorage === 'undefined') {\n      // TODO(cais): Add more info about what IOHandler subtypes are\n      // available.\n      //   Maybe point to a doc page on the web and/or automatically determine\n      //   the available IOHandlers and print them in the error message.\n      throw new Error(\n          'The current environment does not support local storage.');\n    }\n    this.LS = window.localStorage;\n\n    if (modelPath == null || !modelPath) {\n      throw new Error(\n          'For local storage, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n    this.keys = getModelKeys(this.modelPath);\n  }\n\n  /**\n   * Save model artifacts to browser local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @param modelArtifacts The model artifacts to be stored.\n   * @returns An instance of SaveResult.\n   */\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserLocalStorage.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    } else {\n      const topology = JSON.stringify(modelArtifacts.modelTopology);\n      const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n\n      const modelArtifactsInfo: ModelArtifactsInfo =\n          getModelArtifactsInfoForJSON(modelArtifacts);\n\n      // TODO(mattsoulanille): Support saving models over 2GB that exceed\n      // Chrome's ArrayBuffer size limit.\n      const weightBuffer = CompositeArrayBuffer.join(modelArtifacts.weightData);\n\n      try {\n        this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));\n        this.LS.setItem(this.keys.topology, topology);\n        this.LS.setItem(this.keys.weightSpecs, weightSpecs);\n        this.LS.setItem(\n            this.keys.weightData,\n            arrayBufferToBase64String(weightBuffer));\n\n        // Note that JSON.stringify doesn't write out keys that have undefined\n        // values, so for some keys, we set undefined instead of a null-ish\n        // value.\n        const metadata: Required<ModelMetadata> = {\n          format: modelArtifacts.format,\n          generatedBy: modelArtifacts.generatedBy,\n          convertedBy: modelArtifacts.convertedBy,\n          signature: modelArtifacts.signature != null ?\n              modelArtifacts.signature :\n              undefined,\n          userDefinedMetadata: modelArtifacts.userDefinedMetadata != null ?\n              modelArtifacts.userDefinedMetadata :\n              undefined,\n          modelInitializer: modelArtifacts.modelInitializer != null ?\n              modelArtifacts.modelInitializer :\n              undefined,\n          initializerSignature: modelArtifacts.initializerSignature != null ?\n              modelArtifacts.initializerSignature :\n              undefined,\n          trainingConfig: modelArtifacts.trainingConfig != null ?\n              modelArtifacts.trainingConfig :\n              undefined\n        };\n        this.LS.setItem(this.keys.modelMetadata, JSON.stringify(metadata));\n\n        return {modelArtifactsInfo};\n      } catch (err) {\n        // If saving failed, clean up all items saved so far.\n        removeItems(this.keys);\n\n        throw new Error(\n            `Failed to save model '${this.modelPath}' to local storage: ` +\n            `size quota being exceeded is a possible cause of this failure: ` +\n            `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` +\n            `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` +\n            `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);\n      }\n    }\n  }\n\n  /**\n   * Load a model from local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model (if loading succeeds).\n   */\n  async load(): Promise<ModelArtifacts> {\n    const info =\n        JSON.parse(this.LS.getItem(this.keys.info)) as ModelArtifactsInfo;\n    if (info == null) {\n      throw new Error(\n          `In local storage, there is no model with name '${this.modelPath}'`);\n    }\n\n    if (info.modelTopologyType !== 'JSON') {\n      throw new Error(\n          'BrowserLocalStorage does not support loading non-JSON model ' +\n          'topology yet.');\n    }\n\n    const out: ModelArtifacts = {};\n\n    // Load topology.\n    const topology = JSON.parse(this.LS.getItem(this.keys.topology));\n    if (topology == null) {\n      throw new Error(\n          `In local storage, the topology of model '${this.modelPath}' ` +\n          `is missing.`);\n    }\n    out.modelTopology = topology;\n\n    // Load weight specs.\n    const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));\n    if (weightSpecs == null) {\n      throw new Error(\n          `In local storage, the weight specs of model '${this.modelPath}' ` +\n          `are missing.`);\n    }\n    out.weightSpecs = weightSpecs;\n\n    // Load meta-data fields.\n    const metadataString = this.LS.getItem(this.keys.modelMetadata);\n    if (metadataString != null) {\n      const metadata = JSON.parse(metadataString) as ModelMetadata;\n      out.format = metadata.format;\n      out.generatedBy = metadata.generatedBy;\n      out.convertedBy = metadata.convertedBy;\n      if (metadata.signature != null) {\n        out.signature = metadata.signature;\n      }\n      if (metadata.userDefinedMetadata != null) {\n        out.userDefinedMetadata = metadata.userDefinedMetadata;\n      }\n      if (metadata.modelInitializer != null) {\n        out.modelInitializer = metadata.modelInitializer;\n      }\n      if (metadata.initializerSignature != null) {\n        out.initializerSignature = metadata.initializerSignature;\n      }\n      if (metadata.trainingConfig != null) {\n        out.trainingConfig = metadata.trainingConfig;\n      }\n    }\n\n    // Load weight data.\n    const weightDataBase64 = this.LS.getItem(this.keys.weightData);\n    if (weightDataBase64 == null) {\n      throw new Error(\n          `In local storage, the binary weight values of model ` +\n          `'${this.modelPath}' are missing.`);\n    }\n    out.weightData = base64StringToArrayBuffer(weightDataBase64);\n\n    return out;\n  }\n}\n\nexport const localStorageRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n      return browserLocalStorage(\n          url.slice(BrowserLocalStorage.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\n\n/**\n * Factory function for local storage IOHandler.\n *\n * This `IOHandler` supports both `save` and `load`.\n *\n * For each model's saved artifacts, four items are saved to local storage.\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\n *     model, such as date saved, type of the topology, size in bytes, etc.\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\n *     style models, this is a stringized JSON.\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\n *     model, can be used to decode the saved binary weight values (see\n *     item below).\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\n *     weight values, stored as a base64-encoded string.\n *\n * Saving may throw an `Error` if the total size of the artifacts exceed the\n * browser-specific quota.\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\n *   `tf.Model.save`.\n */\nexport function browserLocalStorage(modelPath: string): IOHandler {\n  return new BrowserLocalStorage(modelPath);\n}\n\nexport class BrowserLocalStorageManager implements ModelStoreManager {\n  private readonly LS: Storage;\n\n  constructor() {\n    assert(\n        env().getBool('IS_BROWSER'),\n        () => 'Current environment is not a web browser');\n    assert(\n        typeof window === 'undefined' ||\n            typeof window.localStorage !== 'undefined',\n        () => 'Current browser does not appear to support localStorage');\n    this.LS = window.localStorage;\n  }\n\n  async listModels(): Promise<{[path: string]: ModelArtifactsInfo}> {\n    const out: {[path: string]: ModelArtifactsInfo} = {};\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    const suffix = PATH_SEPARATOR + INFO_SUFFIX;\n    for (let i = 0; i < this.LS.length; ++i) {\n      const key = this.LS.key(i);\n      if (key.startsWith(prefix) && key.endsWith(suffix)) {\n        const modelPath = getModelPathFromKey(key);\n        out[modelPath] = JSON.parse(this.LS.getItem(key)) as ModelArtifactsInfo;\n      }\n    }\n    return out;\n  }\n\n  async removeModel(path: string): Promise<ModelArtifactsInfo> {\n    path = maybeStripScheme(path);\n    const keys = getModelKeys(path);\n    if (this.LS.getItem(keys.info) == null) {\n      throw new Error(`Cannot find model at path '${path}'`);\n    }\n    const info = JSON.parse(this.LS.getItem(keys.info)) as ModelArtifactsInfo;\n    removeItems(keys);\n    return info;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}