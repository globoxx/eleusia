{"ast":null,"code":"import _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nexport var Conv2DDerInputPackedProgram = /*#__PURE__*/_createClass(function Conv2DDerInputPackedProgram(convInfo) {\n  _classCallCheck(this, Conv2DDerInputPackedProgram);\n  this.variableNames = ['dy', 'W'];\n  this.packedInputs = true;\n  this.packedOutput = true;\n  this.customUniforms = [{\n    name: 'strides',\n    type: 'vec2'\n  }];\n  this.outputShape = convInfo.inShape;\n  this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n  var filterHeight = convInfo.filterHeight;\n  var filterWidth = convInfo.filterWidth;\n  var padTop = filterHeight - 1 - convInfo.padInfo.top;\n  var padLeft = filterWidth - 1 - convInfo.padInfo.left;\n  this.userCode = \"\\n      const ivec2 pads = ivec2(\".concat(padTop, \", \").concat(padLeft, \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d1 = coords[3];\\n\\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\\n        int dyRCorner = dyCorner.x;\\n        int dyCCorner = dyCorner.y;\\n\\n        vec4 result = vec4(0.);\\n        for (int wR = 0; wR < \").concat(filterHeight, \"; wR++) {\\n          float dyR = float(dyRCorner + wR) / strides[0];\\n          if (dyR < 0.0 || dyR >= \").concat(convInfo.outHeight, \".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n          int wRPerm = \").concat(filterHeight, \" - 1 - wR;\\n\\n          for (int wC = 0; wC < \").concat(filterWidth, \"; wC++) {\\n            int wCPerm = \").concat(filterWidth, \" - 1 - wC;\\n\\n            float dyC = float(dyCCorner + wC) / strides[1];\\n            bool idyCVal = (dyC >= 0.0) && (dyC < \").concat(convInfo.outWidth, \".0)\\n              && (fract(dyC) == 0.0);\\n            int idyC = int(dyC);\\n\\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < \").concat(convInfo.outWidth, \".0)\\n              && (fract(dyC2) == 0.0);\\n            int idyC2 = int(dyC2);\\n\\n            if (idyCVal && idyCVal2) {\\n              for (int d2 = 0; d2 < \").concat(convInfo.outChannels, \"; d2 += 2) {\\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\\n                  dySample : getDy(batch, idyR, idyC2, d2);\\n\\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\\n                  dySample.xy : dySample.zw;\\n                result.xy += vec2(dot(dyValue, wValue.xy),\\n                  dot(dyValue, wValue.zw));\\n\\n                dyValue = mod(float(idyC2), 2.) == 0. ?\\n                  dySample2.xy : dySample2.zw;\\n                result.zw += vec2(dot(dyValue, wValue.xy),\\n                  dot(dyValue, wValue.zw));\\n              }\\n            } else if (idyCVal) {\\n              for (int d2 = 0; d2 < \").concat(convInfo.outChannels, \"; d2 += 2) {\\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\\n                  dySample.xy : dySample.zw;\\n                result.xy += vec2(dot(dyValue, wValue.xy),\\n                  dot(dyValue, wValue.zw));\\n              }\\n            } else if (idyCVal2) {\\n              for (int d2 = 0; d2 < \").concat(convInfo.outChannels, \"; d2 += 2) {\\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\\n                  dySample.xy : dySample.zw;\\n                result.zw += vec2(dot(dyValue, wValue.xy),\\n                  dot(dyValue, wValue.zw));\\n              }\\n            }\\n          }\\n        }\\n        setOutput(result);\\n      }\\n    \");\n});","map":{"version":3,"names":["useShapeUniforms","Conv2DDerInputPackedProgram","_createClass","convInfo","_classCallCheck","variableNames","packedInputs","packedOutput","customUniforms","name","type","outputShape","inShape","enableShapeUniforms","length","filterHeight","filterWidth","padTop","padInfo","top","padLeft","left","userCode","concat","outHeight","outWidth","outChannels"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\conv_backprop_packed_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class Conv2DDerInputPackedProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'strides', type: 'vec2' as const },\n  ];\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${convInfo.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${convInfo.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAkBA,SAAsBA,gBAAgB,QAAO,cAAc;AAE3D,WAAaC,2BAA2B,gBAAAC,YAAA,CAWtC,SAAAD,4BAAYE,QAAiC;EAAAC,eAAA,OAAAH,2BAAA;EAV7C,KAAAI,aAAa,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC;EAC3B,KAAAC,YAAY,GAAG,IAAI;EACnB,KAAAC,YAAY,GAAG,IAAI;EAInB,KAAAC,cAAc,GAAG,CACf;IAACC,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE;EAAe,CAAE,CAC1C;EAGC,IAAI,CAACC,WAAW,GAAGR,QAAQ,CAACS,OAAO;EACnC,IAAI,CAACC,mBAAmB,GAAGb,gBAAgB,CAAC,IAAI,CAACW,WAAW,CAACG,MAAM,CAAC;EAEpE,IAAMC,YAAY,GAAGZ,QAAQ,CAACY,YAAY;EAC1C,IAAMC,WAAW,GAAGb,QAAQ,CAACa,WAAW;EAExC,IAAMC,MAAM,GAAGF,YAAY,GAAG,CAAC,GAAGZ,QAAQ,CAACe,OAAO,CAACC,GAAG;EACtD,IAAMC,OAAO,GAAGJ,WAAW,GAAG,CAAC,GAAGb,QAAQ,CAACe,OAAO,CAACG,IAAI;EAEvD,IAAI,CAACC,QAAQ,uCAAAC,MAAA,CACgBN,MAAM,QAAAM,MAAA,CAAKH,OAAO,oVAAAG,MAAA,CAYnBR,YAAY,8GAAAQ,MAAA,CAERpB,QAAQ,CAACqB,SAAS,4HAAAD,MAAA,CAI7BR,YAAY,oDAAAQ,MAAA,CAEHP,WAAW,0CAAAO,MAAA,CAClBP,WAAW,mIAAAO,MAAA,CAGcpB,QAAQ,CAACsB,QAAQ,6MAAAF,MAAA,CAKdpB,QAAQ,CAACsB,QAAQ,qKAAAF,MAAA,CAKlCpB,QAAQ,CAACuB,WAAW,2wBAAAH,MAAA,CAiBpBpB,QAAQ,CAACuB,WAAW,6bAAAH,MAAA,CASpBpB,QAAQ,CAACuB,WAAW,scAarD;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}