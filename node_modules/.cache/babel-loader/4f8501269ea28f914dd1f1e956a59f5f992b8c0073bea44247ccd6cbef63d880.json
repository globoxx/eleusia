{"ast":null,"code":"import _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var EPSILON_FLOAT32 = 1e-7;\nexport var EPSILON_FLOAT16 = 1e-4;\n/** Convenient class for storing tensor-related data. */\nexport var DataStorage = /*#__PURE__*/function () {\n  function DataStorage(backend, dataMover) {\n    _classCallCheck(this, DataStorage);\n    this.backend = backend;\n    this.dataMover = dataMover;\n    this.data = new WeakMap();\n    this.dataIdsCount = 0;\n  }\n  _createClass(DataStorage, [{\n    key: \"get\",\n    value: function get(dataId) {\n      if (!this.data.has(dataId)) {\n        this.dataMover.moveData(this.backend, dataId);\n      }\n      return this.data.get(dataId);\n    }\n  }, {\n    key: \"set\",\n    value: function set(dataId, value) {\n      this.dataIdsCount++;\n      this.data.set(dataId, value);\n    }\n  }, {\n    key: \"has\",\n    value: function has(dataId) {\n      return this.data.has(dataId);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(dataId) {\n      this.dataIdsCount--;\n      return this.data.delete(dataId);\n    }\n  }, {\n    key: \"numDataIds\",\n    value: function numDataIds() {\n      return this.dataIdsCount;\n    }\n  }]);\n  return DataStorage;\n}();\n/**\n * The interface that defines the kernels that should be implemented when\n * adding a new backend. New backends don't need to implement every one of the\n * methods, this can be done gradually (throw an error for unimplemented\n * methods).\n */\nexport var KernelBackend = /*#__PURE__*/function () {\n  function KernelBackend() {\n    _classCallCheck(this, KernelBackend);\n  }\n  _createClass(KernelBackend, [{\n    key: \"refCount\",\n    value: function refCount(dataId) {\n      return notYetImplemented('refCount');\n    }\n  }, {\n    key: \"incRef\",\n    value: function incRef(dataId) {\n      return notYetImplemented('incRef');\n    }\n  }, {\n    key: \"timerAvailable\",\n    value: function timerAvailable() {\n      return true;\n    }\n  }, {\n    key: \"time\",\n    value: function time(f) {\n      return notYetImplemented('time');\n    }\n  }, {\n    key: \"read\",\n    value: function read(dataId) {\n      return notYetImplemented('read');\n    }\n  }, {\n    key: \"readSync\",\n    value: function readSync(dataId) {\n      return notYetImplemented('readSync');\n    }\n  }, {\n    key: \"readToGPU\",\n    value: function readToGPU(dataId, options) {\n      return notYetImplemented('readToGPU');\n    }\n  }, {\n    key: \"numDataIds\",\n    value: function numDataIds() {\n      return notYetImplemented('numDataIds');\n    }\n  }, {\n    key: \"disposeData\",\n    value: function disposeData(dataId, force) {\n      return notYetImplemented('disposeData');\n    }\n  }, {\n    key: \"write\",\n    value: function write(values, shape, dtype) {\n      return notYetImplemented('write');\n    }\n  }, {\n    key: \"move\",\n    value: function move(dataId, values, shape, dtype, refCount) {\n      return notYetImplemented('move');\n    }\n  }, {\n    key: \"createTensorFromGPUData\",\n    value: function createTensorFromGPUData(values, shape, dtype) {\n      return notYetImplemented('createTensorFromGPUData');\n    }\n  }, {\n    key: \"memory\",\n    value: function memory() {\n      return notYetImplemented('memory');\n    }\n    /** Returns the highest precision for floats in bits (e.g. 16 or 32) */\n  }, {\n    key: \"floatPrecision\",\n    value: function floatPrecision() {\n      return notYetImplemented('floatPrecision');\n    }\n    /** Returns the smallest representable number.  */\n  }, {\n    key: \"epsilon\",\n    value: function epsilon() {\n      return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      return notYetImplemented('dispose');\n    }\n  }]);\n  return KernelBackend;\n}();\nfunction notYetImplemented(kernelName) {\n  throw new Error(\"'\".concat(kernelName, \"' not yet implemented or not found in the registry. \") + \"This kernel may not be supported by the tfjs backend you have chosen\");\n}","map":{"version":3,"names":["EPSILON_FLOAT32","EPSILON_FLOAT16","DataStorage","backend","dataMover","_classCallCheck","data","WeakMap","dataIdsCount","_createClass","key","value","get","dataId","has","moveData","set","_delete","delete","numDataIds","KernelBackend","refCount","notYetImplemented","incRef","timerAvailable","time","f","read","readSync","readToGPU","options","disposeData","force","write","values","shape","dtype","move","createTensorFromGPUData","memory","floatPrecision","epsilon","dispose","kernelName","Error","concat"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\backends\\backend.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Backend, DataToGPUOptions, GPUData, Tensor} from '../tensor';\nimport {DataId} from '../tensor_info';\nimport {BackendValues, DataType, WebGLData, WebGPUData} from '../types';\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\n// Required information for all backends.\nexport interface BackendTimingInfo {\n  kernelMs: number|{error: string};\n  getExtraProfileInfo?(): string;  // a field for additional timing information\n                                   // e.g. packing / unpacking for WebGL backend\n}\n\nexport interface TensorStorage {\n  read(dataId: DataId): Promise<BackendValues>;\n  readSync(dataId: DataId): BackendValues;\n  disposeData(dataId: DataId, force?: boolean): boolean;\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId;\n  move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void;\n  memory(): {unreliable: boolean;};  // Backend-specific information.\n  /** Returns number of data ids currently in the storage. */\n  numDataIds(): number;\n  refCount(dataId: DataId): number;\n}\n\n/** Convenient class for storing tensor-related data. */\nexport class DataStorage<T> {\n  private data = new WeakMap<DataId, T>();\n  private dataIdsCount = 0;\n\n  constructor(private backend: KernelBackend, private dataMover: DataMover) {}\n\n  get(dataId: DataId) {\n    if (!this.data.has(dataId)) {\n      this.dataMover.moveData(this.backend, dataId);\n    }\n    return this.data.get(dataId);\n  }\n\n  set(dataId: DataId, value: T): void {\n    this.dataIdsCount++;\n    this.data.set(dataId, value);\n  }\n\n  has(dataId: DataId): boolean {\n    return this.data.has(dataId);\n  }\n\n  delete(dataId: DataId): boolean {\n    this.dataIdsCount--;\n    return this.data.delete(dataId);\n  }\n\n  numDataIds(): number {\n    return this.dataIdsCount;\n  }\n}\n\nexport interface DataMover {\n  /**\n   * To be called by backends whenever they see a dataId that they don't own.\n   * Upon calling this method, the mover will fetch the tensor from another\n   * backend and register it with the current active backend.\n   */\n  moveData(backend: KernelBackend, dataId: DataId): void;\n}\n\nexport interface BackendTimer {\n  // check if backend timer is available\n  timerAvailable(): boolean;\n  time(f: () => void): Promise<BackendTimingInfo>;\n}\n\n/**\n * The interface that defines the kernels that should be implemented when\n * adding a new backend. New backends don't need to implement every one of the\n * methods, this can be done gradually (throw an error for unimplemented\n * methods).\n */\nexport class KernelBackend implements TensorStorage, Backend, BackendTimer {\n  refCount(dataId: DataId): number {\n    return notYetImplemented('refCount');\n  }\n  incRef(dataId: DataId): void {\n    return notYetImplemented('incRef');\n  }\n  timerAvailable(): boolean {\n    return true;\n  }\n  time(f: () => void): Promise<BackendTimingInfo> {\n    return notYetImplemented('time');\n  }\n  read(dataId: object): Promise<BackendValues> {\n    return notYetImplemented('read');\n  }\n  readSync(dataId: object): BackendValues {\n    return notYetImplemented('readSync');\n  }\n  readToGPU(dataId: object, options?: DataToGPUOptions): GPUData {\n    return notYetImplemented('readToGPU');\n  }\n  numDataIds(): number {\n    return notYetImplemented('numDataIds');\n  }\n  disposeData(dataId: object, force?: boolean): boolean {\n    return notYetImplemented('disposeData');\n  }\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId {\n    return notYetImplemented('write');\n  }\n  move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    return notYetImplemented('move');\n  }\n\n  createTensorFromGPUData(\n      values: WebGLData|WebGPUData, shape: number[], dtype: DataType): Tensor {\n    return notYetImplemented('createTensorFromGPUData');\n  }\n\n  memory(): {unreliable: boolean; reasons?: string[]} {\n    return notYetImplemented('memory');\n  }\n  /** Returns the highest precision for floats in bits (e.g. 16 or 32) */\n  floatPrecision(): 16|32 {\n    return notYetImplemented('floatPrecision');\n  }\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n  dispose(): void {\n    return notYetImplemented('dispose');\n  }\n}\n\nfunction notYetImplemented(kernelName: string): never {\n  throw new Error(\n      `'${kernelName}' not yet implemented or not found in the registry. ` +\n      `This kernel may not be supported by the tfjs backend you have chosen`);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}