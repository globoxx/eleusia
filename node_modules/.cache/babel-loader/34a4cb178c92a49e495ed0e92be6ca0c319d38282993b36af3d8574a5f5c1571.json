{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { env } from '../environment';\nimport { Draw, FromPixels } from '../kernel_names';\nimport { getKernel } from '../kernel_registry';\nimport { Tensor } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport { cast } from './cast';\nimport { op } from './operation';\nimport { tensor3d } from './tensor3d';\nvar fromPixels2DContext;\nvar hasToPixelsWarned = false;\n/**\r\n * Creates a `tf.Tensor` from an image.\r\n *\r\n * ```js\r\n * const image = new ImageData(1, 1);\r\n * image.data[0] = 100;\r\n * image.data[1] = 150;\r\n * image.data[2] = 200;\r\n * image.data[3] = 255;\r\n *\r\n * tf.browser.fromPixels(image).print();\r\n * ```\r\n *\r\n * @param pixels The input image to construct the tensor from. The\r\n * supported image types are all 4-channel. You can also pass in an image\r\n * object with following attributes:\r\n * `{data: Uint8Array; width: number; height: number}`\r\n * @param numChannels The number of channels of the output tensor. A\r\n * numChannels value less than 4 allows you to ignore channels. Defaults to\r\n * 3 (ignores alpha channel of input image).\r\n *\r\n * @returns A Tensor3D with the shape `[height, width, numChannels]`.\r\n *\r\n * Note: fromPixels can be lossy in some cases, same image may result in\r\n * slightly different tensor values, if rendered by different rendering\r\n * engines. This means that results from different browsers, or even same\r\n * browser with CPU and GPU rendering engines can be different. See discussion\r\n * in details:\r\n * https://github.com/tensorflow/tfjs/issues/5482\r\n *\r\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\r\n */\nfunction fromPixels_(pixels) {\n  var numChannels = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  // Sanity checks.\n  if (numChannels > 4) {\n    throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');\n  }\n  if (pixels == null) {\n    throw new Error('pixels passed to tf.browser.fromPixels() can not be null');\n  }\n  var isPixelData = false;\n  var isImageData = false;\n  var isVideo = false;\n  var isImage = false;\n  var isCanvasLike = false;\n  var isImageBitmap = false;\n  if (pixels.data instanceof Uint8Array) {\n    isPixelData = true;\n  } else if (typeof ImageData !== 'undefined' && pixels instanceof ImageData) {\n    isImageData = true;\n  } else if (typeof HTMLVideoElement !== 'undefined' && pixels instanceof HTMLVideoElement) {\n    isVideo = true;\n  } else if (typeof HTMLImageElement !== 'undefined' && pixels instanceof HTMLImageElement) {\n    isImage = true;\n    // tslint:disable-next-line: no-any\n  } else if (pixels.getContext != null) {\n    isCanvasLike = true;\n  } else if (typeof ImageBitmap !== 'undefined' && pixels instanceof ImageBitmap) {\n    isImageBitmap = true;\n  } else {\n    throw new Error('pixels passed to tf.browser.fromPixels() must be either an ' + \"HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData \" + \"in browser, or OffscreenCanvas, ImageData in webworker\" + \" or {data: Uint32Array, width: number, height: number}, \" + \"but was \".concat(pixels.constructor.name));\n  }\n  // If the current backend has 'FromPixels' registered, it has a more\n  // efficient way of handling pixel uploads, so we call that.\n  var kernel = getKernel(FromPixels, ENGINE.backendName);\n  if (kernel != null) {\n    var inputs = {\n      pixels: pixels\n    };\n    var attrs = {\n      numChannels: numChannels\n    };\n    return ENGINE.runKernel(FromPixels, inputs, attrs);\n  }\n  var _ref = isVideo ? [pixels.videoWidth, pixels.videoHeight] : [pixels.width, pixels.height],\n    _ref2 = _slicedToArray(_ref, 2),\n    width = _ref2[0],\n    height = _ref2[1];\n  var vals;\n  if (isCanvasLike) {\n    vals =\n    // tslint:disable-next-line:no-any\n    pixels.getContext('2d').getImageData(0, 0, width, height).data;\n  } else if (isImageData || isPixelData) {\n    vals = pixels.data;\n  } else if (isImage || isVideo || isImageBitmap) {\n    if (fromPixels2DContext == null) {\n      if (typeof document === 'undefined') {\n        if (typeof OffscreenCanvas !== 'undefined' && typeof OffscreenCanvasRenderingContext2D !== 'undefined') {\n          // @ts-ignore\n          fromPixels2DContext = new OffscreenCanvas(1, 1).getContext('2d');\n        } else {\n          throw new Error('Cannot parse input in current context. ' + 'Reason: OffscreenCanvas Context2D rendering is not supported.');\n        }\n      } else {\n        fromPixels2DContext = document.createElement('canvas').getContext('2d', {\n          willReadFrequently: true\n        });\n      }\n    }\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n    vals = fromPixels2DContext.getImageData(0, 0, width, height).data;\n  }\n  var values;\n  if (numChannels === 4) {\n    values = new Int32Array(vals);\n  } else {\n    var numPixels = width * height;\n    values = new Int32Array(numPixels * numChannels);\n    for (var i = 0; i < numPixels; i++) {\n      for (var channel = 0; channel < numChannels; ++channel) {\n        values[i * numChannels + channel] = vals[i * 4 + channel];\n      }\n    }\n  }\n  var outShape = [height, width, numChannels];\n  return tensor3d(values, outShape, 'int32');\n}\n// Helper functions for |fromPixelsAsync| to check whether the input can\n// be wrapped into imageBitmap.\nfunction isPixelData(pixels) {\n  return pixels != null && pixels.data instanceof Uint8Array;\n}\nfunction isImageBitmapFullySupported() {\n  return typeof window !== 'undefined' && typeof ImageBitmap !== 'undefined' && window.hasOwnProperty('createImageBitmap');\n}\nfunction isNonEmptyPixels(pixels) {\n  return pixels != null && pixels.width !== 0 && pixels.height !== 0;\n}\nfunction canWrapPixelsToImageBitmap(pixels) {\n  return isImageBitmapFullySupported() && !(pixels instanceof ImageBitmap) && isNonEmptyPixels(pixels) && !isPixelData(pixels);\n}\n/**\r\n * Creates a `tf.Tensor` from an image in async way.\r\n *\r\n * ```js\r\n * const image = new ImageData(1, 1);\r\n * image.data[0] = 100;\r\n * image.data[1] = 150;\r\n * image.data[2] = 200;\r\n * image.data[3] = 255;\r\n *\r\n * (await tf.browser.fromPixelsAsync(image)).print();\r\n * ```\r\n * This API is the async version of fromPixels. The API will first\r\n * check |WRAP_TO_IMAGEBITMAP| flag, and try to wrap the input to\r\n * imageBitmap if the flag is set to true.\r\n *\r\n * @param pixels The input image to construct the tensor from. The\r\n * supported image types are all 4-channel. You can also pass in an image\r\n * object with following attributes:\r\n * `{data: Uint8Array; width: number; height: number}`\r\n * @param numChannels The number of channels of the output tensor. A\r\n * numChannels value less than 4 allows you to ignore channels. Defaults to\r\n * 3 (ignores alpha channel of input image).\r\n *\r\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\r\n */\nexport function fromPixelsAsync(_x) {\n  return _fromPixelsAsync.apply(this, arguments);\n}\nfunction _fromPixelsAsync() {\n  _fromPixelsAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(pixels) {\n    var numChannels,\n      inputs,\n      imageBitmap,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          numChannels = _args.length > 1 && _args[1] !== undefined ? _args[1] : 3;\n          inputs = null; // Check whether the backend needs to wrap |pixels| to imageBitmap and\n          // whether |pixels| can be wrapped to imageBitmap.\n          if (!(env().getBool('WRAP_TO_IMAGEBITMAP') && canWrapPixelsToImageBitmap(pixels))) {\n            _context.next = 15;\n            break;\n          }\n          _context.prev = 3;\n          _context.next = 6;\n          return createImageBitmap(pixels, {\n            premultiplyAlpha: 'none'\n          });\n        case 6:\n          imageBitmap = _context.sent;\n          _context.next = 12;\n          break;\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](3);\n          imageBitmap = null;\n        case 12:\n          // createImageBitmap will clip the source size.\n          // In some cases, the input will have larger size than its content.\n          // E.g. new Image(10, 10) but with 1 x 1 content. Using\n          // createImageBitmap will clip the size from 10 x 10 to 1 x 1, which\n          // is not correct. We should avoid wrapping such resouce to\n          // imageBitmap.\n          if (imageBitmap != null && imageBitmap.width === pixels.width && imageBitmap.height === pixels.height) {\n            inputs = imageBitmap;\n          } else {\n            inputs = pixels;\n          }\n          _context.next = 16;\n          break;\n        case 15:\n          inputs = pixels;\n        case 16:\n          return _context.abrupt(\"return\", fromPixels_(inputs, numChannels));\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[3, 9]]);\n  }));\n  return _fromPixelsAsync.apply(this, arguments);\n}\nfunction validateImgTensor(img) {\n  if (img.rank !== 2 && img.rank !== 3) {\n    throw new Error(\"toPixels only supports rank 2 or 3 tensors, got rank \".concat(img.rank, \".\"));\n  }\n  var depth = img.rank === 2 ? 1 : img.shape[2];\n  if (depth > 4 || depth === 2) {\n    throw new Error(\"toPixels only supports depth of size \" + \"1, 3 or 4 but got \".concat(depth));\n  }\n  if (img.dtype !== 'float32' && img.dtype !== 'int32') {\n    throw new Error(\"Unsupported type for toPixels: \".concat(img.dtype, \".\") + \" Please use float32 or int32 tensors.\");\n  }\n}\nfunction validateImageOptions(imageOptions) {\n  var alpha = (imageOptions === null || imageOptions === void 0 ? void 0 : imageOptions.alpha) || 1;\n  if (alpha > 1 || alpha < 0) {\n    throw new Error(\"Alpha value \".concat(alpha, \" is suppoed to be in range [0 - 1].\"));\n  }\n}\n/**\r\n * Draws a `tf.Tensor` of pixel values to a byte array or optionally a\r\n * canvas.\r\n *\r\n * When the dtype of the input is 'float32', we assume values in the range\r\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\r\n * [0-255].\r\n *\r\n * Returns a promise that resolves when the canvas has been drawn to.\r\n *\r\n * @param img A rank-2 tensor with shape `[height, width]`, or a rank-3 tensor\r\n * of shape `[height, width, numChannels]`. If rank-2, draws grayscale. If\r\n * rank-3, must have depth of 1, 3 or 4. When depth of 1, draws\r\n * grayscale. When depth of 3, we draw with the first three components of\r\n * the depth dimension corresponding to r, g, b and alpha = 1. When depth of\r\n * 4, all four components of the depth dimension correspond to r, g, b, a.\r\n * @param canvas The canvas to draw to.\r\n *\r\n * @doc {heading: 'Browser', namespace: 'browser'}\r\n */\nexport function toPixels(_x2, _x3) {\n  return _toPixels.apply(this, arguments);\n}\n/**\r\n * Draws a `tf.Tensor` to a canvas.\r\n *\r\n * When the dtype of the input is 'float32', we assume values in the range\r\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\r\n * [0-255].\r\n *\r\n * @param image The tensor to draw on the canvas. Must match one of\r\n * these shapes:\r\n *   - Rank-2 with shape `[height, width`]: Drawn as grayscale.\r\n *   - Rank-3 with shape `[height, width, 1]`: Drawn as grayscale.\r\n *   - Rank-3 with shape `[height, width, 3]`: Drawn as RGB with alpha set in\r\n *     `imageOptions` (defaults to 1, which is opaque).\r\n *   - Rank-3 with shape `[height, width, 4]`: Drawn as RGBA.\r\n * @param canvas The canvas to draw to.\r\n * @param options The configuration arguments for image to be drawn and the\r\n *     canvas to draw to.\r\n *\r\n * @doc {heading: 'Browser', namespace: 'browser'}\r\n */\nfunction _toPixels() {\n  _toPixels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(img, canvas) {\n    var $img, originalImgTensor, _$img$shape$slice, _$img$shape$slice2, height, width, depth, data, multiplier, bytes, i, rgba, d, value, j, ctx, imageData;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          $img = convertToTensor(img, 'img', 'toPixels');\n          if (!(img instanceof Tensor)) {\n            // Assume int32 if user passed a native array.\n            originalImgTensor = $img;\n            $img = cast(originalImgTensor, 'int32');\n            originalImgTensor.dispose();\n          }\n          validateImgTensor($img);\n          _$img$shape$slice = $img.shape.slice(0, 2), _$img$shape$slice2 = _slicedToArray(_$img$shape$slice, 2), height = _$img$shape$slice2[0], width = _$img$shape$slice2[1];\n          depth = $img.rank === 2 ? 1 : $img.shape[2];\n          _context2.next = 7;\n          return $img.data();\n        case 7:\n          data = _context2.sent;\n          multiplier = $img.dtype === 'float32' ? 255 : 1;\n          bytes = new Uint8ClampedArray(width * height * 4);\n          i = 0;\n        case 11:\n          if (!(i < height * width)) {\n            _context2.next = 36;\n            break;\n          }\n          rgba = [0, 0, 0, 255];\n          d = 0;\n        case 14:\n          if (!(d < depth)) {\n            _context2.next = 28;\n            break;\n          }\n          value = data[i * depth + d];\n          if (!($img.dtype === 'float32')) {\n            _context2.next = 21;\n            break;\n          }\n          if (!(value < 0 || value > 1)) {\n            _context2.next = 19;\n            break;\n          }\n          throw new Error(\"Tensor values for a float32 Tensor must be in the \" + \"range [0 - 1] but encountered \".concat(value, \".\"));\n        case 19:\n          _context2.next = 24;\n          break;\n        case 21:\n          if (!($img.dtype === 'int32')) {\n            _context2.next = 24;\n            break;\n          }\n          if (!(value < 0 || value > 255)) {\n            _context2.next = 24;\n            break;\n          }\n          throw new Error(\"Tensor values for a int32 Tensor must be in the \" + \"range [0 - 255] but encountered \".concat(value, \".\"));\n        case 24:\n          if (depth === 1) {\n            rgba[0] = value * multiplier;\n            rgba[1] = value * multiplier;\n            rgba[2] = value * multiplier;\n          } else {\n            rgba[d] = value * multiplier;\n          }\n        case 25:\n          d++;\n          _context2.next = 14;\n          break;\n        case 28:\n          j = i * 4;\n          bytes[j + 0] = Math.round(rgba[0]);\n          bytes[j + 1] = Math.round(rgba[1]);\n          bytes[j + 2] = Math.round(rgba[2]);\n          bytes[j + 3] = Math.round(rgba[3]);\n        case 33:\n          ++i;\n          _context2.next = 11;\n          break;\n        case 36:\n          if (canvas != null) {\n            if (!hasToPixelsWarned) {\n              console.warn('tf.browser.toPixels is not efficient to draw tensor on canvas. ' + 'Please try tf.browser.draw instead.');\n              hasToPixelsWarned = true;\n            }\n            canvas.width = width;\n            canvas.height = height;\n            ctx = canvas.getContext('2d');\n            imageData = new ImageData(bytes, width, height);\n            ctx.putImageData(imageData, 0, 0);\n          }\n          if ($img !== img) {\n            $img.dispose();\n          }\n          return _context2.abrupt(\"return\", bytes);\n        case 39:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _toPixels.apply(this, arguments);\n}\nexport function draw(image, canvas, options) {\n  var $img = convertToTensor(image, 'img', 'draw');\n  if (!(image instanceof Tensor)) {\n    // Assume int32 if user passed a native array.\n    var originalImgTensor = $img;\n    $img = cast(originalImgTensor, 'int32');\n    originalImgTensor.dispose();\n  }\n  validateImgTensor($img);\n  validateImageOptions(options === null || options === void 0 ? void 0 : options.imageOptions);\n  var inputs = {\n    image: $img\n  };\n  var attrs = {\n    canvas: canvas,\n    options: options\n  };\n  ENGINE.runKernel(Draw, inputs, attrs);\n}\nexport var fromPixels = /* @__PURE__ */op({\n  fromPixels_: fromPixels_\n});","map":{"version":3,"names":["ENGINE","env","Draw","FromPixels","getKernel","Tensor","convertToTensor","cast","op","tensor3d","fromPixels2DContext","hasToPixelsWarned","fromPixels_","pixels","numChannels","arguments","length","undefined","Error","isPixelData","isImageData","isVideo","isImage","isCanvasLike","isImageBitmap","data","Uint8Array","ImageData","HTMLVideoElement","HTMLImageElement","getContext","ImageBitmap","concat","constructor","name","kernel","backendName","inputs","attrs","runKernel","_ref","videoWidth","videoHeight","width","height","_ref2","_slicedToArray","vals","getImageData","document","OffscreenCanvas","OffscreenCanvasRenderingContext2D","createElement","willReadFrequently","canvas","drawImage","values","Int32Array","numPixels","i","channel","outShape","isImageBitmapFullySupported","window","hasOwnProperty","isNonEmptyPixels","canWrapPixelsToImageBitmap","fromPixelsAsync","_x","_fromPixelsAsync","apply","_asyncToGenerator","_regeneratorRuntime","mark","_callee","imageBitmap","_args","wrap","_callee$","_context","prev","next","getBool","createImageBitmap","premultiplyAlpha","sent","t0","abrupt","stop","validateImgTensor","img","rank","depth","shape","dtype","validateImageOptions","imageOptions","alpha","toPixels","_x2","_x3","_toPixels","_callee2","$img","originalImgTensor","_$img$shape$slice","_$img$shape$slice2","multiplier","bytes","rgba","d","value","j","ctx","imageData","_callee2$","_context2","dispose","slice","Uint8ClampedArray","Math","round","console","warn","putImageData","draw","image","options","fromPixels"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\browser.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {env} from '../environment';\nimport {Draw, DrawAttrs, DrawInputs, FromPixels, FromPixelsAttrs, FromPixelsInputs} from '../kernel_names';\nimport {getKernel, NamedAttrMap} from '../kernel_registry';\nimport {Tensor, Tensor2D, Tensor3D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {DrawOptions, ImageOptions, PixelData, TensorLike} from '../types';\n\nimport {cast} from './cast';\nimport {op} from './operation';\nimport {tensor3d} from './tensor3d';\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\nlet hasToPixelsWarned = false;\n\n/**\n * Creates a `tf.Tensor` from an image.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * tf.browser.fromPixels(image).print();\n * ```\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n *\n * @returns A Tensor3D with the shape `[height, width, numChannels]`.\n *\n * Note: fromPixels can be lossy in some cases, same image may result in\n * slightly different tensor values, if rendered by different rendering\n * engines. This means that results from different browsers, or even same\n * browser with CPU and GPU rendering engines can be different. See discussion\n * in details:\n * https://github.com/tensorflow/tfjs/issues/5482\n *\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\n */\nfunction fromPixels_(\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap,\n    numChannels = 3): Tensor3D {\n  // Sanity checks.\n  if (numChannels > 4) {\n    throw new Error(\n        'Cannot construct Tensor with more than 4 channels from pixels.');\n  }\n  if (pixels == null) {\n    throw new Error('pixels passed to tf.browser.fromPixels() can not be null');\n  }\n  let isPixelData = false;\n  let isImageData = false;\n  let isVideo = false;\n  let isImage = false;\n  let isCanvasLike = false;\n  let isImageBitmap = false;\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    isPixelData = true;\n  } else if (\n      typeof (ImageData) !== 'undefined' && pixels instanceof ImageData) {\n    isImageData = true;\n  } else if (\n      typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement) {\n    isVideo = true;\n  } else if (\n      typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement) {\n    isImage = true;\n    // tslint:disable-next-line: no-any\n  } else if ((pixels as any).getContext != null) {\n    isCanvasLike = true;\n  } else if (\n      typeof (ImageBitmap) !== 'undefined' && pixels instanceof ImageBitmap) {\n    isImageBitmap = true;\n  } else {\n    throw new Error(\n        'pixels passed to tf.browser.fromPixels() must be either an ' +\n        `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` +\n        `in browser, or OffscreenCanvas, ImageData in webworker` +\n        ` or {data: Uint32Array, width: number, height: number}, ` +\n        `but was ${(pixels as {}).constructor.name}`);\n  }\n  // If the current backend has 'FromPixels' registered, it has a more\n  // efficient way of handling pixel uploads, so we call that.\n  const kernel = getKernel(FromPixels, ENGINE.backendName);\n  if (kernel != null) {\n    const inputs: FromPixelsInputs = {pixels};\n    const attrs: FromPixelsAttrs = {numChannels};\n    return ENGINE.runKernel(\n        FromPixels, inputs as unknown as NamedTensorMap,\n        attrs as unknown as NamedAttrMap);\n  }\n\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n  let vals: Uint8ClampedArray|Uint8Array;\n\n  if (isCanvasLike) {\n    vals =\n        // tslint:disable-next-line:no-any\n        (pixels as any).getContext('2d').getImageData(0, 0, width, height).data;\n  } else if (isImageData || isPixelData) {\n    vals = (pixels as PixelData | ImageData).data;\n  } else if (isImage || isVideo || isImageBitmap) {\n    if (fromPixels2DContext == null) {\n      if (typeof document === 'undefined') {\n        if (typeof OffscreenCanvas !== 'undefined' &&\n            typeof OffscreenCanvasRenderingContext2D !== 'undefined') {\n          // @ts-ignore\n          fromPixels2DContext = new OffscreenCanvas(1, 1).getContext('2d');\n        } else {\n          throw new Error(\n              'Cannot parse input in current context. ' +\n              'Reason: OffscreenCanvas Context2D rendering is not supported.');\n        }\n      } else {\n        fromPixels2DContext = document.createElement('canvas').getContext(\n            '2d', {willReadFrequently: true});\n      }\n    }\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement, 0, 0, width, height);\n    vals = fromPixels2DContext.getImageData(0, 0, width, height).data;\n  }\n  let values: Int32Array;\n  if (numChannels === 4) {\n    values = new Int32Array(vals);\n  } else {\n    const numPixels = width * height;\n    values = new Int32Array(numPixels * numChannels);\n    for (let i = 0; i < numPixels; i++) {\n      for (let channel = 0; channel < numChannels; ++channel) {\n        values[i * numChannels + channel] = vals[i * 4 + channel];\n      }\n    }\n  }\n  const outShape: [number, number, number] = [height, width, numChannels];\n  return tensor3d(values, outShape, 'int32');\n}\n\n// Helper functions for |fromPixelsAsync| to check whether the input can\n// be wrapped into imageBitmap.\nfunction isPixelData(pixels: PixelData|ImageData|HTMLImageElement|\n                     HTMLCanvasElement|HTMLVideoElement|\n                     ImageBitmap): pixels is PixelData {\n  return (pixels != null) && ((pixels as PixelData).data instanceof Uint8Array);\n}\n\nfunction isImageBitmapFullySupported() {\n  return typeof window !== 'undefined' &&\n      typeof (ImageBitmap) !== 'undefined' &&\n      window.hasOwnProperty('createImageBitmap');\n}\n\nfunction isNonEmptyPixels(pixels: PixelData|ImageData|HTMLImageElement|\n                          HTMLCanvasElement|HTMLVideoElement|ImageBitmap) {\n  return pixels != null && pixels.width !== 0 && pixels.height !== 0;\n}\n\nfunction canWrapPixelsToImageBitmap(pixels: PixelData|ImageData|\n                                    HTMLImageElement|HTMLCanvasElement|\n                                    HTMLVideoElement|ImageBitmap) {\n  return isImageBitmapFullySupported() && !(pixels instanceof ImageBitmap) &&\n      isNonEmptyPixels(pixels) && !isPixelData(pixels);\n}\n\n/**\n * Creates a `tf.Tensor` from an image in async way.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * (await tf.browser.fromPixelsAsync(image)).print();\n * ```\n * This API is the async version of fromPixels. The API will first\n * check |WRAP_TO_IMAGEBITMAP| flag, and try to wrap the input to\n * imageBitmap if the flag is set to true.\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n *\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\n */\nexport async function fromPixelsAsync(\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap,\n    numChannels = 3) {\n  let inputs: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      HTMLVideoElement|ImageBitmap = null;\n\n  // Check whether the backend needs to wrap |pixels| to imageBitmap and\n  // whether |pixels| can be wrapped to imageBitmap.\n  if (env().getBool('WRAP_TO_IMAGEBITMAP') &&\n      canWrapPixelsToImageBitmap(pixels)) {\n    // Force the imageBitmap creation to not do any premultiply alpha\n    // ops.\n    let imageBitmap;\n\n    try {\n      // wrap in try-catch block, because createImageBitmap may not work\n      // properly in some browsers, e.g.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1335594\n      // tslint:disable-next-line: no-any\n      imageBitmap = await (createImageBitmap as any)(\n          pixels as ImageBitmapSource, {premultiplyAlpha: 'none'});\n    } catch (e) {\n      imageBitmap = null;\n    }\n\n    // createImageBitmap will clip the source size.\n    // In some cases, the input will have larger size than its content.\n    // E.g. new Image(10, 10) but with 1 x 1 content. Using\n    // createImageBitmap will clip the size from 10 x 10 to 1 x 1, which\n    // is not correct. We should avoid wrapping such resouce to\n    // imageBitmap.\n    if (imageBitmap != null && imageBitmap.width === pixels.width &&\n        imageBitmap.height === pixels.height) {\n      inputs = imageBitmap;\n    } else {\n      inputs = pixels;\n    }\n  } else {\n    inputs = pixels;\n  }\n\n  return fromPixels_(inputs, numChannels);\n}\n\nfunction validateImgTensor(img: Tensor2D|Tensor3D) {\n  if (img.rank !== 2 && img.rank !== 3) {\n    throw new Error(\n        `toPixels only supports rank 2 or 3 tensors, got rank ${img.rank}.`);\n  }\n  const depth = img.rank === 2 ? 1 : img.shape[2];\n\n  if (depth > 4 || depth === 2) {\n    throw new Error(\n        `toPixels only supports depth of size ` +\n        `1, 3 or 4 but got ${depth}`);\n  }\n\n  if (img.dtype !== 'float32' && img.dtype !== 'int32') {\n    throw new Error(\n        `Unsupported type for toPixels: ${img.dtype}.` +\n        ` Please use float32 or int32 tensors.`);\n  }\n}\n\nfunction validateImageOptions(imageOptions: ImageOptions) {\n  const alpha = imageOptions ?.alpha || 1;\n  if (alpha > 1 || alpha < 0) {\n    throw new Error(`Alpha value ${alpha} is suppoed to be in range [0 - 1].`);\n  }\n}\n\n/**\n * Draws a `tf.Tensor` of pixel values to a byte array or optionally a\n * canvas.\n *\n * When the dtype of the input is 'float32', we assume values in the range\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\n * [0-255].\n *\n * Returns a promise that resolves when the canvas has been drawn to.\n *\n * @param img A rank-2 tensor with shape `[height, width]`, or a rank-3 tensor\n * of shape `[height, width, numChannels]`. If rank-2, draws grayscale. If\n * rank-3, must have depth of 1, 3 or 4. When depth of 1, draws\n * grayscale. When depth of 3, we draw with the first three components of\n * the depth dimension corresponding to r, g, b and alpha = 1. When depth of\n * 4, all four components of the depth dimension correspond to r, g, b, a.\n * @param canvas The canvas to draw to.\n *\n * @doc {heading: 'Browser', namespace: 'browser'}\n */\nexport async function toPixels(\n    img: Tensor2D|Tensor3D|TensorLike,\n    canvas?: HTMLCanvasElement): Promise<Uint8ClampedArray> {\n  let $img = convertToTensor(img, 'img', 'toPixels');\n  if (!(img instanceof Tensor)) {\n    // Assume int32 if user passed a native array.\n    const originalImgTensor = $img;\n    $img = cast(originalImgTensor, 'int32');\n    originalImgTensor.dispose();\n  }\n  validateImgTensor($img);\n\n  const [height, width] = $img.shape.slice(0, 2);\n  const depth = $img.rank === 2 ? 1 : $img.shape[2];\n  const data = await $img.data();\n  const multiplier = $img.dtype === 'float32' ? 255 : 1;\n  const bytes = new Uint8ClampedArray(width * height * 4);\n\n  for (let i = 0; i < height * width; ++i) {\n    const rgba = [0, 0, 0, 255];\n\n    for (let d = 0; d < depth; d++) {\n      const value = data[i * depth + d];\n\n      if ($img.dtype === 'float32') {\n        if (value < 0 || value > 1) {\n          throw new Error(\n              `Tensor values for a float32 Tensor must be in the ` +\n              `range [0 - 1] but encountered ${value}.`);\n        }\n      } else if ($img.dtype === 'int32') {\n        if (value < 0 || value > 255) {\n          throw new Error(\n              `Tensor values for a int32 Tensor must be in the ` +\n              `range [0 - 255] but encountered ${value}.`);\n        }\n      }\n\n      if (depth === 1) {\n        rgba[0] = value * multiplier;\n        rgba[1] = value * multiplier;\n        rgba[2] = value * multiplier;\n      } else {\n        rgba[d] = value * multiplier;\n      }\n    }\n\n    const j = i * 4;\n    bytes[j + 0] = Math.round(rgba[0]);\n    bytes[j + 1] = Math.round(rgba[1]);\n    bytes[j + 2] = Math.round(rgba[2]);\n    bytes[j + 3] = Math.round(rgba[3]);\n  }\n\n  if (canvas != null) {\n    if (!hasToPixelsWarned) {\n      console.warn(\n          'tf.browser.toPixels is not efficient to draw tensor on canvas. ' +\n          'Please try tf.browser.draw instead.');\n      hasToPixelsWarned = true;\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const imageData = new ImageData(bytes, width, height);\n    ctx.putImageData(imageData, 0, 0);\n  }\n  if ($img !== img) {\n    $img.dispose();\n  }\n  return bytes;\n}\n\n/**\n * Draws a `tf.Tensor` to a canvas.\n *\n * When the dtype of the input is 'float32', we assume values in the range\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\n * [0-255].\n *\n * @param image The tensor to draw on the canvas. Must match one of\n * these shapes:\n *   - Rank-2 with shape `[height, width`]: Drawn as grayscale.\n *   - Rank-3 with shape `[height, width, 1]`: Drawn as grayscale.\n *   - Rank-3 with shape `[height, width, 3]`: Drawn as RGB with alpha set in\n *     `imageOptions` (defaults to 1, which is opaque).\n *   - Rank-3 with shape `[height, width, 4]`: Drawn as RGBA.\n * @param canvas The canvas to draw to.\n * @param options The configuration arguments for image to be drawn and the\n *     canvas to draw to.\n *\n * @doc {heading: 'Browser', namespace: 'browser'}\n */\nexport function draw(\n    image: Tensor2D|Tensor3D|TensorLike, canvas: HTMLCanvasElement,\n    options?: DrawOptions): void {\n  let $img = convertToTensor(image, 'img', 'draw');\n  if (!(image instanceof Tensor)) {\n    // Assume int32 if user passed a native array.\n    const originalImgTensor = $img;\n    $img = cast(originalImgTensor, 'int32');\n    originalImgTensor.dispose();\n  }\n  validateImgTensor($img);\n  validateImageOptions(options?.imageOptions);\n\n  const inputs: DrawInputs = {image: $img};\n  const attrs: DrawAttrs = {canvas, options};\n  ENGINE.runKernel(\n      Draw, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const fromPixels = /* @__PURE__ */ op({fromPixels_});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}