{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2022 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { backend_util, TensorScatterUpdate } from '@tensorflow/tfjs-core';\nimport { scatterImpl } from './Scatter_impl';\nexport function tensorScatterUpdate(args) {\n  var inputs = args.inputs,\n    backend = args.backend;\n  var tensor = inputs.tensor,\n    indices = inputs.indices,\n    updates = inputs.updates;\n  var _backend_util$calcula = backend_util.calculateShapes(updates, indices, tensor.shape),\n    sliceRank = _backend_util$calcula.sliceRank,\n    numUpdates = _backend_util$calcula.numUpdates,\n    sliceSize = _backend_util$calcula.sliceSize,\n    strides = _backend_util$calcula.strides,\n    outputSize = _backend_util$calcula.outputSize;\n  var sumDupeIndices = false;\n  var indicesBuf = backend.bufferSync(indices);\n  var updatesBuf = backend.bufferSync(updates);\n  var tensorBuf = backend.bufferSync(tensor);\n  var outBuf = scatterImpl(indicesBuf, updatesBuf, tensor.shape, outputSize, sliceSize, numUpdates, sliceRank, strides, tensorBuf, sumDupeIndices);\n  return backend.makeTensorInfo(tensor.shape, outBuf.dtype, outBuf.values);\n}\nexport var tensorScatterUpdateConfig = {\n  kernelName: TensorScatterUpdate,\n  backendName: 'cpu',\n  kernelFunc: tensorScatterUpdate\n};","map":{"version":3,"names":["backend_util","TensorScatterUpdate","scatterImpl","tensorScatterUpdate","args","inputs","backend","tensor","indices","updates","_backend_util$calcula","calculateShapes","shape","sliceRank","numUpdates","sliceSize","strides","outputSize","sumDupeIndices","indicesBuf","bufferSync","updatesBuf","tensorBuf","outBuf","makeTensorInfo","dtype","values","tensorScatterUpdateConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-cpu\\src\\kernels\\TensorScatterUpdate.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, TensorInfo, TensorScatterUpdate, TensorScatterUpdateAttrs, TensorScatterUpdateInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {scatterImpl} from './Scatter_impl';\n\nexport function tensorScatterUpdate(args: {\n  inputs: TensorScatterUpdateInputs,\n  backend: MathBackendCPU,\n  attrs: TensorScatterUpdateAttrs\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {tensor, indices, updates} = inputs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, tensor.shape);\n  const sumDupeIndices = false;\n\n  const indicesBuf = backend.bufferSync<Rank, 'int32'>(indices);\n  const updatesBuf = backend.bufferSync<Rank, 'int32'|'float32'>(updates);\n  const tensorBuf = backend.bufferSync<Rank, 'int32'|'float32'>(tensor);\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, tensor.shape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, tensorBuf, sumDupeIndices);\n  return backend.makeTensorInfo(tensor.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const tensorScatterUpdateConfig: KernelConfig = {\n  kernelName: TensorScatterUpdate,\n  backendName: 'cpu',\n  kernelFunc: tensorScatterUpdate as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAA8CC,mBAAmB,QAA4D,uBAAuB;AAIxK,SAAQC,WAAW,QAAO,gBAAgB;AAE1C,OAAM,SAAUC,mBAAmBA,CAACC,IAInC;EACC,IAAOC,MAAM,GAAaD,IAAI,CAAvBC,MAAM;IAAEC,OAAO,GAAIF,IAAI,CAAfE,OAAO;EACtB,IAAOC,MAAM,GAAsBF,MAAM,CAAlCE,MAAM;IAAEC,OAAO,GAAaH,MAAM,CAA1BG,OAAO;IAAEC,OAAO,GAAIJ,MAAM,CAAjBI,OAAO;EAE/B,IAAAC,qBAAA,GACIV,YAAY,CAACW,eAAe,CAACF,OAAO,EAAED,OAAO,EAAED,MAAM,CAACK,KAAK,CAAC;IADzDC,SAAS,GAAAH,qBAAA,CAATG,SAAS;IAAEC,UAAU,GAAAJ,qBAAA,CAAVI,UAAU;IAAEC,SAAS,GAAAL,qBAAA,CAATK,SAAS;IAAEC,OAAO,GAAAN,qBAAA,CAAPM,OAAO;IAAEC,UAAU,GAAAP,qBAAA,CAAVO,UAAU;EAE5D,IAAMC,cAAc,GAAG,KAAK;EAE5B,IAAMC,UAAU,GAAGb,OAAO,CAACc,UAAU,CAAgBZ,OAAO,CAAC;EAC7D,IAAMa,UAAU,GAAGf,OAAO,CAACc,UAAU,CAA0BX,OAAO,CAAC;EACvE,IAAMa,SAAS,GAAGhB,OAAO,CAACc,UAAU,CAA0Bb,MAAM,CAAC;EACrE,IAAMgB,MAAM,GAAGrB,WAAW,CACtBiB,UAAU,EAAEE,UAAU,EAAEd,MAAM,CAACK,KAAK,EAAEK,UAAU,EAAEF,SAAS,EAAED,UAAU,EACvED,SAAS,EAAEG,OAAO,EAAEM,SAAS,EAAEJ,cAAc,CAAC;EAClD,OAAOZ,OAAO,CAACkB,cAAc,CAACjB,MAAM,CAACK,KAAK,EAAEW,MAAM,CAACE,KAAK,EAAEF,MAAM,CAACG,MAAM,CAAC;AAC1E;AAEA,OAAO,IAAMC,yBAAyB,GAAiB;EACrDC,UAAU,EAAE3B,mBAAmB;EAC/B4B,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAE3B;CACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}