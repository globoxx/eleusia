{"ast":null,"code":"import _toConsumableArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: utils/generic_utils.py */\nimport { util } from '@tensorflow/tfjs-core';\nimport { AssertionError, ValueError } from '../errors';\n// tslint:enable\n/**\n * If `value` is an Array, equivalent to Python's `value * numValues`.\n * If `value` is not an Array, equivalent to Python's `[value] * numValues`\n */\n// tslint:disable-next-line:no-any\nexport function pyListRepeat(value, numValues) {\n  if (Array.isArray(value)) {\n    // tslint:disable-next-line:no-any\n    var newArray = [];\n    for (var i = 0; i < numValues; i++) {\n      newArray = newArray.concat(value);\n    }\n    return newArray;\n  } else {\n    var _newArray = new Array(numValues);\n    _newArray.fill(value);\n    return _newArray;\n  }\n}\nexport function assert(val, message) {\n  if (!val) {\n    throw new AssertionError(message);\n  }\n}\n/**\n * Count the number of elements of the `array` that are equal to `reference`.\n */\nexport function count(array, refernce) {\n  var counter = 0;\n  var _iterator = _createForOfIteratorHelper(array),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n      if (item === refernce) {\n        counter++;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return counter;\n}\n/**\n * If an array is of length 1, just return the first element. Otherwise, return\n * the full array.\n * @param tensors\n */\nexport function singletonOrArray(xs) {\n  if (xs.length === 1) {\n    return xs[0];\n  }\n  return xs;\n}\n/**\n * Normalizes a list/tensor into a list.\n *\n * If a tensor is passed, we return\n * a list of size 1 containing the tensor.\n *\n * @param x target object to be normalized.\n */\n// tslint:disable-next-line:no-any\nexport function toList(x) {\n  if (Array.isArray(x)) {\n    return x;\n  }\n  return [x];\n}\n/**\n * Generate a UID for a list\n */\n// tslint:disable-next-line:no-any\nexport function objectListUid(objs) {\n  var objectList = toList(objs);\n  var retVal = '';\n  var _iterator2 = _createForOfIteratorHelper(objectList),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var obj = _step2.value;\n      if (obj.id == null) {\n        throw new ValueError(\"Object \".concat(obj, \" passed to objectListUid without an id\"));\n      }\n      if (retVal !== '') {\n        retVal = retVal + ', ';\n      }\n      retVal = \"\".concat(retVal).concat(Math.abs(obj.id));\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return retVal;\n}\n/**\n * Converts string to snake-case.\n * @param name\n */\nexport function toSnakeCase(name) {\n  var intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2');\n  var insecure = intermediate.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n  /*\n   If the class is private the name starts with \"_\" which is not secure\n   for creating scopes. We prefix the name with \"private\" in this case.\n   */\n  if (insecure[0] !== '_') {\n    return insecure;\n  }\n  return 'private' + insecure;\n}\nexport function toCamelCase(identifier) {\n  // quick return for empty string or single character strings\n  if (identifier.length <= 1) {\n    return identifier;\n  }\n  // Check for the underscore indicating snake_case\n  if (identifier.indexOf('_') === -1) {\n    return identifier;\n  }\n  return identifier.replace(/[_]+(\\w|$)/g, function (m, p1) {\n    return p1.toUpperCase();\n  });\n}\n// tslint:disable-next-line:no-any\nvar _GLOBAL_CUSTOM_OBJECTS = {};\nexport function serializeKerasObject(instance) {\n  if (instance === null || instance === undefined) {\n    return null;\n  }\n  var dict = {};\n  dict['className'] = instance.getClassName();\n  dict['config'] = instance.getConfig();\n  return dict;\n}\n/**\n * Replace ndarray-style scalar objects in serialization objects with numbers.\n *\n * Background: In some versions of tf.keras, certain scalar values in the HDF5\n * model save file can be serialized as: `{'type': 'ndarray', 'value': num}`,\n * where in `num` is a plain number. This method converts such serialization\n * to a `number`.\n *\n * @param config The keras-format serialization object to be processed\n *   (in place).\n */\nfunction convertNDArrayScalarsInConfig(config) {\n  if (config == null || typeof config !== 'object') {\n    return;\n  } else if (Array.isArray(config)) {\n    config.forEach(function (configItem) {\n      return convertNDArrayScalarsInConfig(configItem);\n    });\n  } else {\n    var fields = Object.keys(config);\n    for (var _i = 0, _fields = fields; _i < _fields.length; _i++) {\n      var field = _fields[_i];\n      var value = config[field];\n      if (value != null && typeof value === 'object') {\n        if (!Array.isArray(value) && value['type'] === 'ndarray' && typeof value['value'] === 'number') {\n          config[field] = value['value'];\n        } else {\n          convertNDArrayScalarsInConfig(value);\n        }\n      }\n    }\n  }\n}\n/**\n * Deserialize a saved Keras Object\n * @param identifier either a string ID or a saved Keras dictionary\n * @param moduleObjects a list of Python class names to object constructors\n * @param customObjects a list of Python class names to object constructors\n * @param printableModuleName debug text for the object being reconstituted\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns a TensorFlow.js Layers object\n */\n// tslint:disable:no-any\nexport function deserializeKerasObject(identifier) {\n  var moduleObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var customObjects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var printableModuleName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'object';\n  var fastWeightInit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  // tslint:enable\n  if (typeof identifier === 'string') {\n    var functionName = identifier;\n    var fn;\n    if (functionName in customObjects) {\n      fn = customObjects[functionName];\n    } else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {\n      fn = _GLOBAL_CUSTOM_OBJECTS[functionName];\n    } else {\n      fn = moduleObjects[functionName];\n      if (fn == null) {\n        throw new ValueError(\"Unknown \".concat(printableModuleName, \": \").concat(identifier, \". \") + \"This may be due to one of the following reasons:\\n\" + \"1. The \".concat(printableModuleName, \" is defined in Python, in which \") + \"case it needs to be ported to TensorFlow.js or your JavaScript \" + \"code.\\n\" + \"2. The custom \".concat(printableModuleName, \" is defined in JavaScript, \") + \"but is not registered properly with \" + \"tf.serialization.registerClass().\");\n        // TODO(cais): Add link to tutorial page on custom layers.\n      }\n    }\n\n    return fn;\n  } else {\n    // In this case we are dealing with a Keras config dictionary.\n    var config = identifier;\n    if (config['className'] == null || config['config'] == null) {\n      throw new ValueError(\"\".concat(printableModuleName, \": Improper config format: \") + \"\".concat(JSON.stringify(config), \".\\n\") + \"'className' and 'config' must set.\");\n    }\n    var className = config['className'];\n    var cls, fromConfig;\n    if (className in customObjects) {\n      var _customObjects$classN = _slicedToArray(customObjects[className], 2);\n      cls = _customObjects$classN[0];\n      fromConfig = _customObjects$classN[1];\n    } else if (className in _GLOBAL_CUSTOM_OBJECTS) {\n      var _GLOBAL_CUSTOM_OBJECT = _slicedToArray(_GLOBAL_CUSTOM_OBJECTS['className'], 2);\n      cls = _GLOBAL_CUSTOM_OBJECT[0];\n      fromConfig = _GLOBAL_CUSTOM_OBJECT[1];\n    } else if (className in moduleObjects) {\n      var _moduleObjects$classN = _slicedToArray(moduleObjects[className], 2);\n      cls = _moduleObjects$classN[0];\n      fromConfig = _moduleObjects$classN[1];\n    }\n    if (cls == null) {\n      throw new ValueError(\"Unknown \".concat(printableModuleName, \": \").concat(className, \". \") + \"This may be due to one of the following reasons:\\n\" + \"1. The \".concat(printableModuleName, \" is defined in Python, in which \") + \"case it needs to be ported to TensorFlow.js or your JavaScript \" + \"code.\\n\" + \"2. The custom \".concat(printableModuleName, \" is defined in JavaScript, \") + \"but is not registered properly with \" + \"tf.serialization.registerClass().\");\n      // TODO(cais): Add link to tutorial page on custom layers.\n    }\n\n    if (fromConfig != null) {\n      // Porting notes: Instead of checking to see whether fromConfig accepts\n      // customObjects, we create a customObjects dictionary and tack it on to\n      // config['config'] as config['config'].customObjects. Objects can use it,\n      // if they want.\n      // tslint:disable-next-line:no-any\n      var customObjectsCombined = {};\n      for (var _i2 = 0, _Object$keys = Object.keys(_GLOBAL_CUSTOM_OBJECTS); _i2 < _Object$keys.length; _i2++) {\n        var key = _Object$keys[_i2];\n        customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];\n      }\n      for (var _i3 = 0, _Object$keys2 = Object.keys(customObjects); _i3 < _Object$keys2.length; _i3++) {\n        var _key = _Object$keys2[_i3];\n        customObjectsCombined[_key] = customObjects[_key];\n      }\n      // Add the customObjects to config\n      var nestedConfig = config['config'];\n      nestedConfig['customObjects'] = customObjectsCombined;\n      var backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);\n      for (var _i4 = 0, _Object$keys3 = Object.keys(customObjects); _i4 < _Object$keys3.length; _i4++) {\n        var _key2 = _Object$keys3[_i4];\n        _GLOBAL_CUSTOM_OBJECTS[_key2] = customObjects[_key2];\n      }\n      convertNDArrayScalarsInConfig(config['config']);\n      var returnObj = fromConfig(cls, config['config'], customObjects, fastWeightInit);\n      _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);\n      return returnObj;\n    } else {\n      // Then `cls` may be a function returning a class.\n      // In this case by convention `config` holds\n      // the kwargs of the function.\n      var _backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);\n      for (var _i5 = 0, _Object$keys4 = Object.keys(customObjects); _i5 < _Object$keys4.length; _i5++) {\n        var _key3 = _Object$keys4[_i5];\n        _GLOBAL_CUSTOM_OBJECTS[_key3] = customObjects[_key3];\n      }\n      // In python this is **config['config'], for tfjs-layers we require\n      // classes that use this fall-through construction method to take\n      // a config interface that mimics the expansion of named parameters.\n      var _returnObj = new cls(config['config']);\n      _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, _backupCustomObjects);\n      return _returnObj;\n    }\n  }\n}\n/**\n * Compares two numbers for sorting.\n * @param a\n * @param b\n */\nexport function numberCompare(a, b) {\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n/**\n * Comparison of two numbers for reverse sorting.\n * @param a\n * @param b\n */\nexport function reverseNumberCompare(a, b) {\n  return -1 * numberCompare(a, b);\n}\n/**\n * Convert a string into the corresponding DType.\n * @param dtype\n * @returns An instance of DType.\n */\nexport function stringToDType(dtype) {\n  switch (dtype) {\n    case 'float32':\n      return 'float32';\n    default:\n      throw new ValueError(\"Invalid dtype: \".concat(dtype));\n  }\n}\n/**\n * Test the element-by-element equality of two Arrays of strings.\n * @param xs First array of strings.\n * @param ys Second array of strings.\n * @returns Wether the two arrays are all equal, element by element.\n */\nexport function stringsEqual(xs, ys) {\n  if (xs == null || ys == null) {\n    return xs === ys;\n  }\n  if (xs.length !== ys.length) {\n    return false;\n  }\n  for (var i = 0; i < xs.length; ++i) {\n    if (xs[i] !== ys[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Get the unique elements of an array.\n * @param xs Array.\n * @returns An Array consisting of the unique elements in `xs`.\n */\nexport function unique(xs) {\n  if (xs == null) {\n    return xs;\n  }\n  var out = [];\n  // TODO(cais): Maybe improve performance by sorting.\n  var _iterator3 = _createForOfIteratorHelper(xs),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var x = _step3.value;\n      if (out.indexOf(x) === -1) {\n        out.push(x);\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return out;\n}\n/**\n * Determine if an Object is empty (i.e., does not have own properties).\n * @param obj Object\n * @returns Whether the Object is empty.\n * @throws ValueError: If object is `null` or `undefined`.\n */\nexport function isObjectEmpty(obj) {\n  if (obj == null) {\n    throw new ValueError(\"Invalid value in obj: \".concat(JSON.stringify(obj)));\n  }\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Helper function used to build type union/enum run-time checkers.\n * @param values The list of allowed values.\n * @param label A string name for the type\n * @param value The value to test.\n * @throws ValueError: If the value is not in values nor `undefined`/`null`.\n */\nexport function checkStringTypeUnionValue(values, label, value) {\n  if (value == null) {\n    return;\n  }\n  if (values.indexOf(value) < 0) {\n    throw new ValueError(\"\".concat(value, \" is not a valid \").concat(label, \".  Valid values are \").concat(values, \" or null/undefined.\"));\n  }\n}\n/**\n * Helper function for verifying the types of inputs.\n *\n * Ensures that the elements of `x` are all of type `expectedType`.\n * Also verifies that the length of `x` is within bounds.\n *\n * @param x Object to test.\n * @param expectedType The string expected type of all of the elements in the\n * Array.\n * @param minLength Return false if x.length is less than this.\n * @param maxLength Return false if x.length is greater than this.\n * @returns true if and only if `x` is an `Array<expectedType>` with\n * length >= `minLength` and <= `maxLength`.\n */\n// tslint:disable:no-any\nexport function checkArrayTypeAndLength(x, expectedType) {\n  var minLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var maxLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Infinity;\n  assert(minLength >= 0);\n  assert(maxLength >= minLength);\n  return Array.isArray(x) && x.length >= minLength && x.length <= maxLength && x.every(function (e) {\n    return typeof e === expectedType;\n  });\n}\n// tslint:enable:no-any\n/**\n * Assert that a value or an array of value are positive integer.\n *\n * @param value The value being asserted on. May be a single number or an array\n *   of numbers.\n * @param name Name of the value, used to make the error message.\n */\nexport function assertPositiveInteger(value, name) {\n  if (Array.isArray(value)) {\n    util.assert(value.length > 0, function () {\n      return \"\".concat(name, \" is unexpectedly an empty array.\");\n    });\n    value.forEach(function (v, i) {\n      return assertPositiveInteger(v, \"element \".concat(i + 1, \" of \").concat(name));\n    });\n  } else {\n    util.assert(Number.isInteger(value) && value > 0, function () {\n      return \"Expected \".concat(name, \" to be a positive integer, but got \") + \"\".concat(formatAsFriendlyString(value), \".\");\n    });\n  }\n}\n/**\n * Format a value into a display-friendly, human-readable fashion.\n *\n * - `null` is formatted as `'null'`\n * - Strings are formated with flanking pair of quotes.\n * - Arrays are formatted with flanking pair of square brackets.\n *\n * @param value The value to display.\n * @return Formatted string.\n */\n// tslint:disable-next-line:no-any\nexport function formatAsFriendlyString(value) {\n  if (value === null) {\n    return 'null';\n  } else if (Array.isArray(value)) {\n    return '[' + value.map(function (v) {\n      return formatAsFriendlyString(v);\n    }).join(',') + ']';\n  } else if (typeof value === 'string') {\n    return \"\\\"\".concat(value, \"\\\"\");\n  } else {\n    return \"\".concat(value);\n  }\n}\n/**\n * Returns a function `f2` (decorator) which wraps the original function\n * `f`. `f2` guarantees that `f` can be called at most once\n * every `waitMs` ms. If `f2` is called more often, it will return\n * the last returned result of `f`.\n *\n * @param f The original function `f` to wrap.\n * @param waitMs The time between two consecutive calls to `f` in ms.\n */\nexport function debounce(f, waitMs, nowFunc) {\n  var lastTime = nowFunc != null ? nowFunc() : util.now();\n  var lastResult;\n  var f2 = function f2() {\n    var now = nowFunc != null ? nowFunc() : util.now();\n    if (now - lastTime < waitMs) {\n      return lastResult;\n    }\n    lastTime = now;\n    lastResult = f.apply(void 0, arguments);\n    return lastResult;\n  };\n  return f2;\n}\n/**\n * Returns the fusable activation given a layers identifier.\n *\n * @param activationName The layers identifier string.\n * @return The name of the fusable activation.\n */\nexport function mapActivationToFusedKernel(activationName) {\n  if (activationName === 'relu') {\n    return 'relu';\n  }\n  if (activationName === 'linear') {\n    return 'linear';\n  }\n  if (activationName === 'elu') {\n    return 'elu';\n  }\n  return null;\n}\n/**\n * Returns the cartesian product of sets of values.\n * This works the same as itertools.product in Python.\n *\n * Example:\n *\n * filters = [128, 256, 512]\n * paddings = ['same', 'valid']\n *\n * product = [ [128, 'same'], [128, 'valid'], [256, 'same'], [256, 'valid'],\n * [512, 'same'], [512, 'valid']]\n *\n * @param arrayOfValues List/array of values.\n * @return The cartesian product.\n */\nexport function getCartesianProductOfValues() {\n  for (var _len = arguments.length, arrayOfValues = new Array(_len), _key4 = 0; _key4 < _len; _key4++) {\n    arrayOfValues[_key4] = arguments[_key4];\n  }\n  assert(arrayOfValues.length > 0, 'arrayOfValues is empty');\n  for (var _i6 = 0, _arrayOfValues = arrayOfValues; _i6 < _arrayOfValues.length; _i6++) {\n    var values = _arrayOfValues[_i6];\n    assert(Array.isArray(values), 'one of the values is not an array');\n    assert(values.length > 0, 'one of the values is empty');\n  }\n  return arrayOfValues.reduce(function (products, values) {\n    if (products.length === 0) {\n      return values.map(function (value) {\n        return [value];\n      });\n    }\n    return values.map(function (value) {\n      return products.map(function (prevValue) {\n        return [].concat(_toConsumableArray(prevValue), [value]);\n      });\n    }).reduce(function (flattenedProduct, unflattenedProduct) {\n      return flattenedProduct.concat(unflattenedProduct);\n    }, []);\n  }, []);\n}","map":{"version":3,"names":["util","AssertionError","ValueError","pyListRepeat","value","numValues","Array","isArray","newArray","i","concat","fill","assert","val","message","count","array","refernce","counter","_iterator","_createForOfIteratorHelper","_step","s","n","done","item","err","e","f","singletonOrArray","xs","length","toList","x","objectListUid","objs","objectList","retVal","_iterator2","_step2","obj","id","Math","abs","toSnakeCase","name","intermediate","replace","insecure","toLowerCase","toCamelCase","identifier","indexOf","m","p1","toUpperCase","_GLOBAL_CUSTOM_OBJECTS","serializeKerasObject","instance","undefined","dict","getClassName","getConfig","convertNDArrayScalarsInConfig","config","forEach","configItem","fields","Object","keys","_i","_fields","field","deserializeKerasObject","moduleObjects","arguments","customObjects","printableModuleName","fastWeightInit","functionName","fn","JSON","stringify","className","cls","fromConfig","_customObjects$classN","_slicedToArray","_GLOBAL_CUSTOM_OBJECT","_moduleObjects$classN","customObjectsCombined","_i2","_Object$keys","key","_i3","_Object$keys2","nestedConfig","backupCustomObjects","assign","_i4","_Object$keys3","returnObj","_i5","_Object$keys4","numberCompare","a","b","reverseNumberCompare","stringToDType","dtype","stringsEqual","ys","unique","out","_iterator3","_step3","push","isObjectEmpty","hasOwnProperty","checkStringTypeUnionValue","values","label","checkArrayTypeAndLength","expectedType","minLength","maxLength","Infinity","every","assertPositiveInteger","v","Number","isInteger","formatAsFriendlyString","map","join","debounce","waitMs","nowFunc","lastTime","now","lastResult","f2","apply","mapActivationToFusedKernel","activationName","getCartesianProductOfValues","_len","arrayOfValues","_key4","_i6","_arrayOfValues","reduce","products","prevValue","_toConsumableArray","flattenedProduct","unflattenedProduct"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-layers\\src\\utils\\generic_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: utils/generic_utils.py */\n\nimport {DataType, fused, serialization, util} from '@tensorflow/tfjs-core';\n\nimport {AssertionError, ValueError} from '../errors';\n\n// tslint:enable\n\n/**\n * If `value` is an Array, equivalent to Python's `value * numValues`.\n * If `value` is not an Array, equivalent to Python's `[value] * numValues`\n */\n// tslint:disable-next-line:no-any\nexport function pyListRepeat(value: any, numValues: number): any[] {\n  if (Array.isArray(value)) {\n    // tslint:disable-next-line:no-any\n    let newArray: any[] = [];\n    for (let i = 0; i < numValues; i++) {\n      newArray = newArray.concat(value);\n    }\n    return newArray;\n  } else {\n    const newArray = new Array(numValues);\n    newArray.fill(value);\n    return newArray;\n  }\n}\n\nexport function assert(val: boolean, message?: string): void {\n  if (!val) {\n    throw new AssertionError(message);\n  }\n}\n\n/**\n * Count the number of elements of the `array` that are equal to `reference`.\n */\nexport function count<T>(array: T[], refernce: T) {\n  let counter = 0;\n  for (const item of array) {\n    if (item === refernce) {\n      counter++;\n    }\n  }\n  return counter;\n}\n\n/**\n * If an array is of length 1, just return the first element. Otherwise, return\n * the full array.\n * @param tensors\n */\nexport function singletonOrArray<T>(xs: T[]): T|T[] {\n  if (xs.length === 1) {\n    return xs[0];\n  }\n  return xs;\n}\n\n/**\n * Normalizes a list/tensor into a list.\n *\n * If a tensor is passed, we return\n * a list of size 1 containing the tensor.\n *\n * @param x target object to be normalized.\n */\n// tslint:disable-next-line:no-any\nexport function toList(x: any): any[] {\n  if (Array.isArray(x)) {\n    return x;\n  }\n  return [x];\n}\n\n/**\n * Generate a UID for a list\n */\n// tslint:disable-next-line:no-any\nexport function objectListUid(objs: any|any[]): string {\n  const objectList = toList(objs);\n  let retVal = '';\n  for (const obj of objectList) {\n    if (obj.id == null) {\n      throw new ValueError(\n          `Object ${obj} passed to objectListUid without an id`);\n    }\n    if (retVal !== '') {\n      retVal = retVal + ', ';\n    }\n    retVal = `${retVal}${Math.abs(obj.id)}`;\n  }\n  return retVal;\n}\n/**\n * Converts string to snake-case.\n * @param name\n */\nexport function toSnakeCase(name: string): string {\n  const intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2');\n  const insecure =\n      intermediate.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n  /*\n   If the class is private the name starts with \"_\" which is not secure\n   for creating scopes. We prefix the name with \"private\" in this case.\n   */\n  if (insecure[0] !== '_') {\n    return insecure;\n  }\n  return 'private' + insecure;\n}\n\nexport function toCamelCase(identifier: string): string {\n  // quick return for empty string or single character strings\n  if (identifier.length <= 1) {\n    return identifier;\n  }\n  // Check for the underscore indicating snake_case\n  if (identifier.indexOf('_') === -1) {\n    return identifier;\n  }\n  return identifier.replace(/[_]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n}\n\n// tslint:disable-next-line:no-any\nlet _GLOBAL_CUSTOM_OBJECTS = {} as {[objName: string]: any};\n\nexport function serializeKerasObject(instance: serialization.Serializable):\n    serialization.ConfigDictValue {\n  if (instance === null || instance === undefined) {\n    return null;\n  }\n  const dict: serialization.ConfigDictValue = {};\n  dict['className'] = instance.getClassName();\n  dict['config'] = instance.getConfig();\n  return dict;\n}\n\n/**\n * Replace ndarray-style scalar objects in serialization objects with numbers.\n *\n * Background: In some versions of tf.keras, certain scalar values in the HDF5\n * model save file can be serialized as: `{'type': 'ndarray', 'value': num}`,\n * where in `num` is a plain number. This method converts such serialization\n * to a `number`.\n *\n * @param config The keras-format serialization object to be processed\n *   (in place).\n */\nfunction convertNDArrayScalarsInConfig(config: serialization.ConfigDictValue):\n    void {\n  if (config == null || typeof config !== 'object') {\n    return;\n  } else if (Array.isArray(config)) {\n    config.forEach(configItem => convertNDArrayScalarsInConfig(configItem));\n  } else {\n    const fields = Object.keys(config);\n    for (const field of fields) {\n      const value = config[field];\n      if (value != null && typeof value === 'object') {\n        if (!Array.isArray(value) && value['type'] === 'ndarray' &&\n            typeof value['value'] === 'number') {\n          config[field] = value['value'];\n        } else {\n          convertNDArrayScalarsInConfig(value as serialization.ConfigDict);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Deserialize a saved Keras Object\n * @param identifier either a string ID or a saved Keras dictionary\n * @param moduleObjects a list of Python class names to object constructors\n * @param customObjects a list of Python class names to object constructors\n * @param printableModuleName debug text for the object being reconstituted\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns a TensorFlow.js Layers object\n */\n// tslint:disable:no-any\nexport function deserializeKerasObject(\n    identifier: string|serialization.ConfigDict,\n    moduleObjects = {} as {[objName: string]: any},\n    customObjects = {} as {[objName: string]: any},\n    printableModuleName = 'object', fastWeightInit = false): any {\n  // tslint:enable\n  if (typeof identifier === 'string') {\n    const functionName = identifier;\n    let fn;\n    if (functionName in customObjects) {\n      fn = customObjects[functionName];\n    } else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {\n      fn = _GLOBAL_CUSTOM_OBJECTS[functionName];\n    } else {\n      fn = moduleObjects[functionName];\n      if (fn == null) {\n        throw new ValueError(\n            `Unknown ${printableModuleName}: ${identifier}. ` +\n            `This may be due to one of the following reasons:\\n` +\n            `1. The ${printableModuleName} is defined in Python, in which ` +\n            `case it needs to be ported to TensorFlow.js or your JavaScript ` +\n            `code.\\n` +\n            `2. The custom ${printableModuleName} is defined in JavaScript, ` +\n            `but is not registered properly with ` +\n            `tf.serialization.registerClass().`);\n        // TODO(cais): Add link to tutorial page on custom layers.\n      }\n    }\n    return fn;\n  } else {\n    // In this case we are dealing with a Keras config dictionary.\n    const config = identifier;\n    if (config['className'] == null || config['config'] == null) {\n      throw new ValueError(\n          `${printableModuleName}: Improper config format: ` +\n          `${JSON.stringify(config)}.\\n` +\n          `'className' and 'config' must set.`);\n    }\n    const className = config['className'] as string;\n    let cls, fromConfig;\n    if (className in customObjects) {\n      [cls, fromConfig] = customObjects[className];\n    } else if (className in _GLOBAL_CUSTOM_OBJECTS) {\n      [cls, fromConfig] = _GLOBAL_CUSTOM_OBJECTS['className'];\n    } else if (className in moduleObjects) {\n      [cls, fromConfig] = moduleObjects[className];\n    }\n    if (cls == null) {\n      throw new ValueError(\n          `Unknown ${printableModuleName}: ${className}. ` +\n          `This may be due to one of the following reasons:\\n` +\n          `1. The ${printableModuleName} is defined in Python, in which ` +\n          `case it needs to be ported to TensorFlow.js or your JavaScript ` +\n          `code.\\n` +\n          `2. The custom ${printableModuleName} is defined in JavaScript, ` +\n          `but is not registered properly with ` +\n          `tf.serialization.registerClass().`);\n      // TODO(cais): Add link to tutorial page on custom layers.\n    }\n    if (fromConfig != null) {\n      // Porting notes: Instead of checking to see whether fromConfig accepts\n      // customObjects, we create a customObjects dictionary and tack it on to\n      // config['config'] as config['config'].customObjects. Objects can use it,\n      // if they want.\n\n      // tslint:disable-next-line:no-any\n      const customObjectsCombined = {} as {[objName: string]: any};\n      for (const key of Object.keys(_GLOBAL_CUSTOM_OBJECTS)) {\n        customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];\n      }\n      for (const key of Object.keys(customObjects)) {\n        customObjectsCombined[key] = customObjects[key];\n      }\n      // Add the customObjects to config\n      const nestedConfig = config['config'] as serialization.ConfigDict;\n      nestedConfig['customObjects'] = customObjectsCombined;\n\n      const backupCustomObjects = {..._GLOBAL_CUSTOM_OBJECTS};\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n      convertNDArrayScalarsInConfig(config['config']);\n      const returnObj =\n          fromConfig(cls, config['config'], customObjects, fastWeightInit);\n      _GLOBAL_CUSTOM_OBJECTS = {...backupCustomObjects};\n\n      return returnObj;\n    } else {\n      // Then `cls` may be a function returning a class.\n      // In this case by convention `config` holds\n      // the kwargs of the function.\n      const backupCustomObjects = {..._GLOBAL_CUSTOM_OBJECTS};\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n      // In python this is **config['config'], for tfjs-layers we require\n      // classes that use this fall-through construction method to take\n      // a config interface that mimics the expansion of named parameters.\n      const returnObj = new cls(config['config']);\n      _GLOBAL_CUSTOM_OBJECTS = {...backupCustomObjects};\n      return returnObj;\n    }\n  }\n}\n\n/**\n * Compares two numbers for sorting.\n * @param a\n * @param b\n */\nexport function numberCompare(a: number, b: number) {\n  return (a < b) ? -1 : ((a > b) ? 1 : 0);\n}\n\n/**\n * Comparison of two numbers for reverse sorting.\n * @param a\n * @param b\n */\nexport function reverseNumberCompare(a: number, b: number) {\n  return -1 * numberCompare(a, b);\n}\n\n/**\n * Convert a string into the corresponding DType.\n * @param dtype\n * @returns An instance of DType.\n */\nexport function stringToDType(dtype: string): DataType {\n  switch (dtype) {\n    case 'float32':\n      return 'float32';\n    default:\n      throw new ValueError(`Invalid dtype: ${dtype}`);\n  }\n}\n\n/**\n * Test the element-by-element equality of two Arrays of strings.\n * @param xs First array of strings.\n * @param ys Second array of strings.\n * @returns Wether the two arrays are all equal, element by element.\n */\nexport function stringsEqual(xs: string[], ys: string[]): boolean {\n  if (xs == null || ys == null) {\n    return xs === ys;\n  }\n  if (xs.length !== ys.length) {\n    return false;\n  }\n  for (let i = 0; i < xs.length; ++i) {\n    if (xs[i] !== ys[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Get the unique elements of an array.\n * @param xs Array.\n * @returns An Array consisting of the unique elements in `xs`.\n */\nexport function unique<T>(xs: T[]): T[] {\n  if (xs == null) {\n    return xs;\n  }\n  const out: T[] = [];\n  // TODO(cais): Maybe improve performance by sorting.\n  for (const x of xs) {\n    if (out.indexOf(x) === -1) {\n      out.push(x);\n    }\n  }\n  return out;\n}\n\n/**\n * Determine if an Object is empty (i.e., does not have own properties).\n * @param obj Object\n * @returns Whether the Object is empty.\n * @throws ValueError: If object is `null` or `undefined`.\n */\nexport function isObjectEmpty(obj: {}): boolean {\n  if (obj == null) {\n    throw new ValueError(`Invalid value in obj: ${JSON.stringify(obj)}`);\n  }\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Helper function used to build type union/enum run-time checkers.\n * @param values The list of allowed values.\n * @param label A string name for the type\n * @param value The value to test.\n * @throws ValueError: If the value is not in values nor `undefined`/`null`.\n */\nexport function checkStringTypeUnionValue(\n    values: string[], label: string, value: string): void {\n  if (value == null) {\n    return;\n  }\n  if (values.indexOf(value) < 0) {\n    throw new ValueError(`${value} is not a valid ${label}.  Valid values are ${\n        values} or null/undefined.`);\n  }\n}\n\n/**\n * Helper function for verifying the types of inputs.\n *\n * Ensures that the elements of `x` are all of type `expectedType`.\n * Also verifies that the length of `x` is within bounds.\n *\n * @param x Object to test.\n * @param expectedType The string expected type of all of the elements in the\n * Array.\n * @param minLength Return false if x.length is less than this.\n * @param maxLength Return false if x.length is greater than this.\n * @returns true if and only if `x` is an `Array<expectedType>` with\n * length >= `minLength` and <= `maxLength`.\n */\n// tslint:disable:no-any\nexport function checkArrayTypeAndLength(\n    x: any, expectedType: string, minLength = 0,\n    maxLength = Infinity): boolean {\n  assert(minLength >= 0);\n  assert(maxLength >= minLength);\n  return (\n      Array.isArray(x) && x.length >= minLength && x.length <= maxLength &&\n      x.every(e => typeof e === expectedType));\n}\n// tslint:enable:no-any\n\n/**\n * Assert that a value or an array of value are positive integer.\n *\n * @param value The value being asserted on. May be a single number or an array\n *   of numbers.\n * @param name Name of the value, used to make the error message.\n */\nexport function assertPositiveInteger(value: number|number[], name: string) {\n  if (Array.isArray(value)) {\n    util.assert(\n        value.length > 0, () => `${name} is unexpectedly an empty array.`);\n    value.forEach(\n        (v, i) => assertPositiveInteger(v, `element ${i + 1} of ${name}`));\n  } else {\n    util.assert(\n        Number.isInteger(value) && value > 0,\n        () => `Expected ${name} to be a positive integer, but got ` +\n            `${formatAsFriendlyString(value)}.`);\n  }\n}\n\n/**\n * Format a value into a display-friendly, human-readable fashion.\n *\n * - `null` is formatted as `'null'`\n * - Strings are formated with flanking pair of quotes.\n * - Arrays are formatted with flanking pair of square brackets.\n *\n * @param value The value to display.\n * @return Formatted string.\n */\n// tslint:disable-next-line:no-any\nexport function formatAsFriendlyString(value: any): string {\n  if (value === null) {\n    return 'null';\n  } else if (Array.isArray(value)) {\n    return '[' + value.map(v => formatAsFriendlyString(v)).join(',') + ']';\n  } else if (typeof value === 'string') {\n    return `\"${value}\"`;\n  } else {\n    return `${value}`;\n  }\n}\n\n/**\n * Returns a function `f2` (decorator) which wraps the original function\n * `f`. `f2` guarantees that `f` can be called at most once\n * every `waitMs` ms. If `f2` is called more often, it will return\n * the last returned result of `f`.\n *\n * @param f The original function `f` to wrap.\n * @param waitMs The time between two consecutive calls to `f` in ms.\n */\nexport function debounce<T>(\n    f: (...args: Array<{}>) => T, waitMs: number,\n    nowFunc?: Function): (...args: Array<{}>) => T {\n  let lastTime = nowFunc != null ? nowFunc() : util.now();\n  let lastResult: T;\n  const f2 = (...args: Array<{}>) => {\n    const now = nowFunc != null ? nowFunc() : util.now();\n    if (now - lastTime < waitMs) {\n      return lastResult;\n    }\n    lastTime = now;\n    lastResult = f(...args);\n    return lastResult;\n  };\n  return f2;\n}\n\n/**\n * Returns the fusable activation given a layers identifier.\n *\n * @param activationName The layers identifier string.\n * @return The name of the fusable activation.\n */\nexport function mapActivationToFusedKernel(activationName: string):\n    fused.Activation {\n  if (activationName === 'relu') {\n    return 'relu';\n  }\n  if (activationName === 'linear') {\n    return 'linear';\n  }\n  if (activationName === 'elu') {\n    return 'elu';\n  }\n  return null;\n}\n\ntype PossibleValues = Array<Array<boolean|string|number>>;\n\n/**\n * Returns the cartesian product of sets of values.\n * This works the same as itertools.product in Python.\n *\n * Example:\n *\n * filters = [128, 256, 512]\n * paddings = ['same', 'valid']\n *\n * product = [ [128, 'same'], [128, 'valid'], [256, 'same'], [256, 'valid'],\n * [512, 'same'], [512, 'valid']]\n *\n * @param arrayOfValues List/array of values.\n * @return The cartesian product.\n */\nexport function getCartesianProductOfValues(...arrayOfValues: PossibleValues):\n    PossibleValues {\n  assert(arrayOfValues.length > 0, 'arrayOfValues is empty');\n\n  for (const values of arrayOfValues) {\n    assert(Array.isArray(values), 'one of the values is not an array');\n    assert(values.length > 0, 'one of the values is empty');\n  }\n\n  return arrayOfValues.reduce((products, values) => {\n    if (products.length === 0) {\n      return values.map(value => [value]);\n    }\n\n    return values\n        .map(value => {\n          return products.map((prevValue) => [...prevValue, value]);\n        })\n        .reduce((flattenedProduct, unflattenedProduct) => {\n          return flattenedProduct.concat(unflattenedProduct);\n        }, []);\n  }, [] as PossibleValues);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}