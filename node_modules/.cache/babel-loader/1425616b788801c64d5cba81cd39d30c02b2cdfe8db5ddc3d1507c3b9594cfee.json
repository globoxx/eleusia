{"ast":null,"code":"import _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n/*\r\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\r\n(indices are [batch, row, col]).\r\n\r\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\r\n-------   -------   -------   -------   -------   -------\r\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\r\n\r\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\r\n-------   -------   -------   -------   -------   -------\r\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\r\n\r\nSingle texels contain only values from the same batch, and from adjacent rows\r\nand columns.\r\n */\nexport var EncodeMatrixPackedProgram = /*#__PURE__*/_createClass(function EncodeMatrixPackedProgram(outputShape) {\n  var inputIsUnsignedByte = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  _classCallCheck(this, EncodeMatrixPackedProgram);\n  this.variableNames = ['A'];\n  this.packedInputs = false;\n  this.packedOutput = true;\n  this.customUniforms = [{\n    name: 'texShape',\n    type: 'ivec2'\n  }];\n  var glsl = getGlslDifferences();\n  this.outputShape = outputShape;\n  this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n  var mainLoop = '';\n  var output = 'result';\n  if (inputIsUnsignedByte) {\n    output = 'floor(result * 255. + 0.5)';\n  }\n  for (var row = 0; row <= 1; row++) {\n    for (var col = 0; col <= 1; col++) {\n      var channel = row * 2 + col;\n      mainLoop += \"\\n          localCoords = coords;\\n          if(localCoords[2] + \".concat(col, \" < \").concat(this.enableShapeUniforms ? 'outShape[2]' : \"\".concat(outputShape[2]), \") {\\n          localCoords[2] += \").concat(col, \";\\n          if (localCoords[1] + \").concat(row, \" < \").concat(this.enableShapeUniforms ? 'outShape[1]' : \"\".concat(outputShape[1]), \") {\\n            localCoords[1] += \").concat(row, \";\\n\\n            flatIndex = getFlatIndex(localCoords);\\n            offset = imod(flatIndex, 4);\\n\\n            flatIndex = idiv(flatIndex, 4, 1.);\\n\\n            int r = flatIndex / texShape[1];\\n            int c = imod(flatIndex, texShape[1]);\\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\\n            values = \").concat(glsl.texture2D, \"(A, uv);\\n\\n            if (offset == 0) {\\n              result[\").concat(channel, \"] = values[0];\\n            } else if (offset == 1) {\\n              result[\").concat(channel, \"] = values[1];\\n            } else if (offset == 2) {\\n              result[\").concat(channel, \"] = values[2];\\n            } else {\\n              result[\").concat(channel, \"] = values[3];\\n            }\\n          }\\n        }\\n        \");\n    }\n  }\n  this.userCode = \"\\n        \".concat(this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() : shader_util.getFlatIndexFrom3D(outputShape), \"\\n\\n        void main() {\\n          ivec3 coords = getOutputCoords();\\n\\n          vec4 result = vec4(0.);\\n          int flatIndex, r, c, offset;\\n          ivec3 localCoords;\\n          vec2 uv;\\n          vec4 values;\\n\\n          \").concat(mainLoop, \"\\n\\n          \").concat(glsl.output, \" = \").concat(output, \";\\n        }\\n    \");\n});","map":{"version":3,"names":["getGlslDifferences","useShapeUniforms","shader_util","EncodeMatrixPackedProgram","_createClass","outputShape","inputIsUnsignedByte","arguments","length","undefined","_classCallCheck","variableNames","packedInputs","packedOutput","customUniforms","name","type","glsl","enableShapeUniforms","mainLoop","output","row","col","channel","concat","texture2D","userCode","getFlatIndexFrom3DOutput","getFlatIndexFrom3D"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\encode_matrix_packed_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\n\nexport class EncodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(\n      outputShape: [number, number, number], inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let mainLoop = '';\n    let output = 'result';\n    if (inputIsUnsignedByte) {\n      output = 'floor(result * 255. + 0.5)';\n    }\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        const channel = row * 2 + col;\n\n        mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${\n            this.enableShapeUniforms ? 'outShape[2]' : `${outputShape[2]}`}) {\n          localCoords[2] += ${col};\n          if (localCoords[1] + ${row} < ${\n            this.enableShapeUniforms ? 'outShape[1]' : `${outputShape[1]}`}) {\n            localCoords[1] += ${row};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${glsl.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${channel}] = values[0];\n            } else if (offset == 1) {\n              result[${channel}] = values[1];\n            } else if (offset == 2) {\n              result[${channel}] = values[2];\n            } else {\n              result[${channel}] = values[3];\n            }\n          }\n        }\n        `;\n      }\n    }\n\n    this.userCode = `\n        ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${mainLoop}\n\n          ${glsl.output} = ${output};\n        }\n    `;\n  }\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,kBAAkB,QAAO,gBAAgB;AACjD,SAAsBC,gBAAgB,QAAO,cAAc;AAC3D,OAAO,KAAKC,WAAW,MAAM,wBAAwB;AAErD;;;;;;;;;;;;;;;AAgBA,WAAaC,yBAAyB,gBAAAC,YAAA,CASpC,SAAAD,0BACIE,WAAqC,EAA6B;EAAA,IAA3BC,mBAAmB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAAAG,eAAA,OAAAP,yBAAA;EATtE,KAAAQ,aAAa,GAAG,CAAC,GAAG,CAAC;EAGrB,KAAAC,YAAY,GAAG,KAAK;EACpB,KAAAC,YAAY,GAAG,IAAI;EAEnB,KAAAC,cAAc,GAAG,CAAC;IAACC,IAAI,EAAE,UAAU;IAAEC,IAAI,EAAE;EAAgB,CAAE,CAAC;EAI5D,IAAMC,IAAI,GAAGjB,kBAAkB,EAAE;EACjC,IAAI,CAACK,WAAW,GAAGA,WAAW;EAC9B,IAAI,CAACa,mBAAmB,GAAGjB,gBAAgB,CAAC,IAAI,CAACI,WAAW,CAACG,MAAM,CAAC;EAEpE,IAAIW,QAAQ,GAAG,EAAE;EACjB,IAAIC,MAAM,GAAG,QAAQ;EACrB,IAAId,mBAAmB,EAAE;IACvBc,MAAM,GAAG,4BAA4B;;EAGvC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,IAAI,CAAC,EAAEA,GAAG,EAAE,EAAE;IACjC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,IAAI,CAAC,EAAEA,GAAG,EAAE,EAAE;MACjC,IAAMC,OAAO,GAAGF,GAAG,GAAG,CAAC,GAAGC,GAAG;MAE7BH,QAAQ,wEAAAK,MAAA,CAEgBF,GAAG,SAAAE,MAAA,CACvB,IAAI,CAACN,mBAAmB,GAAG,aAAa,MAAAM,MAAA,CAAMnB,WAAW,CAAC,CAAC,CAAC,CAAE,uCAAAmB,MAAA,CAC5CF,GAAG,wCAAAE,MAAA,CACAH,GAAG,SAAAG,MAAA,CACxB,IAAI,CAACN,mBAAmB,GAAG,aAAa,MAAAM,MAAA,CAAMnB,WAAW,CAAC,CAAC,CAAC,CAAE,yCAAAmB,MAAA,CAC1CH,GAAG,mWAAAG,MAAA,CAUZP,IAAI,CAACQ,SAAS,uEAAAD,MAAA,CAGdD,OAAO,kFAAAC,MAAA,CAEPD,OAAO,kFAAAC,MAAA,CAEPD,OAAO,iEAAAC,MAAA,CAEPD,OAAO,oEAIrB;;;EAIL,IAAI,CAACG,QAAQ,gBAAAF,MAAA,CAET,IAAI,CAACN,mBAAmB,GAAGhB,WAAW,CAACyB,wBAAwB,EAAE,GACtCzB,WAAW,CAAC0B,kBAAkB,CAACvB,WAAW,CAAC,iPAAAmB,MAAA,CAWlEL,QAAQ,oBAAAK,MAAA,CAERP,IAAI,CAACG,MAAM,SAAAI,MAAA,CAAMJ,MAAM,uBAE9B;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}