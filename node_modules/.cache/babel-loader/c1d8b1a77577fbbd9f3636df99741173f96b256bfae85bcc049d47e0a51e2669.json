{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { cast } from '../kernels/Cast';\nimport { complex } from '../kernels/Complex';\n/**\r\n * Template that creates a `KernelFunc` for binary ops.\r\n * @param name Kernel name.\r\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\r\n * @param binaryKernelComplexImpl Optional. If exists, represents a\r\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\r\n *     is `complex64`.\r\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\r\n *     result has the same dtype as the first input. This is mainly used in\r\n *     comparison kernels, such as Equal, Less, Greater, etc.\r\n */\nexport function binaryKernelFunc(name, simpleImpl, complexImpl, dtype) {\n  if (complexImpl == null) {\n    return function (_ref) {\n      var inputs = _ref.inputs,\n        backend = _ref.backend;\n      var a = inputs.a,\n        b = inputs.b;\n      var cpuBackend = backend;\n      assertNotComplex([a, b], name);\n      var aVals = cpuBackend.data.get(a.dataId).values;\n      var bVals = cpuBackend.data.get(b.dataId).values;\n      var decodedAVals = a.dtype === 'string' ?\n      // tslint:disable-next-line: no-any\n      backend_util.fromUint8ToStringArray(aVals) : aVals;\n      var decodedBVals = a.dtype === 'string' ?\n      // tslint:disable-next-line: no-any\n      backend_util.fromUint8ToStringArray(bVals) : bVals;\n      var $dtype = dtype || a.dtype;\n      var _simpleImpl = simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype),\n        _simpleImpl2 = _slicedToArray(_simpleImpl, 2),\n        resultData = _simpleImpl2[0],\n        resultShape = _simpleImpl2[1];\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n  return function (_ref2) {\n    var inputs = _ref2.inputs,\n      backend = _ref2.backend;\n    var a = inputs.a,\n      b = inputs.b;\n    var cpuBackend = backend;\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      var $aComplex = cast({\n        inputs: {\n          x: a\n        },\n        backend: cpuBackend,\n        attrs: {\n          dtype: 'complex64'\n        }\n      });\n      var $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n      var aReal = $aComplexVals.complexTensorInfos.real;\n      var aImag = $aComplexVals.complexTensorInfos.imag;\n      var aRealVals = cpuBackend.data.get(aReal.dataId).values;\n      var aImagVals = cpuBackend.data.get(aImag.dataId).values;\n      var $bComplex = cast({\n        inputs: {\n          x: b\n        },\n        backend: cpuBackend,\n        attrs: {\n          dtype: 'complex64'\n        }\n      });\n      var $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n      var bReal = $bComplexVals.complexTensorInfos.real;\n      var bImag = $bComplexVals.complexTensorInfos.imag;\n      var bRealVals = cpuBackend.data.get(bReal.dataId).values;\n      var bImagVals = cpuBackend.data.get(bImag.dataId).values;\n      var _complexImpl = complexImpl(a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals),\n        _complexImpl2 = _slicedToArray(_complexImpl, 3),\n        resultRealData = _complexImpl2[0],\n        resultImagData = _complexImpl2[1],\n        resultShape = _complexImpl2[2];\n      var resultReal = cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n      var resultImag = cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n      var result = complex({\n        inputs: {\n          real: resultReal,\n          imag: resultImag\n        },\n        backend: cpuBackend\n      });\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n      return result;\n    } else {\n      var aVals = cpuBackend.data.get(a.dataId).values;\n      var bVals = cpuBackend.data.get(b.dataId).values;\n      var $dtype = dtype || a.dtype;\n      var _simpleImpl3 = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype),\n        _simpleImpl4 = _slicedToArray(_simpleImpl3, 2),\n        resultData = _simpleImpl4[0],\n        _resultShape = _simpleImpl4[1];\n      return cpuBackend.makeTensorInfo(_resultShape, $dtype, resultData);\n    }\n  };\n}\n/**\r\n * Template that creates the complex type implementation for binary ops.\r\n * Supports broadcast.\r\n */\nexport function createComplexBinaryKernelImpl(op) {\n  return function (aShape, bShape, aRealVals, aImagVals, bRealVals, bImagVals) {\n    var resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    var resultSize = util.sizeFromShape(resultShape);\n    var resultRank = resultShape.length;\n    var resultStrides = util.computeStrides(resultShape);\n    var resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    var resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n    var aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    var bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n    var aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    var bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n    var aRank = aShape.length;\n    var aStrides = util.computeStrides(aShape);\n    var bRank = bShape.length;\n    var bStrides = util.computeStrides(bShape);\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (var i = 0; i < resultRealVals.length; i++) {\n        var aIdx = i % aVals.length;\n        var bIdx = i % bVals.length;\n        var result = op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2], bVals[bIdx * 2 + 1]);\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      var _loop = function _loop() {\n        var loc = util.indexToLoc(_i, resultRank, resultStrides);\n        var aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(function (d) {\n          return aLoc[d] = 0;\n        });\n        var aIndex = util.locToIndex(aLoc, aRank, aStrides);\n        var bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(function (d) {\n          return bLoc[d] = 0;\n        });\n        var bIndex = util.locToIndex(bLoc, bRank, bStrides);\n        var opResult = op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2], bVals[bIndex * 2 + 1]);\n        resultRealVals[_i] = opResult.real;\n        resultImagVals[_i] = opResult.imag;\n      };\n      for (var _i = 0; _i < resultRealVals.length; _i++) {\n        _loop();\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}","map":{"version":3,"names":["backend_util","util","assertNotComplex","cast","complex","binaryKernelFunc","name","simpleImpl","complexImpl","dtype","_ref","inputs","backend","a","b","cpuBackend","aVals","data","get","dataId","values","bVals","decodedAVals","fromUint8ToStringArray","decodedBVals","$dtype","_simpleImpl","shape","_simpleImpl2","_slicedToArray","resultData","resultShape","makeTensorInfo","_ref2","$aComplex","x","attrs","$aComplexVals","aReal","complexTensorInfos","real","aImag","imag","aRealVals","aImagVals","$bComplex","$bComplexVals","bReal","bImag","bRealVals","bImagVals","_complexImpl","_complexImpl2","resultRealData","resultImagData","resultReal","resultImag","result","disposeIntermediateTensorInfo","_simpleImpl3","_simpleImpl4","createComplexBinaryKernelImpl","op","aShape","bShape","assertAndGetBroadcastShape","resultSize","sizeFromShape","resultRank","length","resultStrides","computeStrides","resultRealVals","getTypedArrayFromDType","resultImagVals","aBroadcastDims","getBroadcastDims","bBroadcastDims","mergeRealAndImagArrays","aRank","aStrides","bRank","bStrides","i","aIdx","bIdx","_loop","loc","indexToLoc","aLoc","slice","forEach","d","aIndex","locToIndex","bLoc","bIndex","opResult"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-cpu\\src\\utils\\binary_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from '../kernels/Cast';\nimport {complex} from '../kernels/Complex';\n\nimport {ComplexBinaryKernelImpl, ComplexBinaryOperation, SimpleBinaryKernelImpl} from './binary_types';\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    name: string, simpleImpl: SimpleBinaryKernelImpl,\n    complexImpl?: ComplexBinaryKernelImpl, dtype?: DataType): KernelFunc {\n  if (complexImpl == null) {\n    return ({inputs, backend}) => {\n      const {a, b} = inputs as BinaryInputs;\n      const cpuBackend = backend as MathBackendCPU;\n\n      assertNotComplex([a, b], name);\n\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast(\n          {inputs: {x: a}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n\n      const aRealVals =\n          cpuBackend.data.get(aReal.dataId).values as Float32Array;\n      const aImagVals =\n          cpuBackend.data.get(aImag.dataId).values as Float32Array;\n\n      const $bComplex = cast(\n          {inputs: {x: b}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n\n      const bRealVals =\n          cpuBackend.data.get(bReal.dataId).values as Float32Array;\n      const bImagVals =\n          cpuBackend.data.get(bImag.dataId).values as Float32Array;\n\n      const [resultRealData, resultImagData, resultShape] = complexImpl(\n          a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n\n      const resultReal =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n\n      const resultImag =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n\n      const result = complex(\n          {inputs: {real: resultReal, imag: resultImag}, backend: cpuBackend});\n\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op: ComplexBinaryOperation):\n    ComplexBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aRealVals: Float32Array,\n          aImagVals: Float32Array, bRealVals: Float32Array,\n          bImagVals: Float32Array): [TypedArray, TypedArray, number[]] => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}