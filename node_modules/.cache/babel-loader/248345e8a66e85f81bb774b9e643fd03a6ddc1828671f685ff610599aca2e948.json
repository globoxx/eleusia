{"ast":null,"code":"import _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var Conv2DProgram = /*#__PURE__*/_createClass(function Conv2DProgram(convInfo) {\n  var addBias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var activation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var hasPreluActivationWeights = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var hasLeakyreluAlpha = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  _classCallCheck(this, Conv2DProgram);\n  this.variableNames = ['x', 'W'];\n  this.outputShape = convInfo.outShape;\n  var padTop = convInfo.padInfo.top;\n  var padLeft = convInfo.padInfo.left;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var dilationHeight = convInfo.dilationHeight;\n  var dilationWidth = convInfo.dilationWidth;\n  var filterHeight = convInfo.filterHeight;\n  var filterWidth = convInfo.filterWidth;\n  var inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n  var inputDepthVec4Remainder = convInfo.inChannels % 4;\n  var isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  var rowDim = isChannelsLast ? 1 : 2;\n  var colDim = isChannelsLast ? 2 : 3;\n  var channelDim = isChannelsLast ? 3 : 1;\n  var activationSnippet = '',\n    applyActivationSnippet = '';\n  if (activation) {\n    if (hasPreluActivationWeights) {\n      activationSnippet = \"float activation(float a) {\\n          float b = getPreluActivationWeightsAtOutCoords();\\n          \".concat(activation, \"\\n        }\");\n    } else if (hasLeakyreluAlpha) {\n      activationSnippet = \"float activation(float a) {\\n          float b = getLeakyreluAlphaAtOutCoords();\\n          \".concat(activation, \"\\n        }\");\n    } else {\n      activationSnippet = \"\\n          float activation(float x) {\\n            \".concat(activation, \"\\n          }\\n        \");\n    }\n    applyActivationSnippet = \"result = activation(result);\";\n  }\n  var addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n  if (addBias) {\n    this.variableNames.push('bias');\n  }\n  if (hasPreluActivationWeights) {\n    this.variableNames.push('preluActivationWeights');\n  }\n  if (hasLeakyreluAlpha) {\n    this.variableNames.push('leakyreluAlpha');\n  }\n  this.userCode = \"\\n      \".concat(activationSnippet, \"\\n\\n      const ivec2 strides = ivec2(\").concat(strideHeight, \", \").concat(strideWidth, \");\\n      const ivec2 pads = ivec2(\").concat(padTop, \", \").concat(padLeft, \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d2 = coords[\").concat(channelDim, \"];\\n\\n        ivec2 xRCCorner =\\n            ivec2(coords[\").concat(rowDim, \"], coords[\").concat(colDim, \"]) * strides - pads;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \").concat(filterHeight, \"; wR++) {\\n          int xR = xRCorner + wR * \").concat(dilationHeight, \";\\n\\n          if (xR < 0 || xR >= \").concat(convInfo.inHeight, \") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \").concat(filterWidth, \"; wC++) {\\n            int xC = xCCorner + wC * \").concat(dilationWidth, \";\\n\\n            if (xC < 0 || xC >= \").concat(convInfo.inWidth, \") {\\n              continue;\\n            }\\n\\n            for (int d1 = 0; d1 < \").concat(inputDepthNearestVec4, \"; d1 += 4) {\\n              vec4 wValues = vec4(\\n                getW(wR, wC, d1, d2),\\n                getW(wR, wC, d1 + 1, d2),\\n                getW(wR, wC, d1 + 2, d2),\\n                getW(wR, wC, d1 + 3, d2)\\n              );\\n\\n              if (\").concat(isChannelsLast, \") {\\n                vec4 xValues = vec4(\\n                  getX(batch, xR, xC, d1),\\n                  getX(batch, xR, xC, d1 + 1),\\n                  getX(batch, xR, xC, d1 + 2),\\n                  getX(batch, xR, xC, d1 + 3)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec4 xValues = vec4(\\n                  getX(batch, d1, xR, xC),\\n                  getX(batch, d1 + 1, xR, xC),\\n                  getX(batch, d1 + 2, xR, xC),\\n                  getX(batch, d1 + 3, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n            }\\n\\n            if (\").concat(inputDepthVec4Remainder === 1, \") {\\n\\n              if (\").concat(isChannelsLast, \") {\\n                dotProd +=\\n                    getX(batch, xR, xC, \").concat(inputDepthNearestVec4, \") *\\n                    getW(wR, wC, \").concat(inputDepthNearestVec4, \", d2);\\n              } else {\\n                dotProd +=\\n                    getX(batch, \").concat(inputDepthNearestVec4, \", xR, xC) *\\n                    getW(wR, wC, \").concat(inputDepthNearestVec4, \", d2);\\n              }\\n\\n            } else if (\").concat(inputDepthVec4Remainder === 2, \") {\\n              vec2 wValues = vec2(\\n                getW(wR, wC, \").concat(inputDepthNearestVec4, \", d2),\\n                getW(wR, wC, \").concat(inputDepthNearestVec4, \" + 1, d2)\\n              );\\n\\n              if (\").concat(isChannelsLast, \") {\\n                vec2 xValues = vec2(\\n                  getX(batch, xR, xC, \").concat(inputDepthNearestVec4, \"),\\n                  getX(batch, xR, xC, \").concat(inputDepthNearestVec4, \" + 1)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec2 xValues = vec2(\\n                  getX(batch, \").concat(inputDepthNearestVec4, \", xR, xC),\\n                  getX(batch, \").concat(inputDepthNearestVec4, \" + 1, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n            } else if (\").concat(inputDepthVec4Remainder === 3, \") {\\n              vec3 wValues = vec3(\\n                getW(wR, wC, \").concat(inputDepthNearestVec4, \", d2),\\n                getW(wR, wC, \").concat(inputDepthNearestVec4, \" + 1, d2),\\n                getW(wR, wC, \").concat(inputDepthNearestVec4, \" + 2, d2)\\n              );\\n\\n              if (\").concat(isChannelsLast, \") {\\n                vec3 xValues = vec3(\\n                  getX(batch, xR, xC, \").concat(inputDepthNearestVec4, \"),\\n                  getX(batch, xR, xC, \").concat(inputDepthNearestVec4, \" + 1),\\n                  getX(batch, xR, xC, \").concat(inputDepthNearestVec4, \" + 2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec3 xValues = vec3(\\n                  getX(batch, \").concat(inputDepthNearestVec4, \", xR, xC),\\n                  getX(batch, \").concat(inputDepthNearestVec4, \" + 1, xR, xC),\\n                  getX(batch, \").concat(inputDepthNearestVec4, \" + 2, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n            }\\n          }\\n        }\\n\\n        float result = dotProd;\\n        \").concat(addBiasSnippet, \"\\n        \").concat(applyActivationSnippet, \"\\n        setOutput(result);\\n      }\\n    \");\n});\nexport var Conv3DProgram = /*#__PURE__*/_createClass(function Conv3DProgram(convInfo) {\n  _classCallCheck(this, Conv3DProgram);\n  this.variableNames = ['x', 'W'];\n  this.outputShape = convInfo.outShape;\n  var padFront = convInfo.padInfo.front;\n  var padTop = convInfo.padInfo.top;\n  var padLeft = convInfo.padInfo.left;\n  var strideDepth = convInfo.strideDepth;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var dilationDepth = convInfo.dilationDepth;\n  var dilationHeight = convInfo.dilationHeight;\n  var dilationWidth = convInfo.dilationWidth;\n  var filterDepth = convInfo.filterDepth;\n  var filterHeight = convInfo.filterHeight;\n  var filterWidth = convInfo.filterWidth;\n  var inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n  var inputDepthVec4Remainder = convInfo.inChannels % 4;\n  this.userCode = \"\\n      const ivec3 strides = ivec3(\".concat(strideDepth, \", \").concat(strideHeight, \", \").concat(strideWidth, \");\\n      const ivec3 pads = ivec3(\").concat(padFront, \", \").concat(padTop, \", \").concat(padLeft, \");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int d2 = coords.u;\\n\\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n        int xFCorner = xFRCCorner.x;\\n        int xRCorner = xFRCCorner.y;\\n        int xCCorner = xFRCCorner.z;\\n\\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\\n        // values in that axis.\\n        float dotProd = 0.0;\\n        for (int wF = 0; wF < \").concat(filterDepth, \"; wF++) {\\n          int xF = xFCorner + wF * \").concat(dilationDepth, \";\\n\\n          if (xF < 0 || xF >= \").concat(convInfo.inDepth, \") {\\n            continue;\\n          }\\n\\n          for (int wR = 0; wR < \").concat(filterHeight, \"; wR++) {\\n            int xR = xRCorner + wR * \").concat(dilationHeight, \";\\n\\n            if (xR < 0 || xR >= \").concat(convInfo.inHeight, \") {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < \").concat(filterWidth, \"; wC++) {\\n              int xC = xCCorner + wC * \").concat(dilationWidth, \";\\n\\n              if (xC < 0 || xC >= \").concat(convInfo.inWidth, \") {\\n                continue;\\n              }\\n\\n              for (int d1 = 0; d1 < \").concat(inputDepthNearestVec4, \"; d1 += 4) {\\n                vec4 xValues = vec4(\\n                  getX(batch, xF, xR, xC, d1),\\n                  getX(batch, xF, xR, xC, d1 + 1),\\n                  getX(batch, xF, xR, xC, d1 + 2),\\n                  getX(batch, xF, xR, xC, d1 + 3)\\n                );\\n                vec4 wValues = vec4(\\n                  getW(wF, wR, wC, d1, d2),\\n                  getW(wF, wR, wC, d1 + 1, d2),\\n                  getW(wF, wR, wC, d1 + 2, d2),\\n                  getW(wF, wR, wC, d1 + 3, d2)\\n                );\\n\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n              if (\").concat(inputDepthVec4Remainder === 1, \") {\\n                dotProd +=\\n                  getX(batch, xF, xR, xC, \").concat(inputDepthNearestVec4, \") *\\n                  getW(wF, wR, wC, \").concat(inputDepthNearestVec4, \", d2);\\n              } else if (\").concat(inputDepthVec4Remainder === 2, \") {\\n                vec2 xValues = vec2(\\n                  getX(batch, xF, xR, xC, \").concat(inputDepthNearestVec4, \"),\\n                  getX(batch, xF, xR, xC, \").concat(inputDepthNearestVec4, \" + 1)\\n                );\\n                vec2 wValues = vec2(\\n                  getW(wF, wR, wC, \").concat(inputDepthNearestVec4, \", d2),\\n                  getW(wF, wR, wC, \").concat(inputDepthNearestVec4, \" + 1, d2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else if (\").concat(inputDepthVec4Remainder === 3, \") {\\n                vec3 xValues = vec3(\\n                  getX(batch, xF, xR, xC, \").concat(inputDepthNearestVec4, \"),\\n                  getX(batch, xF, xR, xC, \").concat(inputDepthNearestVec4, \" + 1),\\n                  getX(batch, xF, xR, xC, \").concat(inputDepthNearestVec4, \" + 2)\\n                );\\n                vec3 wValues = vec3(\\n                  getW(wF, wR, wC, \").concat(inputDepthNearestVec4, \", d2),\\n                  getW(wF, wR, wC, \").concat(inputDepthNearestVec4, \" + 1, d2),\\n                  getW(wF, wR, wC, \").concat(inputDepthNearestVec4, \" + 2, d2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");\n});","map":{"version":3,"names":["Conv2DProgram","_createClass","convInfo","addBias","arguments","length","undefined","activation","hasPreluActivationWeights","hasLeakyreluAlpha","_classCallCheck","variableNames","outputShape","outShape","padTop","padInfo","top","padLeft","left","strideHeight","strideWidth","dilationHeight","dilationWidth","filterHeight","filterWidth","inputDepthNearestVec4","Math","floor","inChannels","inputDepthVec4Remainder","isChannelsLast","dataFormat","rowDim","colDim","channelDim","activationSnippet","applyActivationSnippet","concat","addBiasSnippet","push","userCode","inHeight","inWidth","Conv3DProgram","padFront","front","strideDepth","dilationDepth","filterDepth","inDepth"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\conv_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivationWeights = false,\n      hasLeakyreluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivationWeights) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nexport class Conv3DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.outShape;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n\n    this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${\n        strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}