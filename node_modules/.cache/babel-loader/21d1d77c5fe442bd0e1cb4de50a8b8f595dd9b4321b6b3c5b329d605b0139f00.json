{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { squeezeShape } from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\r\n * Removes dimensions of size 1 from the shape of a `tf.Tensor`.\r\n *\r\n * ```js\r\n * const x = tf.tensor([1, 2, 3, 4], [1, 1, 4]);\r\n * x.squeeze().print();\r\n * ```\r\n *\r\n * @param x The input tensor to be squeezed.\r\n * @param axis An optional list of numbers. If specified, only\r\n *     squeezes the dimensions listed. The dimension index starts at 0. It\r\n * is an error to squeeze a dimension that is not 1.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\r\n */\nfunction squeeze_(x, axis) {\n  var $x = convertToTensor(x, 'x', 'squeeze', 'string_or_numeric');\n  return reshape($x, squeezeShape($x.shape, axis).newShape);\n}\nexport var squeeze = /* @__PURE__ */op({\n  squeeze_: squeeze_\n});","map":{"version":3,"names":["convertToTensor","squeezeShape","op","reshape","squeeze_","x","axis","$x","shape","newShape","squeeze"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\squeeze.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {squeezeShape} from '../util';\n\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Removes dimensions of size 1 from the shape of a `tf.Tensor`.\n *\n * ```js\n * const x = tf.tensor([1, 2, 3, 4], [1, 1, 4]);\n * x.squeeze().print();\n * ```\n *\n * @param x The input tensor to be squeezed.\n * @param axis An optional list of numbers. If specified, only\n *     squeezes the dimensions listed. The dimension index starts at 0. It\n * is an error to squeeze a dimension that is not 1.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction squeeze_<T extends Tensor>(x: Tensor|TensorLike, axis?: number[]): T {\n  const $x = convertToTensor(x, 'x', 'squeeze', 'string_or_numeric');\n  return reshape($x, squeezeShape($x.shape, axis).newShape) as T;\n}\n\nexport const squeeze = /* @__PURE__ */ op({squeeze_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,eAAe,QAAO,oBAAoB;AAElD,SAAQC,YAAY,QAAO,SAAS;AAEpC,SAAQC,EAAE,QAAO,aAAa;AAC9B,SAAQC,OAAO,QAAO,WAAW;AAEjC;;;;;;;;;;;;;;;AAeA,SAASC,QAAQA,CAAmBC,CAAoB,EAAEC,IAAe;EACvE,IAAMC,EAAE,GAAGP,eAAe,CAACK,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,mBAAmB,CAAC;EAClE,OAAOF,OAAO,CAACI,EAAE,EAAEN,YAAY,CAACM,EAAE,CAACC,KAAK,EAAEF,IAAI,CAAC,CAACG,QAAQ,CAAM;AAChE;AAEA,OAAO,IAAMC,OAAO,GAAG,eAAgBR,EAAE,CAAC;EAACE,QAAQ,EAARA;AAAQ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}