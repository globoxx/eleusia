{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\nimport { tile } from '../tile';\n/**\r\n * Converts images from grayscale to RGB format.\r\n *\r\n * @param image A grayscale tensor to convert. The `image`'s last dimension must\r\n *     be size 1 with at least a two-dimensional shape.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\r\n */\nfunction grayscaleToRGB_(image) {\n  var $image = convertToTensor(image, 'image', 'grayscaleToRGB');\n  var lastDimsIdx = $image.rank - 1;\n  var lastDims = $image.shape[lastDimsIdx];\n  util.assert($image.rank >= 2, function () {\n    return 'Error in grayscaleToRGB: images must be at least rank 2, ' + \"but got rank \".concat($image.rank, \".\");\n  });\n  util.assert(lastDims === 1, function () {\n    return 'Error in grayscaleToRGB: last dimension of a grayscale image ' + \"should be size 1, but got size \".concat(lastDims, \".\");\n  });\n  var reps = new Array($image.rank);\n  reps.fill(1, 0, lastDimsIdx);\n  reps[lastDimsIdx] = 3;\n  return tile($image, reps);\n}\nexport var grayscaleToRGB = /* @__PURE__ */op({\n  grayscaleToRGB_: grayscaleToRGB_\n});","map":{"version":3,"names":["convertToTensor","util","op","tile","grayscaleToRGB_","image","$image","lastDimsIdx","rank","lastDims","shape","assert","concat","reps","Array","fill","grayscaleToRGB"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\image\\grayscale_to_rgb.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor2D, Tensor3D, Tensor4D, Tensor5D, Tensor6D} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\n\nimport {op} from '../operation';\nimport {tile} from '../tile';\n\n/**\n * Converts images from grayscale to RGB format.\n *\n * @param image A grayscale tensor to convert. The `image`'s last dimension must\n *     be size 1 with at least a two-dimensional shape.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction grayscaleToRGB_<T extends Tensor2D|Tensor3D|Tensor4D|Tensor5D|\n                         Tensor6D>(image: T|TensorLike): T {\n  const $image = convertToTensor(image, 'image', 'grayscaleToRGB');\n\n  const lastDimsIdx = $image.rank - 1;\n  const lastDims = $image.shape[lastDimsIdx];\n\n  util.assert(\n      $image.rank >= 2,\n      () => 'Error in grayscaleToRGB: images must be at least rank 2, ' +\n          `but got rank ${$image.rank}.`);\n\n  util.assert(\n      lastDims === 1,\n      () => 'Error in grayscaleToRGB: last dimension of a grayscale image ' +\n          `should be size 1, but got size ${lastDims}.`);\n\n  const reps = new Array($image.rank);\n\n  reps.fill(1, 0, lastDimsIdx);\n  reps[lastDimsIdx] = 3;\n\n  return tile($image, reps);\n}\n\nexport const grayscaleToRGB = /* @__PURE__ */ op({grayscaleToRGB_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,eAAe,QAAO,uBAAuB;AAErD,OAAO,KAAKC,IAAI,MAAM,YAAY;AAElC,SAAQC,EAAE,QAAO,cAAc;AAC/B,SAAQC,IAAI,QAAO,SAAS;AAE5B;;;;;;;;AAQA,SAASC,eAAeA,CACWC,KAAmB;EACpD,IAAMC,MAAM,GAAGN,eAAe,CAACK,KAAK,EAAE,OAAO,EAAE,gBAAgB,CAAC;EAEhE,IAAME,WAAW,GAAGD,MAAM,CAACE,IAAI,GAAG,CAAC;EACnC,IAAMC,QAAQ,GAAGH,MAAM,CAACI,KAAK,CAACH,WAAW,CAAC;EAE1CN,IAAI,CAACU,MAAM,CACPL,MAAM,CAACE,IAAI,IAAI,CAAC,EAChB;IAAA,OAAM,2DAA2D,mBAAAI,MAAA,CAC7CN,MAAM,CAACE,IAAI,MAAG;EAAA,EAAC;EAEvCP,IAAI,CAACU,MAAM,CACPF,QAAQ,KAAK,CAAC,EACd;IAAA,OAAM,+DAA+D,qCAAAG,MAAA,CAC/BH,QAAQ,MAAG;EAAA,EAAC;EAEtD,IAAMI,IAAI,GAAG,IAAIC,KAAK,CAACR,MAAM,CAACE,IAAI,CAAC;EAEnCK,IAAI,CAACE,IAAI,CAAC,CAAC,EAAE,CAAC,EAAER,WAAW,CAAC;EAC5BM,IAAI,CAACN,WAAW,CAAC,GAAG,CAAC;EAErB,OAAOJ,IAAI,CAACG,MAAM,EAAEO,IAAI,CAAC;AAC3B;AAEA,OAAO,IAAMG,cAAc,GAAG,eAAgBd,EAAE,CAAC;EAACE,eAAe,EAAfA;AAAe,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}