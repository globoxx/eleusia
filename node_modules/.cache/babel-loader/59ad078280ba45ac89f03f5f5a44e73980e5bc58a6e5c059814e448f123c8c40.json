{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { TensorBuffer, util } from '@tensorflow/tfjs-core';\nexport function uniqueImpl(values, axis, shape, dtype) {\n  // Normalize and validate axis.\n  var $axis = util.parseAxisParam(axis, shape)[0];\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  var newShape = [1, shape[0], 1];\n  for (var i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (var _i = $axis + 1; _i < shape.length; _i++) {\n    newShape[2] *= shape[_i];\n  }\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  var uniqueElements = new Map();\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  var indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  var inputBuffer = new TensorBuffer(newShape, dtype, values);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  var uniqueIndices = [];\n  var is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (var _i2 = 0; _i2 < shape[$axis]; _i2++) {\n    // Extract values along the axis.\n    var element = void 0;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[_i2].toString();\n    } else {\n      var axisValues = [];\n      for (var m = 0; m < newShape[0]; m++) {\n        for (var n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, _i2, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n    // Dedup and update various indices.\n    var existingIndex = uniqueElements.get(element);\n    if (existingIndex != null) {\n      indices[_i2] = existingIndex;\n    } else {\n      var uniqueIndex = uniqueElements.size;\n      uniqueElements.set(element, uniqueIndex);\n      indices[_i2] = uniqueIndex;\n      uniqueIndices.push(_i2);\n    }\n  }\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  var outputTmpShape = newShape.slice();\n  outputTmpShape[1] = uniqueElements.size;\n  var outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach(function (uniqueElementIndex, i) {\n    for (var _m = 0; _m < newShape[0]; _m++) {\n      for (var _n = 0; _n < newShape[2]; _n++) {\n        outputBuffer.set(inputBuffer.get(_m, uniqueElementIndex, _n), _m, i, _n);\n      }\n    }\n  });\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  var outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n  return {\n    outputValues: outputBuffer.values,\n    outputShape: outputShape,\n    indices: indices\n  };\n}","map":{"version":3,"names":["TensorBuffer","util","uniqueImpl","values","axis","shape","dtype","$axis","parseAxisParam","newShape","i","length","uniqueElements","Map","indices","Int32Array","inputBuffer","uniqueIndices","is1DTensor","element","toString","axisValues","m","n","push","get","join","existingIndex","uniqueIndex","size","set","outputTmpShape","slice","outputBuffer","forEach","uniqueElementIndex","outputShape","outputValues"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-cpu\\src\\kernels\\Unique_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements = new Map<string, number>();\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    const existingIndex = uniqueElements.get(element);\n    if (existingIndex != null) {\n      indices[i] = existingIndex;\n    } else {\n      const uniqueIndex = uniqueElements.size;\n      uniqueElements.set(element, uniqueIndex);\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = uniqueElements.size;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}