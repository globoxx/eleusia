{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { OneHot } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Creates a one-hot `tf.Tensor`. The locations represented by `indices` take\r\n * value `onValue` (defaults to 1), while all other locations take value\r\n * `offValue` (defaults to 0). If `indices` is rank `R`, the output has rank\r\n * `R+1` with the last axis of size `depth`.\r\n * `indices` used to encode prediction class must start from 0. For example,\r\n *  if you have 3 classes of data, class 1 should be encoded as 0, class 2\r\n *  should be 1, and class 3 should be 2.\r\n *\r\n * ```js\r\n * tf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();\r\n * ```\r\n *\r\n * @param indices `tf.Tensor` of indices with dtype `int32`. Indices must\r\n * start from 0.\r\n * @param depth The depth of the one hot dimension.\r\n * @param onValue A number used to fill in the output when the index matches\r\n * the location.\r\n * @param offValue A number used to fill in the output when the index does\r\n *     not match the location.\r\n * @param dtype The dtype of the output tensor, default to 'int32'.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n */\nfunction oneHot_(indices, depth) {\n  var onValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var offValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var dtype = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'int32';\n  if (depth < 2) {\n    throw new Error(\"Error in oneHot: depth must be >=2, but it is \".concat(depth));\n  }\n  var $indices = convertToTensor(indices, 'indices', 'oneHot', 'int32');\n  var inputs = {\n    indices: $indices\n  };\n  var attrs = {\n    dtype: dtype,\n    depth: depth,\n    onValue: onValue,\n    offValue: offValue\n  };\n  return ENGINE.runKernel(OneHot, inputs, attrs);\n}\nexport var oneHot = /* @__PURE__ */op({\n  oneHot_: oneHot_\n});","map":{"version":3,"names":["ENGINE","OneHot","convertToTensor","op","oneHot_","indices","depth","onValue","arguments","length","undefined","offValue","dtype","Error","concat","$indices","inputs","attrs","runKernel","oneHot"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\one_hot.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {OneHot, OneHotAttrs, OneHotInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {DataType, TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Creates a one-hot `tf.Tensor`. The locations represented by `indices` take\n * value `onValue` (defaults to 1), while all other locations take value\n * `offValue` (defaults to 0). If `indices` is rank `R`, the output has rank\n * `R+1` with the last axis of size `depth`.\n * `indices` used to encode prediction class must start from 0. For example,\n *  if you have 3 classes of data, class 1 should be encoded as 0, class 2\n *  should be 1, and class 3 should be 2.\n *\n * ```js\n * tf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();\n * ```\n *\n * @param indices `tf.Tensor` of indices with dtype `int32`. Indices must\n * start from 0.\n * @param depth The depth of the one hot dimension.\n * @param onValue A number used to fill in the output when the index matches\n * the location.\n * @param offValue A number used to fill in the output when the index does\n *     not match the location.\n * @param dtype The dtype of the output tensor, default to 'int32'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction oneHot_(\n    indices: Tensor|TensorLike, depth: number, onValue = 1, offValue = 0,\n    dtype: DataType = 'int32'): Tensor {\n  if (depth < 2) {\n    throw new Error(`Error in oneHot: depth must be >=2, but it is ${depth}`);\n  }\n  const $indices = convertToTensor(indices, 'indices', 'oneHot', 'int32');\n\n  const inputs: OneHotInputs = {indices: $indices};\n  const attrs: OneHotAttrs = {dtype, depth, onValue, offValue};\n\n  return ENGINE.runKernel(\n      OneHot, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const oneHot = /* @__PURE__ */ op({oneHot_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,MAAM,QAAkC,iBAAiB;AAIjE,SAAQC,eAAe,QAAO,oBAAoB;AAGlD,SAAQC,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAASC,OAAOA,CACZC,OAA0B,EAAEC,KAAa,EAChB;EAAA,IADkBC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EAAA,IAAEG,QAAQ,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EAAA,IACpEI,KAAA,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAkB,OAAO;EAC3B,IAAIF,KAAK,GAAG,CAAC,EAAE;IACb,MAAM,IAAIO,KAAK,kDAAAC,MAAA,CAAkDR,KAAK,EAAG;;EAE3E,IAAMS,QAAQ,GAAGb,eAAe,CAACG,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,CAAC;EAEvE,IAAMW,MAAM,GAAiB;IAACX,OAAO,EAAEU;EAAQ,CAAC;EAChD,IAAME,KAAK,GAAgB;IAACL,KAAK,EAALA,KAAK;IAAEN,KAAK,EAALA,KAAK;IAAEC,OAAO,EAAPA,OAAO;IAAEI,QAAQ,EAARA;EAAQ,CAAC;EAE5D,OAAOX,MAAM,CAACkB,SAAS,CACnBjB,MAAM,EAAEe,MAAmC,EAC3CC,KAAgC,CAAC;AACvC;AAEA,OAAO,IAAME,MAAM,GAAG,eAAgBhB,EAAE,CAAC;EAACC,OAAO,EAAPA;AAAO,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}