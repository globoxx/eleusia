{"ast":null,"code":"import _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { getTensor } from '../executors/utils';\nimport { getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam } from '../operation_mapper';\n/**\r\n * Helper class for lookup inputs and params for nodes in the model graph.\r\n */\nexport var NodeValueImpl = /*#__PURE__*/function () {\n  function NodeValueImpl(node, tensorMap, context) {\n    var _this = this;\n    _classCallCheck(this, NodeValueImpl);\n    this.node = node;\n    this.tensorMap = tensorMap;\n    this.context = context;\n    this.inputs = [];\n    this.attrs = {};\n    this.inputs = node.inputNames.map(function (name) {\n      return _this.getInput(name);\n    });\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs).reduce(function (attrs, key) {\n        attrs[key] = _this.getAttr(key);\n        return attrs;\n      }, {});\n    }\n  }\n  /**\r\n   * Return the value of the attribute or input param.\r\n   * @param name String: name of attribute or input param.\r\n   */\n  _createClass(NodeValueImpl, [{\n    key: \"getInput\",\n    value: function getInput(name) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n    /**\r\n     * Return the value of the attribute or input param.\r\n     * @param name String: name of attribute or input param.\r\n     */\n  }, {\n    key: \"getAttr\",\n    value: function getAttr(name, defaultValue) {\n      var value = this.node.rawAttrs[name];\n      if (value.tensor != null) {\n        return getTensor(name, this.tensorMap, this.context);\n      }\n      if (value.i != null || value.f != null) {\n        return getNumberParam(this.node.rawAttrs, name, defaultValue);\n      }\n      if (value.s != null) {\n        return getStringParam(this.node.rawAttrs, name, defaultValue);\n      }\n      if (value.b != null) {\n        return getBoolParam(this.node.rawAttrs, name, defaultValue);\n      }\n      if (value.shape != null) {\n        return getTensorShapeParam(this.node.rawAttrs, name, defaultValue);\n      }\n      if (value.type != null) {\n        return getDtypeParam(this.node.rawAttrs, name, defaultValue);\n      }\n      if (value.list != null) {\n        if (value.list.i != null || value.list.f != null) {\n          return getNumericArrayParam(this.node.rawAttrs, name, defaultValue);\n        }\n        if (value.list.s != null) {\n          return getStringArrayParam(this.node.rawAttrs, name, defaultValue);\n        }\n        if (value.list.shape != null) {\n          return getTensorShapeArrayParam(this.node.rawAttrs, name, defaultValue);\n        }\n        if (value.list.b != null) {\n          return getBoolArrayParam(this.node.rawAttrs, name, defaultValue);\n        }\n        if (value.list.type != null) {\n          return getDtypeArrayParam(this.node.rawAttrs, name, defaultValue);\n        }\n      }\n      return defaultValue;\n    }\n  }]);\n  return NodeValueImpl;\n}();","map":{"version":3,"names":["getTensor","getBoolArrayParam","getBoolParam","getDtypeArrayParam","getDtypeParam","getNumberParam","getNumericArrayParam","getStringArrayParam","getStringParam","getTensorShapeArrayParam","getTensorShapeParam","NodeValueImpl","node","tensorMap","context","_this","_classCallCheck","inputs","attrs","inputNames","map","name","getInput","rawAttrs","Object","keys","reduce","key","getAttr","_createClass","value","defaultValue","tensor","i","f","s","b","shape","type","list"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-converter\\src\\operations\\custom_op\\node_value_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {getTensor} from '../executors/utils';\nimport {getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam} from '../operation_mapper';\nimport {GraphNode, Node, ValueType} from '../types';\n\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\nexport class NodeValueImpl implements GraphNode {\n  public readonly inputs: Tensor[] = [];\n  public readonly attrs: {[key: string]: ValueType} = {};\n  constructor(\n      private node: Node, private tensorMap: NamedTensorsMap,\n      private context: ExecutionContext) {\n    this.inputs = node.inputNames.map(name => this.getInput(name));\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs)\n                       .reduce((attrs: {[key: string]: ValueType}, key) => {\n                         attrs[key] = this.getAttr(key);\n                         return attrs;\n                       }, {});\n    }\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getInput(name: string): Tensor {\n    return getTensor(name, this.tensorMap, this.context);\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getAttr(name: string, defaultValue?: ValueType): ValueType {\n    const value = this.node.rawAttrs[name];\n    if (value.tensor != null) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n    if (value.i != null || value.f != null) {\n      return getNumberParam(this.node.rawAttrs, name, defaultValue as number);\n    }\n    if (value.s != null) {\n      return getStringParam(this.node.rawAttrs, name, defaultValue as string);\n    }\n    if (value.b != null) {\n      return getBoolParam(this.node.rawAttrs, name, defaultValue as boolean);\n    }\n    if (value.shape != null) {\n      return getTensorShapeParam(\n          this.node.rawAttrs, name, defaultValue as number[]);\n    }\n    if (value.type != null) {\n      return getDtypeParam(this.node.rawAttrs, name, defaultValue as DataType);\n    }\n    if (value.list != null) {\n      if (value.list.i != null || value.list.f != null) {\n        return getNumericArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[]);\n      }\n      if (value.list.s != null) {\n        return getStringArrayParam(\n            this.node.rawAttrs, name, defaultValue as string[]);\n      }\n      if (value.list.shape != null) {\n        return getTensorShapeArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[][]);\n      }\n      if (value.list.b != null) {\n        return getBoolArrayParam(\n            this.node.rawAttrs, name, defaultValue as boolean[]);\n      }\n      if (value.list.type != null) {\n        return getDtypeArrayParam(\n            this.node.rawAttrs, name, defaultValue as DataType[]);\n      }\n    }\n\n    return defaultValue;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}