{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\r\n * @license\r\n * Copyright 2022 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { RaggedTensorToTensor } from '@tensorflow/tfjs-core';\nimport { raggedTensorToTensorImpl } from './RaggedTensorToTensor_impl';\nexport function raggedTensorToTensor(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var shape = inputs.shape,\n    values = inputs.values,\n    defaultValue = inputs.defaultValue,\n    rowPartitionTensors = inputs.rowPartitionTensors;\n  var rowPartitionTypes = attrs.rowPartitionTypes;\n  var $shape = backend.data.get(shape.dataId).values;\n  var $values = backend.data.get(values.dataId).values;\n  var $defaultValue = backend.data.get(defaultValue.dataId).values;\n  var $rowPartitionValues = rowPartitionTensors.map(function (t) {\n    return backend.data.get(t.dataId).values;\n  });\n  var rowPartitionValuesShapes = rowPartitionTensors.map(function (t) {\n    return t.shape;\n  });\n  var _raggedTensorToTensor = raggedTensorToTensorImpl($shape, shape.shape, $values, values.shape, values.dtype, $defaultValue, defaultValue.shape, $rowPartitionValues, rowPartitionValuesShapes, rowPartitionTypes),\n    _raggedTensorToTensor2 = _slicedToArray(_raggedTensorToTensor, 2),\n    outputShape = _raggedTensorToTensor2[0],\n    output = _raggedTensorToTensor2[1];\n  return backend.makeTensorInfo(outputShape, values.dtype, output);\n}\nexport var raggedTensorToTensorConfig = {\n  kernelName: RaggedTensorToTensor,\n  backendName: 'cpu',\n  kernelFunc: raggedTensorToTensor\n};","map":{"version":3,"names":["RaggedTensorToTensor","raggedTensorToTensorImpl","raggedTensorToTensor","args","inputs","backend","attrs","shape","values","defaultValue","rowPartitionTensors","rowPartitionTypes","$shape","data","get","dataId","$values","$defaultValue","$rowPartitionValues","map","t","rowPartitionValuesShapes","_raggedTensorToTensor","dtype","_raggedTensorToTensor2","_slicedToArray","outputShape","output","makeTensorInfo","raggedTensorToTensorConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-cpu\\src\\kernels\\RaggedTensorToTensor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedTensorToTensor, RaggedTensorToTensorAttrs, RaggedTensorToTensorInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {raggedTensorToTensorImpl} from './RaggedTensorToTensor_impl';\n\nexport function raggedTensorToTensor(args: {\n  inputs: RaggedTensorToTensorInputs,\n  backend: MathBackendCPU,\n  attrs: RaggedTensorToTensorAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {shape, values, defaultValue, rowPartitionTensors} = inputs;\n  const {rowPartitionTypes} = attrs;\n\n  const $shape = backend.data.get(shape.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values as TypedArray;\n  const $rowPartitionValues = rowPartitionTensors.map(\n      t => backend.data.get(t.dataId).values as TypedArray);\n  const rowPartitionValuesShapes = rowPartitionTensors.map(t => t.shape);\n\n  const [outputShape, output] = raggedTensorToTensorImpl(\n      $shape, shape.shape, $values, values.shape, values.dtype, $defaultValue,\n      defaultValue.shape, $rowPartitionValues, rowPartitionValuesShapes,\n      rowPartitionTypes);\n  return backend.makeTensorInfo(outputShape, values.dtype, output);\n}\n\nexport const raggedTensorToTensorConfig: KernelConfig = {\n  kernelName: RaggedTensorToTensor,\n  backendName: 'cpu',\n  kernelFunc: raggedTensorToTensor as unknown as KernelFunc,\n};\n"],"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,oBAAoB,QAAsF,uBAAuB;AAInK,SAAQC,wBAAwB,QAAO,6BAA6B;AAEpE,OAAM,SAAUC,oBAAoBA,CAACC,IAIpC;EACC,IAAOC,MAAM,GAAoBD,IAAI,CAA9BC,MAAM;IAAEC,OAAO,GAAWF,IAAI,CAAtBE,OAAO;IAAEC,KAAK,GAAIH,IAAI,CAAbG,KAAK;EAC7B,IAAOC,KAAK,GAA+CH,MAAM,CAA1DG,KAAK;IAAEC,MAAM,GAAuCJ,MAAM,CAAnDI,MAAM;IAAEC,YAAY,GAAyBL,MAAM,CAA3CK,YAAY;IAAEC,mBAAmB,GAAIN,MAAM,CAA7BM,mBAAmB;EACvD,IAAOC,iBAAiB,GAAIL,KAAK,CAA1BK,iBAAiB;EAExB,IAAMC,MAAM,GAAGP,OAAO,CAACQ,IAAI,CAACC,GAAG,CAACP,KAAK,CAACQ,MAAM,CAAC,CAACP,MAAoB;EAClE,IAAMQ,OAAO,GAAGX,OAAO,CAACQ,IAAI,CAACC,GAAG,CAACN,MAAM,CAACO,MAAM,CAAC,CAACP,MAAoB;EACpE,IAAMS,aAAa,GACfZ,OAAO,CAACQ,IAAI,CAACC,GAAG,CAACL,YAAY,CAACM,MAAM,CAAC,CAACP,MAAoB;EAC9D,IAAMU,mBAAmB,GAAGR,mBAAmB,CAACS,GAAG,CAC/C,UAAAC,CAAC;IAAA,OAAIf,OAAO,CAACQ,IAAI,CAACC,GAAG,CAACM,CAAC,CAACL,MAAM,CAAC,CAACP,MAAoB;EAAA,EAAC;EACzD,IAAMa,wBAAwB,GAAGX,mBAAmB,CAACS,GAAG,CAAC,UAAAC,CAAC;IAAA,OAAIA,CAAC,CAACb,KAAK;EAAA,EAAC;EAEtE,IAAAe,qBAAA,GAA8BrB,wBAAwB,CAClDW,MAAM,EAAEL,KAAK,CAACA,KAAK,EAAES,OAAO,EAAER,MAAM,CAACD,KAAK,EAAEC,MAAM,CAACe,KAAK,EAAEN,aAAa,EACvER,YAAY,CAACF,KAAK,EAAEW,mBAAmB,EAAEG,wBAAwB,EACjEV,iBAAiB,CAAC;IAAAa,sBAAA,GAAAC,cAAA,CAAAH,qBAAA;IAHfI,WAAW,GAAAF,sBAAA;IAAEG,MAAM,GAAAH,sBAAA;EAI1B,OAAOnB,OAAO,CAACuB,cAAc,CAACF,WAAW,EAAElB,MAAM,CAACe,KAAK,EAAEI,MAAM,CAAC;AAClE;AAEA,OAAO,IAAME,0BAA0B,GAAiB;EACtDC,UAAU,EAAE9B,oBAAoB;EAChC+B,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAE9B;CACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}