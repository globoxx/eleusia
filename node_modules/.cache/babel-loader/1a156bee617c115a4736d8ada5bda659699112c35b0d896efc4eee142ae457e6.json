{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _toConsumableArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { complex } from '../ops/complex';\nimport { tensor } from '../ops/tensor';\nimport { sizeFromShape } from '../util';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\nimport { CompositeArrayBuffer } from './composite_array_buffer';\n/** Number of bytes reserved for the length of the string. (32bit integer). */\nvar NUM_BYTES_STRING_LENGTH = 4;\n/**\n * Encode a map from names to weight values as an ArrayBuffer, along with an\n * `Array` of `WeightsManifestEntry` as specification of the encoded weights.\n *\n * This function does not perform sharding.\n *\n * This function is the reverse of `decodeWeights`.\n *\n * @param tensors A map (\"dict\") from names to tensors.\n * @param group Group to which the weights belong (optional).\n * @returns A `Promise` of\n *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s\n *     concatenated.\n *   - An `Array` of `WeightManifestEntry`s, carrying information including\n *     tensor names, `dtype`s and shapes.\n * @throws Error: on unsupported tensor `dtype`.\n */\nexport function encodeWeights(_x, _x2) {\n  return _encodeWeights.apply(this, arguments);\n}\n/**\n * Decode flat ArrayBuffer as weights.\n *\n * This function does not handle sharding.\n *\n * This function is the reverse of `encodeWeights`.\n *\n * @param weightData A flat ArrayBuffer or an array of ArrayBuffers carrying the\n *   binary values of the tensors concatenated in the order specified in\n *   `specs`.\n * @param specs Specifications of the names, dtypes and shapes of the tensors\n *   whose value are encoded by `buffer`.\n * @return A map from tensor name to tensor value, with the names corresponding\n *   to names in `specs`.\n * @throws Error, if any of the tensors has unsupported dtype.\n */\nfunction _encodeWeights() {\n  _encodeWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(tensors, group) {\n    var specs, dataPromises, names, _loop, i, tensorValues;\n    return _regeneratorRuntime().wrap(function _callee2$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          // TODO(adarob, cais): Support quantization.\n          specs = [];\n          dataPromises = [];\n          names = Array.isArray(tensors) ? tensors.map(function (tensor) {\n            return tensor.name;\n          }) : Object.keys(tensors);\n          _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n            var name, t, spec, utf8bytes;\n            return _regeneratorRuntime().wrap(function _loop$(_context2) {\n              while (1) switch (_context2.prev = _context2.next) {\n                case 0:\n                  name = names[i];\n                  t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\n                  if (!(t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' && t.dtype !== 'string' && t.dtype !== 'complex64')) {\n                    _context2.next = 4;\n                    break;\n                  }\n                  throw new Error(\"Unsupported dtype in weight '\".concat(name, \"': \").concat(t.dtype));\n                case 4:\n                  spec = {\n                    name: name,\n                    shape: t.shape,\n                    dtype: t.dtype\n                  };\n                  if (t.dtype === 'string') {\n                    utf8bytes = new Promise( /*#__PURE__*/function () {\n                      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve) {\n                        var vals, totalNumBytes, bytes, offset, _i6, val, bytesOfLength;\n                        return _regeneratorRuntime().wrap(function _callee$(_context) {\n                          while (1) switch (_context.prev = _context.next) {\n                            case 0:\n                              _context.next = 2;\n                              return t.bytes();\n                            case 2:\n                              vals = _context.sent;\n                              totalNumBytes = vals.reduce(function (p, c) {\n                                return p + c.length;\n                              }, 0) + NUM_BYTES_STRING_LENGTH * vals.length;\n                              bytes = new Uint8Array(totalNumBytes);\n                              offset = 0;\n                              for (_i6 = 0; _i6 < vals.length; _i6++) {\n                                val = vals[_i6];\n                                bytesOfLength = new Uint8Array(new Uint32Array([val.length]).buffer);\n                                bytes.set(bytesOfLength, offset);\n                                offset += NUM_BYTES_STRING_LENGTH;\n                                bytes.set(val, offset);\n                                offset += val.length;\n                              }\n                              resolve(bytes);\n                            case 8:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }, _callee);\n                      }));\n                      return function (_x5) {\n                        return _ref.apply(this, arguments);\n                      };\n                    }());\n                    dataPromises.push(utf8bytes);\n                  } else {\n                    dataPromises.push(t.data());\n                  }\n                  if (group != null) {\n                    spec.group = group;\n                  }\n                  specs.push(spec);\n                case 8:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }, _loop);\n          });\n          i = 0;\n        case 5:\n          if (!(i < names.length)) {\n            _context3.next = 10;\n            break;\n          }\n          return _context3.delegateYield(_loop(), \"t0\", 7);\n        case 7:\n          ++i;\n          _context3.next = 5;\n          break;\n        case 10:\n          _context3.next = 12;\n          return Promise.all(dataPromises);\n        case 12:\n          tensorValues = _context3.sent;\n          return _context3.abrupt(\"return\", {\n            data: concatenateTypedArrays(tensorValues),\n            specs: specs\n          });\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee2);\n  }));\n  return _encodeWeights.apply(this, arguments);\n}\nexport function decodeWeights(weightData, specs) {\n  // TODO(adarob, cais): Support quantization.\n  var compositeBuffer = new CompositeArrayBuffer(weightData);\n  var out = {};\n  var float16Decode;\n  var offset = 0;\n  var _iterator = _createForOfIteratorHelper(specs),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var spec = _step.value;\n      var name = spec.name;\n      var dtype = spec.dtype;\n      var shape = spec.shape;\n      var size = sizeFromShape(shape);\n      var values = void 0;\n      if ('quantization' in spec) {\n        var quantization = spec.quantization;\n        if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n          if (!('min' in quantization && 'scale' in quantization)) {\n            throw new Error(\"Weight \".concat(spec.name, \" with quantization \").concat(quantization.dtype, \" \") + \"doesn't have corresponding metadata min and scale.\");\n          }\n        } else if (quantization.dtype === 'float16') {\n          if (dtype !== 'float32') {\n            throw new Error(\"Weight \".concat(spec.name, \" is quantized with \").concat(quantization.dtype, \" \") + \"which only supports weights of type float32 not \".concat(dtype, \".\"));\n          }\n        } else {\n          throw new Error(\"Weight \".concat(spec.name, \" has unknown \") + \"quantization dtype \".concat(quantization.dtype, \". \") + \"Supported quantization dtypes are: \" + \"'uint8', 'uint16', and 'float16'.\");\n        }\n        var quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n        var byteBuffer = compositeBuffer.slice(offset, offset + size * quantizationSizeFactor);\n        var quantizedArray = quantization.dtype === 'uint8' ? new Uint8Array(byteBuffer) : new Uint16Array(byteBuffer);\n        if (dtype === 'float32') {\n          if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n            values = new Float32Array(quantizedArray.length);\n            for (var i = 0; i < quantizedArray.length; i++) {\n              var v = quantizedArray[i];\n              values[i] = v * quantization.scale + quantization.min;\n            }\n          } else if (quantization.dtype === 'float16') {\n            if (float16Decode === undefined) {\n              float16Decode = getFloat16Decoder();\n            }\n            values = float16Decode(quantizedArray);\n          } else {\n            throw new Error(\"Unsupported quantization type \".concat(quantization.dtype, \" \") + \"for weight type float32.\");\n          }\n        } else if (dtype === 'int32') {\n          if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {\n            throw new Error(\"Unsupported quantization type \".concat(quantization.dtype, \" \") + \"for weight type int32.\");\n          }\n          values = new Int32Array(quantizedArray.length);\n          for (var _i = 0; _i < quantizedArray.length; _i++) {\n            var _v = quantizedArray[_i];\n            values[_i] = Math.round(_v * quantization.scale + quantization.min);\n          }\n        } else {\n          throw new Error(\"Unsupported dtype in weight '\".concat(name, \"': \").concat(dtype));\n        }\n        offset += size * quantizationSizeFactor;\n      } else if (dtype === 'string') {\n        var _size = sizeFromShape(spec.shape);\n        values = [];\n        for (var _i2 = 0; _i2 < _size; _i2++) {\n          var byteLength = new Uint32Array(compositeBuffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\n          offset += NUM_BYTES_STRING_LENGTH;\n          var bytes = new Uint8Array(compositeBuffer.slice(offset, offset + byteLength));\n          values.push(bytes);\n          offset += byteLength;\n        }\n      } else {\n        var dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\n        var _byteBuffer = compositeBuffer.slice(offset, offset + size * dtypeFactor);\n        if (dtype === 'float32') {\n          values = new Float32Array(_byteBuffer);\n        } else if (dtype === 'int32') {\n          values = new Int32Array(_byteBuffer);\n        } else if (dtype === 'bool') {\n          values = new Uint8Array(_byteBuffer);\n        } else if (dtype === 'complex64') {\n          values = new Float32Array(_byteBuffer);\n          var real = new Float32Array(values.length / 2);\n          var image = new Float32Array(values.length / 2);\n          for (var _i3 = 0; _i3 < real.length; _i3++) {\n            real[_i3] = values[_i3 * 2];\n            image[_i3] = values[_i3 * 2 + 1];\n          }\n          var realTensor = tensor(real, shape, 'float32');\n          var imageTensor = tensor(image, shape, 'float32');\n          out[name] = complex(realTensor, imageTensor);\n          realTensor.dispose();\n          imageTensor.dispose();\n        } else {\n          throw new Error(\"Unsupported dtype in weight '\".concat(name, \"': \").concat(dtype));\n        }\n        offset += size * dtypeFactor;\n      }\n      if (dtype !== 'complex64') {\n        out[name] = tensor(values, shape, dtype);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return out;\n}\n/**\n * Concatenate TypedArrays into an ArrayBuffer.\n */\nexport function concatenateTypedArrays(xs) {\n  // TODO(adarob, cais): Support quantization.\n  if (xs === null) {\n    throw new Error(\"Invalid input value: \".concat(JSON.stringify(xs)));\n  }\n  var totalByteLength = 0;\n  // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'\n  // can have a different byte length from that of the `TypedArray` itself,\n  // for example, when the `TypedArray` is created from an offset in an\n  // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match\n  // the `TypedArray` in byte length. If an element of `xs` does not show\n  // this property, a new `TypedArray` that satisfy this property will be\n  // constructed and pushed into `normalizedXs`.\n  var normalizedXs = [];\n  xs.forEach(function (x) {\n    totalByteLength += x.byteLength;\n    // tslint:disable:no-any\n    normalizedXs.push(x.byteLength === x.buffer.byteLength ? x : new x.constructor(x));\n    if (!(x instanceof Float32Array || x instanceof Int32Array || x instanceof Uint8Array)) {\n      throw new Error(\"Unsupported TypedArray subtype: \".concat(x.constructor.name));\n    }\n    // tslint:enable:no-any\n  });\n\n  var y = new Uint8Array(totalByteLength);\n  var offset = 0;\n  normalizedXs.forEach(function (x) {\n    y.set(new Uint8Array(x.buffer), offset);\n    offset += x.byteLength;\n  });\n  return y.buffer;\n}\n// Use Buffer on Node.js instead of Blob/atob/btoa\nvar useNodeBuffer = typeof Buffer !== 'undefined' && (typeof Blob === 'undefined' || typeof atob === 'undefined' || typeof btoa === 'undefined');\n/**\n * Calculate the byte length of a JavaScript string.\n *\n * Note that a JavaScript string can contain wide characters, therefore the\n * length of the string is not necessarily equal to the byte length.\n *\n * @param str Input string.\n * @returns Byte length.\n */\nexport function stringByteLength(str) {\n  if (useNodeBuffer) {\n    return Buffer.byteLength(str, 'utf8');\n  }\n  return new Blob([str]).size;\n}\n/**\n * Encode an ArrayBuffer as a base64 encoded string.\n *\n * @param buffer `ArrayBuffer` to be converted.\n * @returns A string that base64-encodes `buffer`.\n */\nexport function arrayBufferToBase64String(buffer) {\n  if (useNodeBuffer) {\n    return Buffer.from(buffer).toString('base64');\n  }\n  var buf = new Uint8Array(buffer);\n  var s = '';\n  for (var i = 0, l = buf.length; i < l; i++) {\n    s += String.fromCharCode(buf[i]);\n  }\n  return btoa(s);\n}\n/**\n * Decode a base64 string as an ArrayBuffer.\n *\n * @param str Base64 string.\n * @returns Decoded `ArrayBuffer`.\n */\nexport function base64StringToArrayBuffer(str) {\n  if (useNodeBuffer) {\n    var buf = Buffer.from(str, 'base64');\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n  }\n  var s = atob(str);\n  var buffer = new Uint8Array(s.length);\n  for (var i = 0; i < s.length; ++i) {\n    buffer.set([s.charCodeAt(i)], i);\n  }\n  return buffer.buffer;\n}\n/**\n * Concatenate a number of ArrayBuffers into one.\n *\n * @param buffers An array of ArrayBuffers to concatenate, or a single\n *     ArrayBuffer.\n * @returns Result of concatenating `buffers` in order.\n *\n * @deprecated Use tf.io.CompositeArrayBuffer.join() instead.\n */\nexport function concatenateArrayBuffers(buffers) {\n  return CompositeArrayBuffer.join(buffers);\n}\n/**\n * Get the basename of a path.\n *\n * Behaves in a way analogous to Linux's basename command.\n *\n * @param path\n */\nexport function basename(path) {\n  var SEPARATOR = '/';\n  path = path.trim();\n  while (path.endsWith(SEPARATOR)) {\n    path = path.slice(0, path.length - 1);\n  }\n  var items = path.split(SEPARATOR);\n  return items[items.length - 1];\n}\n/**\n * Create `ModelJSON` from `ModelArtifacts`.\n *\n * @param artifacts Model artifacts, describing the model and its weights.\n * @param manifest Weight manifest, describing where the weights of the\n *     `ModelArtifacts` are stored, and some metadata about them.\n * @returns Object representing the `model.json` file describing the model\n *     artifacts and weights\n */\nexport function getModelJSONForModelArtifacts(artifacts, manifest) {\n  var result = {\n    modelTopology: artifacts.modelTopology,\n    format: artifacts.format,\n    generatedBy: artifacts.generatedBy,\n    convertedBy: artifacts.convertedBy,\n    weightsManifest: manifest\n  };\n  if (artifacts.signature != null) {\n    result.signature = artifacts.signature;\n  }\n  if (artifacts.userDefinedMetadata != null) {\n    result.userDefinedMetadata = artifacts.userDefinedMetadata;\n  }\n  if (artifacts.modelInitializer != null) {\n    result.modelInitializer = artifacts.modelInitializer;\n  }\n  if (artifacts.initializerSignature != null) {\n    result.initializerSignature = artifacts.initializerSignature;\n  }\n  if (artifacts.trainingConfig != null) {\n    result.trainingConfig = artifacts.trainingConfig;\n  }\n  return result;\n}\n/**\n * Create `ModelArtifacts` from a JSON file and weights.\n *\n * @param modelJSON Object containing the parsed JSON of `model.json`\n * @param weightSpecs The list of WeightsManifestEntry for the model. Must be\n *     passed if the modelJSON has a weightsManifest.\n * @param weightData An ArrayBuffer or array of ArrayBuffers of weight data for\n *     the model corresponding to the weights in weightSpecs. Must be passed if\n *     the modelJSON has a weightsManifest.\n * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.\n */\nexport function getModelArtifactsForJSONSync(modelJSON, weightSpecs, weightData) {\n  var modelArtifacts = {\n    modelTopology: modelJSON.modelTopology,\n    format: modelJSON.format,\n    generatedBy: modelJSON.generatedBy,\n    convertedBy: modelJSON.convertedBy\n  };\n  if (modelJSON.trainingConfig != null) {\n    modelArtifacts.trainingConfig = modelJSON.trainingConfig;\n  }\n  if (modelJSON.weightsManifest != null) {\n    if (!weightSpecs) {\n      throw new Error('modelJSON has weightsManifest but weightSpecs is null');\n    }\n    if (!weightData) {\n      throw new Error('modelJSON has weightsManifest but weightData is null');\n    }\n    modelArtifacts.weightSpecs = weightSpecs;\n    modelArtifacts.weightData = weightData;\n  }\n  if (modelJSON.signature != null) {\n    modelArtifacts.signature = modelJSON.signature;\n  }\n  if (modelJSON.userDefinedMetadata != null) {\n    modelArtifacts.userDefinedMetadata = modelJSON.userDefinedMetadata;\n  }\n  if (modelJSON.modelInitializer != null) {\n    modelArtifacts.modelInitializer = modelJSON.modelInitializer;\n  }\n  if (modelJSON.initializerSignature != null) {\n    modelArtifacts.initializerSignature = modelJSON.initializerSignature;\n  }\n  return modelArtifacts;\n}\n/**\n * Create `ModelArtifacts` from a JSON file.\n *\n * @param modelJSON Object containing the parsed JSON of `model.json`\n * @param loadWeights Function that takes the JSON file's weights manifest,\n *     reads weights from the listed path(s), and returns a Promise of the\n *     weight manifest entries along with the weights data.\n * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.\n */\nexport function getModelArtifactsForJSON(_x3, _x4) {\n  return _getModelArtifactsForJSON.apply(this, arguments);\n}\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\nfunction _getModelArtifactsForJSON() {\n  _getModelArtifactsForJSON = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(modelJSON, loadWeights) {\n    var weightSpecs, weightData, _yield$loadWeights, _yield$loadWeights2;\n    return _regeneratorRuntime().wrap(function _callee3$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!(modelJSON.weightsManifest != null)) {\n            _context4.next = 7;\n            break;\n          }\n          _context4.next = 3;\n          return loadWeights(modelJSON.weightsManifest);\n        case 3:\n          _yield$loadWeights = _context4.sent;\n          _yield$loadWeights2 = _slicedToArray(_yield$loadWeights, 2);\n          weightSpecs = _yield$loadWeights2[0];\n          weightData = _yield$loadWeights2[1];\n        case 7:\n          return _context4.abrupt(\"return\", getModelArtifactsForJSONSync(modelJSON, weightSpecs, weightData));\n        case 8:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee3);\n  }));\n  return _getModelArtifactsForJSON.apply(this, arguments);\n}\nexport function getModelArtifactsInfoForJSON(modelArtifacts) {\n  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n    throw new Error('Expected JSON model topology, received ArrayBuffer.');\n  }\n  return {\n    dateSaved: new Date(),\n    modelTopologyType: 'JSON',\n    modelTopologyBytes: modelArtifacts.modelTopology == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\n    weightSpecsBytes: modelArtifacts.weightSpecs == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\n    weightDataBytes: modelArtifacts.weightData == null ? 0 : new CompositeArrayBuffer(modelArtifacts.weightData).byteLength\n  };\n}\n/**\n * Concatenate the weights stored in a WeightsManifestConfig into a list of\n * WeightsManifestEntry\n *\n * @param weightsManifest The WeightsManifestConfig to extract weights from.\n * @returns A list of WeightsManifestEntry of the weights in the weightsManifest\n */\nexport function getWeightSpecs(weightsManifest) {\n  var weightSpecs = [];\n  var _iterator2 = _createForOfIteratorHelper(weightsManifest),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var entry = _step2.value;\n      weightSpecs.push.apply(weightSpecs, _toConsumableArray(entry.weights));\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return weightSpecs;\n}\n/**\n * Computes mantisa table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 2048 mantissa lookup values.\n */\nfunction computeFloat16MantisaTable() {\n  var convertMantissa = function convertMantissa(i) {\n    var m = i << 13;\n    var e = 0;\n    while ((m & 0x00800000) === 0) {\n      e -= 0x00800000;\n      m <<= 1;\n    }\n    m &= ~0x00800000;\n    e += 0x38800000;\n    return m | e;\n  };\n  var mantisaTable = new Uint32Array(2048);\n  mantisaTable[0] = 0;\n  for (var i = 1; i < 1024; i++) {\n    mantisaTable[i] = convertMantissa(i);\n  }\n  for (var _i4 = 1024; _i4 < 2048; _i4++) {\n    mantisaTable[_i4] = 0x38000000 + (_i4 - 1024 << 13);\n  }\n  return mantisaTable;\n}\n/**\n * Computes exponent table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 64 exponent lookup values.\n */\nfunction computeFloat16ExponentTable() {\n  var exponentTable = new Uint32Array(64);\n  exponentTable[0] = 0;\n  exponentTable[31] = 0x47800000;\n  exponentTable[32] = 0x80000000;\n  exponentTable[63] = 0xc7800000;\n  for (var i = 1; i < 31; i++) {\n    exponentTable[i] = i << 23;\n  }\n  for (var _i5 = 33; _i5 < 63; _i5++) {\n    exponentTable[_i5] = 0x80000000 + (_i5 - 32 << 23);\n  }\n  return exponentTable;\n}\n/**\n * Computes offset table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 6d offset values.\n */\nfunction computeFloat16OffsetTable() {\n  var offsetTable = new Uint32Array(64);\n  for (var i = 0; i < 64; i++) {\n    offsetTable[i] = 1024;\n  }\n  offsetTable[0] = offsetTable[32] = 0;\n  return offsetTable;\n}\n/**\n * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values\n * to a Float32Array.\n *\n * @returns Function (buffer: Uint16Array) => Float32Array which decodes\n *          the Uint16Array of Float16 bytes to a Float32Array.\n */\nexport function getFloat16Decoder() {\n  // Algorithm is based off of\n  // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n  // Cache lookup tables\n  var mantisaTable = computeFloat16MantisaTable();\n  var exponentTable = computeFloat16ExponentTable();\n  var offsetTable = computeFloat16OffsetTable();\n  return function (quantizedArray) {\n    var buffer = new ArrayBuffer(4 * quantizedArray.length);\n    var bufferUint32View = new Uint32Array(buffer);\n    for (var index = 0; index < quantizedArray.length; index++) {\n      var float16Bits = quantizedArray[index];\n      var float32Bits = mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] + exponentTable[float16Bits >> 10];\n      bufferUint32View[index] = float32Bits;\n    }\n    return new Float32Array(buffer);\n  };\n}","map":{"version":3,"names":["complex","tensor","sizeFromShape","DTYPE_VALUE_SIZE_MAP","CompositeArrayBuffer","NUM_BYTES_STRING_LENGTH","encodeWeights","_x","_x2","_encodeWeights","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","tensors","group","specs","dataPromises","names","_loop","i","tensorValues","wrap","_callee2$","_context3","prev","next","Array","isArray","map","name","Object","keys","t","spec","utf8bytes","_loop$","_context2","dtype","Error","concat","shape","Promise","_ref","_callee","resolve","vals","totalNumBytes","bytes","offset","_i6","val","bytesOfLength","_callee$","_context","sent","reduce","p","c","length","Uint8Array","Uint32Array","buffer","set","stop","_x5","push","data","delegateYield","all","abrupt","concatenateTypedArrays","decodeWeights","weightData","compositeBuffer","out","float16Decode","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","size","values","quantization","quantizationSizeFactor","byteBuffer","slice","quantizedArray","Uint16Array","Float32Array","v","scale","min","undefined","getFloat16Decoder","Int32Array","Math","round","byteLength","dtypeFactor","real","image","realTensor","imageTensor","dispose","err","e","f","xs","JSON","stringify","totalByteLength","normalizedXs","forEach","x","constructor","y","useNodeBuffer","Buffer","Blob","atob","btoa","stringByteLength","str","arrayBufferToBase64String","from","toString","buf","l","String","fromCharCode","base64StringToArrayBuffer","byteOffset","charCodeAt","concatenateArrayBuffers","buffers","join","basename","path","SEPARATOR","trim","endsWith","items","split","getModelJSONForModelArtifacts","artifacts","manifest","result","modelTopology","format","generatedBy","convertedBy","weightsManifest","signature","userDefinedMetadata","modelInitializer","initializerSignature","trainingConfig","getModelArtifactsForJSONSync","modelJSON","weightSpecs","modelArtifacts","getModelArtifactsForJSON","_x3","_x4","_getModelArtifactsForJSON","_callee3","loadWeights","_yield$loadWeights","_yield$loadWeights2","_callee3$","_context4","_slicedToArray","getModelArtifactsInfoForJSON","ArrayBuffer","dateSaved","Date","modelTopologyType","modelTopologyBytes","weightSpecsBytes","weightDataBytes","getWeightSpecs","_iterator2","_step2","entry","_toConsumableArray","weights","computeFloat16MantisaTable","convertMantissa","m","mantisaTable","computeFloat16ExponentTable","exponentTable","computeFloat16OffsetTable","offsetTable","bufferUint32View","index","float16Bits","float32Bits"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\io\\io_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {complex} from '../ops/complex';\nimport {tensor} from '../ops/tensor';\nimport {NamedTensor, NamedTensorMap} from '../tensor_types';\nimport {TypedArray} from '../types';\nimport {sizeFromShape} from '../util';\n\nimport {DTYPE_VALUE_SIZE_MAP, ModelArtifacts, ModelArtifactsInfo, ModelJSON, WeightData, WeightGroup, WeightsManifestConfig, WeightsManifestEntry} from './types';\nimport {CompositeArrayBuffer} from './composite_array_buffer';\n\n/** Number of bytes reserved for the length of the string. (32bit integer). */\nconst NUM_BYTES_STRING_LENGTH = 4;\n\n/**\n * Encode a map from names to weight values as an ArrayBuffer, along with an\n * `Array` of `WeightsManifestEntry` as specification of the encoded weights.\n *\n * This function does not perform sharding.\n *\n * This function is the reverse of `decodeWeights`.\n *\n * @param tensors A map (\"dict\") from names to tensors.\n * @param group Group to which the weights belong (optional).\n * @returns A `Promise` of\n *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s\n *     concatenated.\n *   - An `Array` of `WeightManifestEntry`s, carrying information including\n *     tensor names, `dtype`s and shapes.\n * @throws Error: on unsupported tensor `dtype`.\n */\nexport async function encodeWeights(\n    tensors: NamedTensorMap|NamedTensor[], group?: WeightGroup):\n    Promise<{data: ArrayBuffer, specs: WeightsManifestEntry[]}> {\n  // TODO(adarob, cais): Support quantization.\n  const specs: WeightsManifestEntry[] = [];\n  const dataPromises: Array<Promise<TypedArray>> = [];\n\n  const names: string[] = Array.isArray(tensors) ?\n      tensors.map(tensor => tensor.name) :\n      Object.keys(tensors);\n\n  for (let i = 0; i < names.length; ++i) {\n    const name = names[i];\n    const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\n    if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' &&\n        t.dtype !== 'string' && t.dtype !== 'complex64') {\n      throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);\n    }\n    const spec: WeightsManifestEntry = {name, shape: t.shape, dtype: t.dtype};\n    if (t.dtype === 'string') {\n      const utf8bytes = new Promise<TypedArray>(async resolve => {\n        const vals = await t.bytes() as Uint8Array[];\n        const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) +\n            NUM_BYTES_STRING_LENGTH * vals.length;\n        const bytes = new Uint8Array(totalNumBytes);\n        let offset = 0;\n        for (let i = 0; i < vals.length; i++) {\n          const val = vals[i];\n          const bytesOfLength =\n              new Uint8Array(new Uint32Array([val.length]).buffer);\n          bytes.set(bytesOfLength, offset);\n          offset += NUM_BYTES_STRING_LENGTH;\n          bytes.set(val, offset);\n          offset += val.length;\n        }\n        resolve(bytes);\n      });\n      dataPromises.push(utf8bytes);\n    } else {\n      dataPromises.push(t.data());\n    }\n    if (group != null) {\n      spec.group = group;\n    }\n    specs.push(spec);\n  }\n\n  const tensorValues = await Promise.all(dataPromises);\n  return {data: concatenateTypedArrays(tensorValues), specs};\n}\n\n/**\n * Decode flat ArrayBuffer as weights.\n *\n * This function does not handle sharding.\n *\n * This function is the reverse of `encodeWeights`.\n *\n * @param weightData A flat ArrayBuffer or an array of ArrayBuffers carrying the\n *   binary values of the tensors concatenated in the order specified in\n *   `specs`.\n * @param specs Specifications of the names, dtypes and shapes of the tensors\n *   whose value are encoded by `buffer`.\n * @return A map from tensor name to tensor value, with the names corresponding\n *   to names in `specs`.\n * @throws Error, if any of the tensors has unsupported dtype.\n */\nexport function decodeWeights(\n    weightData: WeightData,\n    specs: WeightsManifestEntry[]): NamedTensorMap {\n  // TODO(adarob, cais): Support quantization.\n  const compositeBuffer = new CompositeArrayBuffer(weightData);\n  const out: NamedTensorMap = {};\n  let float16Decode: (buffer: Uint16Array) => Float32Array | undefined;\n  let offset = 0;\n  for (const spec of specs) {\n    const name = spec.name;\n    const dtype = spec.dtype;\n    const shape = spec.shape;\n    const size = sizeFromShape(shape);\n    let values: TypedArray|string[]|Uint8Array[];\n\n    if ('quantization' in spec) {\n      const quantization = spec.quantization;\n      if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n        if (!('min' in quantization && 'scale' in quantization)) {\n          throw new Error(\n              `Weight ${spec.name} with quantization ${quantization.dtype} ` +\n              `doesn't have corresponding metadata min and scale.`);\n        }\n      } else if (quantization.dtype === 'float16') {\n        if (dtype !== 'float32') {\n          throw new Error(\n              `Weight ${spec.name} is quantized with ${quantization.dtype} ` +\n              `which only supports weights of type float32 not ${dtype}.`);\n        }\n      } else {\n        throw new Error(\n            `Weight ${spec.name} has unknown ` +\n            `quantization dtype ${quantization.dtype}. ` +\n            `Supported quantization dtypes are: ` +\n            `'uint8', 'uint16', and 'float16'.`);\n      }\n      const quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n      const byteBuffer =\n          compositeBuffer.slice(offset, offset + size * quantizationSizeFactor);\n      const quantizedArray = (quantization.dtype === 'uint8') ?\n          new Uint8Array(byteBuffer) :\n          new Uint16Array(byteBuffer);\n      if (dtype === 'float32') {\n        if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n          values = new Float32Array(quantizedArray.length);\n          for (let i = 0; i < quantizedArray.length; i++) {\n            const v = quantizedArray[i];\n            values[i] = v * quantization.scale + quantization.min;\n          }\n        } else if (quantization.dtype === 'float16') {\n          if (float16Decode === undefined) {\n            float16Decode = getFloat16Decoder();\n          }\n          values = float16Decode(quantizedArray as Uint16Array);\n        } else {\n          throw new Error(\n              `Unsupported quantization type ${quantization.dtype} ` +\n              `for weight type float32.`);\n        }\n      } else if (dtype === 'int32') {\n        if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {\n          throw new Error(\n              `Unsupported quantization type ${quantization.dtype} ` +\n              `for weight type int32.`);\n        }\n        values = new Int32Array(quantizedArray.length);\n        for (let i = 0; i < quantizedArray.length; i++) {\n          const v = quantizedArray[i];\n          values[i] = Math.round(v * quantization.scale + quantization.min);\n        }\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n      offset += size * quantizationSizeFactor;\n    } else if (dtype === 'string') {\n      const size = sizeFromShape(spec.shape);\n      values = [];\n      for (let i = 0; i < size; i++) {\n        const byteLength = new Uint32Array(\n            compositeBuffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\n        offset += NUM_BYTES_STRING_LENGTH;\n        const bytes = new Uint8Array(\n          compositeBuffer.slice(offset, offset + byteLength));\n        (values as Uint8Array[]).push(bytes);\n        offset += byteLength;\n      }\n    } else {\n      const dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\n      const byteBuffer = compositeBuffer.slice(offset,\n                                               offset + size * dtypeFactor);\n\n      if (dtype === 'float32') {\n        values = new Float32Array(byteBuffer);\n      } else if (dtype === 'int32') {\n        values = new Int32Array(byteBuffer);\n      } else if (dtype === 'bool') {\n        values = new Uint8Array(byteBuffer);\n      } else if (dtype === 'complex64') {\n        values = new Float32Array(byteBuffer);\n        const real = new Float32Array(values.length / 2);\n        const image = new Float32Array(values.length / 2);\n        for (let i = 0; i < real.length; i++) {\n          real[i] = values[i * 2];\n          image[i] = values[i * 2 + 1];\n        }\n        const realTensor = tensor(real, shape, 'float32');\n        const imageTensor = tensor(image, shape, 'float32');\n        out[name] = complex(realTensor, imageTensor);\n        realTensor.dispose();\n        imageTensor.dispose();\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n      offset += size * dtypeFactor;\n    }\n    if (dtype !== 'complex64') {\n      out[name] = tensor(values, shape, dtype);\n    }\n  }\n  return out;\n}\n\n/**\n * Concatenate TypedArrays into an ArrayBuffer.\n */\nexport function concatenateTypedArrays(xs: TypedArray[]): ArrayBuffer {\n  // TODO(adarob, cais): Support quantization.\n  if (xs === null) {\n    throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);\n  }\n\n  let totalByteLength = 0;\n\n  // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'\n  // can have a different byte length from that of the `TypedArray` itself,\n  // for example, when the `TypedArray` is created from an offset in an\n  // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match\n  // the `TypedArray` in byte length. If an element of `xs` does not show\n  // this property, a new `TypedArray` that satisfy this property will be\n  // constructed and pushed into `normalizedXs`.\n  const normalizedXs: TypedArray[] = [];\n  xs.forEach((x: TypedArray) => {\n    totalByteLength += x.byteLength;\n    // tslint:disable:no-any\n    normalizedXs.push(\n        x.byteLength === x.buffer.byteLength ? x :\n                                               new (x.constructor as any)(x));\n    if (!(x as any instanceof Float32Array || x as any instanceof Int32Array ||\n          x as any instanceof Uint8Array)) {\n      throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);\n    }\n    // tslint:enable:no-any\n  });\n\n  const y = new Uint8Array(totalByteLength);\n  let offset = 0;\n  normalizedXs.forEach((x: TypedArray) => {\n    y.set(new Uint8Array(x.buffer), offset);\n    offset += x.byteLength;\n  });\n\n  return y.buffer;\n}\n\n// Use Buffer on Node.js instead of Blob/atob/btoa\nconst useNodeBuffer = typeof Buffer !== 'undefined' &&\n    (typeof Blob === 'undefined' || typeof atob === 'undefined' ||\n     typeof btoa === 'undefined');\n\n/**\n * Calculate the byte length of a JavaScript string.\n *\n * Note that a JavaScript string can contain wide characters, therefore the\n * length of the string is not necessarily equal to the byte length.\n *\n * @param str Input string.\n * @returns Byte length.\n */\nexport function stringByteLength(str: string): number {\n  if (useNodeBuffer) {\n    return Buffer.byteLength(str, 'utf8');\n  }\n  return new Blob([str]).size;\n}\n\n/**\n * Encode an ArrayBuffer as a base64 encoded string.\n *\n * @param buffer `ArrayBuffer` to be converted.\n * @returns A string that base64-encodes `buffer`.\n */\nexport function arrayBufferToBase64String(buffer: ArrayBuffer): string {\n  if (useNodeBuffer) {\n    return Buffer.from(buffer).toString('base64');\n  }\n  const buf = new Uint8Array(buffer);\n  let s = '';\n  for (let i = 0, l = buf.length; i < l; i++) {\n    s += String.fromCharCode(buf[i]);\n  }\n  return btoa(s);\n}\n\n/**\n * Decode a base64 string as an ArrayBuffer.\n *\n * @param str Base64 string.\n * @returns Decoded `ArrayBuffer`.\n */\nexport function base64StringToArrayBuffer(str: string): ArrayBuffer {\n  if (useNodeBuffer) {\n    const buf = Buffer.from(str, 'base64');\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n  }\n  const s = atob(str);\n  const buffer = new Uint8Array(s.length);\n  for (let i = 0; i < s.length; ++i) {\n    buffer.set([s.charCodeAt(i)], i);\n  }\n  return buffer.buffer;\n}\n\n/**\n * Concatenate a number of ArrayBuffers into one.\n *\n * @param buffers An array of ArrayBuffers to concatenate, or a single\n *     ArrayBuffer.\n * @returns Result of concatenating `buffers` in order.\n *\n * @deprecated Use tf.io.CompositeArrayBuffer.join() instead.\n */\nexport function concatenateArrayBuffers(buffers: ArrayBuffer[]\n      | ArrayBuffer): ArrayBuffer {\n  return CompositeArrayBuffer.join(buffers);\n}\n\n/**\n * Get the basename of a path.\n *\n * Behaves in a way analogous to Linux's basename command.\n *\n * @param path\n */\nexport function basename(path: string): string {\n  const SEPARATOR = '/';\n  path = path.trim();\n  while (path.endsWith(SEPARATOR)) {\n    path = path.slice(0, path.length - 1);\n  }\n  const items = path.split(SEPARATOR);\n  return items[items.length - 1];\n}\n\n/**\n * Create `ModelJSON` from `ModelArtifacts`.\n *\n * @param artifacts Model artifacts, describing the model and its weights.\n * @param manifest Weight manifest, describing where the weights of the\n *     `ModelArtifacts` are stored, and some metadata about them.\n * @returns Object representing the `model.json` file describing the model\n *     artifacts and weights\n */\nexport function getModelJSONForModelArtifacts(\n    artifacts: ModelArtifacts, manifest: WeightsManifestConfig): ModelJSON {\n  const result: ModelJSON = {\n    modelTopology: artifacts.modelTopology,\n    format: artifacts.format,\n    generatedBy: artifacts.generatedBy,\n    convertedBy: artifacts.convertedBy,\n    weightsManifest: manifest\n  };\n  if (artifacts.signature != null) {\n    result.signature = artifacts.signature;\n  }\n  if (artifacts.userDefinedMetadata != null) {\n    result.userDefinedMetadata = artifacts.userDefinedMetadata;\n  }\n  if (artifacts.modelInitializer != null) {\n    result.modelInitializer = artifacts.modelInitializer;\n  }\n  if (artifacts.initializerSignature != null) {\n    result.initializerSignature = artifacts.initializerSignature;\n  }\n  if (artifacts.trainingConfig != null) {\n    result.trainingConfig = artifacts.trainingConfig;\n  }\n  return result;\n}\n\n/**\n * Create `ModelArtifacts` from a JSON file and weights.\n *\n * @param modelJSON Object containing the parsed JSON of `model.json`\n * @param weightSpecs The list of WeightsManifestEntry for the model. Must be\n *     passed if the modelJSON has a weightsManifest.\n * @param weightData An ArrayBuffer or array of ArrayBuffers of weight data for\n *     the model corresponding to the weights in weightSpecs. Must be passed if\n *     the modelJSON has a weightsManifest.\n * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.\n */\nexport function getModelArtifactsForJSONSync(\n    modelJSON: ModelJSON, weightSpecs?: WeightsManifestEntry[],\n    weightData?: WeightData): ModelArtifacts {\n\n  const modelArtifacts: ModelArtifacts = {\n    modelTopology: modelJSON.modelTopology,\n    format: modelJSON.format,\n    generatedBy: modelJSON.generatedBy,\n    convertedBy: modelJSON.convertedBy\n  };\n\n  if (modelJSON.trainingConfig != null) {\n    modelArtifacts.trainingConfig = modelJSON.trainingConfig;\n  }\n  if (modelJSON.weightsManifest != null) {\n    if (!weightSpecs) {\n      throw new Error('modelJSON has weightsManifest but weightSpecs is null');\n    }\n    if (!weightData) {\n      throw new Error('modelJSON has weightsManifest but weightData is null');\n    }\n    modelArtifacts.weightSpecs = weightSpecs;\n    modelArtifacts.weightData = weightData;\n  }\n  if (modelJSON.signature != null) {\n    modelArtifacts.signature = modelJSON.signature;\n  }\n  if (modelJSON.userDefinedMetadata != null) {\n    modelArtifacts.userDefinedMetadata = modelJSON.userDefinedMetadata;\n  }\n  if (modelJSON.modelInitializer != null) {\n    modelArtifacts.modelInitializer = modelJSON.modelInitializer;\n  }\n  if (modelJSON.initializerSignature != null) {\n    modelArtifacts.initializerSignature = modelJSON.initializerSignature;\n  }\n\n  return modelArtifacts;\n}\n\n/**\n * Create `ModelArtifacts` from a JSON file.\n *\n * @param modelJSON Object containing the parsed JSON of `model.json`\n * @param loadWeights Function that takes the JSON file's weights manifest,\n *     reads weights from the listed path(s), and returns a Promise of the\n *     weight manifest entries along with the weights data.\n * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.\n */\nexport async function getModelArtifactsForJSON(\n    modelJSON: ModelJSON,\n    loadWeights: (weightsManifest: WeightsManifestConfig) => Promise<[\n      /* weightSpecs */ WeightsManifestEntry[], WeightData,\n    ]>): Promise<ModelArtifacts> {\n  let weightSpecs: WeightsManifestEntry[] | undefined;\n  let weightData: WeightData | undefined;\n\n  if (modelJSON.weightsManifest != null) {\n    [weightSpecs, weightData] = await loadWeights(modelJSON.weightsManifest);\n  }\n\n  return getModelArtifactsForJSONSync(modelJSON, weightSpecs, weightData);\n}\n\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\nexport function getModelArtifactsInfoForJSON(modelArtifacts: ModelArtifacts):\n    ModelArtifactsInfo {\n  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n    throw new Error('Expected JSON model topology, received ArrayBuffer.');\n  }\n\n  return {\n    dateSaved: new Date(),\n    modelTopologyType: 'JSON',\n    modelTopologyBytes: modelArtifacts.modelTopology == null ?\n        0 :\n        stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\n    weightSpecsBytes: modelArtifacts.weightSpecs == null ?\n        0 :\n        stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\n    weightDataBytes: modelArtifacts.weightData == null ?\n        0 :\n        new CompositeArrayBuffer(modelArtifacts.weightData).byteLength,\n  };\n}\n\n/**\n * Concatenate the weights stored in a WeightsManifestConfig into a list of\n * WeightsManifestEntry\n *\n * @param weightsManifest The WeightsManifestConfig to extract weights from.\n * @returns A list of WeightsManifestEntry of the weights in the weightsManifest\n */\nexport function getWeightSpecs(weightsManifest: WeightsManifestConfig):\n    WeightsManifestEntry[] {\n  const weightSpecs: WeightsManifestEntry[] = [];\n  for (const entry of weightsManifest) {\n    weightSpecs.push(...entry.weights);\n  }\n  return weightSpecs;\n}\n\n/**\n * Computes mantisa table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 2048 mantissa lookup values.\n */\nfunction computeFloat16MantisaTable(): Uint32Array {\n  const convertMantissa = (i: number): number => {\n    let m = i << 13;\n    let e = 0;\n\n    while ((m & 0x00800000) === 0) {\n      e -= 0x00800000;\n      m <<= 1;\n    }\n    m &= ~0x00800000;\n    e += 0x38800000;\n\n    return m | e;\n  };\n\n  const mantisaTable = new Uint32Array(2048);\n\n  mantisaTable[0] = 0;\n  for (let i = 1; i < 1024; i++) {\n    mantisaTable[i] = convertMantissa(i);\n  }\n  for (let i = 1024; i < 2048; i++) {\n    mantisaTable[i] = 0x38000000 + ((i - 1024) << 13);\n  }\n\n  return mantisaTable;\n}\n\n/**\n * Computes exponent table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 64 exponent lookup values.\n */\nfunction computeFloat16ExponentTable(): Uint32Array {\n  const exponentTable = new Uint32Array(64);\n\n  exponentTable[0] = 0;\n  exponentTable[31] = 0x47800000;\n  exponentTable[32] = 0x80000000;\n  exponentTable[63] = 0xc7800000;\n  for (let i = 1; i < 31; i++) {\n    exponentTable[i] = i << 23;\n  }\n  for (let i = 33; i < 63; i++) {\n    exponentTable[i] = 0x80000000 + ((i - 32) << 23);\n  }\n\n  return exponentTable;\n}\n\n/**\n * Computes offset table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 6d offset values.\n */\nfunction computeFloat16OffsetTable(): Uint32Array {\n  const offsetTable = new Uint32Array(64);\n\n  for (let i = 0; i < 64; i++) {\n    offsetTable[i] = 1024;\n  }\n  offsetTable[0] = offsetTable[32] = 0;\n\n  return offsetTable;\n}\n\n/**\n * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values\n * to a Float32Array.\n *\n * @returns Function (buffer: Uint16Array) => Float32Array which decodes\n *          the Uint16Array of Float16 bytes to a Float32Array.\n */\nexport function getFloat16Decoder(): (buffer: Uint16Array) => Float32Array {\n  // Algorithm is based off of\n  // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\n  // Cache lookup tables\n  const mantisaTable = computeFloat16MantisaTable();\n  const exponentTable = computeFloat16ExponentTable();\n  const offsetTable = computeFloat16OffsetTable();\n\n  return (quantizedArray: Uint16Array) => {\n    const buffer = new ArrayBuffer(4 * quantizedArray.length);\n    const bufferUint32View = new Uint32Array(buffer);\n    for (let index = 0; index < quantizedArray.length; index++) {\n      const float16Bits = quantizedArray[index];\n      const float32Bits =\n          mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] +\n          exponentTable[float16Bits >> 10];\n      bufferUint32View[index] = float32Bits;\n    }\n    return new Float32Array(buffer);\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}