{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { ResizeBilinear } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\n * Bilinear resize a single 3D image or a batch of 3D images to a new shape.\n *\n * @param images The images, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param size The new shape `[newHeight, newWidth]` to resize the\n *     images to. Each channel is resized individually.\n * @param alignCorners Defaults to `false`. If true, rescale\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n *     corners of images and resized images. If false, rescale by\n *     `new_height / height`. Treat similarly the width dimension.\n * @param halfPixelCenters Defaults to `false`. Whether to assume pixel centers\n *     are at 0.5, which would make the floating point coordinates of the top\n *     left pixel 0.5, 0.5.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction resizeBilinear_(images, size) {\n  var alignCorners = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var halfPixelCenters = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var $images = convertToTensor(images, 'images', 'resizeBilinear');\n  util.assert($images.rank === 3 || $images.rank === 4, function () {\n    return \"Error in resizeBilinear: x must be rank 3 or 4, but got \" + \"rank \".concat($images.rank, \".\");\n  });\n  util.assert(size.length === 2, function () {\n    return \"Error in resizeBilinear: new shape must 2D, but got shape \" + \"\".concat(size, \".\");\n  });\n  util.assert(halfPixelCenters === false || alignCorners === false, function () {\n    return \"Error in resizeBilinear: If halfPixelCenters is true, \" + \"alignCorners must be false.\";\n  });\n  var batchImages = $images;\n  var reshapedTo4D = false;\n  if ($images.rank === 3) {\n    reshapedTo4D = true;\n    batchImages = reshape($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);\n  }\n  var _size = _slicedToArray(size, 0);\n  var inputs = {\n    images: batchImages\n  };\n  var attrs = {\n    alignCorners: alignCorners,\n    halfPixelCenters: halfPixelCenters,\n    size: size\n  };\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  var res = ENGINE.runKernel(ResizeBilinear, inputs, attrs);\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n  return res;\n}\nexport var resizeBilinear = /* @__PURE__ */op({\n  resizeBilinear_: resizeBilinear_\n});","map":{"version":3,"names":["ENGINE","ResizeBilinear","convertToTensor","util","op","reshape","resizeBilinear_","images","size","alignCorners","arguments","length","undefined","halfPixelCenters","$images","assert","rank","concat","batchImages","reshapedTo4D","shape","_size","_slicedToArray","inputs","attrs","res","runKernel","resizeBilinear"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\image\\resize_bilinear.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\n\nimport {op} from '../operation';\nimport {reshape} from '../reshape';\n\n/**\n * Bilinear resize a single 3D image or a batch of 3D images to a new shape.\n *\n * @param images The images, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param size The new shape `[newHeight, newWidth]` to resize the\n *     images to. Each channel is resized individually.\n * @param alignCorners Defaults to `false`. If true, rescale\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n *     corners of images and resized images. If false, rescale by\n *     `new_height / height`. Treat similarly the width dimension.\n * @param halfPixelCenters Defaults to `false`. Whether to assume pixel centers\n *     are at 0.5, which would make the floating point coordinates of the top\n *     left pixel 0.5, 0.5.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction resizeBilinear_<T extends Tensor3D|Tensor4D>(\n    images: T|TensorLike, size: [number, number], alignCorners = false,\n    halfPixelCenters = false): T {\n  const $images = convertToTensor(images, 'images', 'resizeBilinear');\n\n  util.assert(\n      $images.rank === 3 || $images.rank === 4,\n      () => `Error in resizeBilinear: x must be rank 3 or 4, but got ` +\n          `rank ${$images.rank}.`);\n  util.assert(\n      size.length === 2,\n      () => `Error in resizeBilinear: new shape must 2D, but got shape ` +\n          `${size}.`);\n  util.assert(\n      halfPixelCenters === false || alignCorners === false,\n      () => `Error in resizeBilinear: If halfPixelCenters is true, ` +\n          `alignCorners must be false.`);\n\n  let batchImages = $images as Tensor4D;\n  let reshapedTo4D = false;\n  if ($images.rank === 3) {\n    reshapedTo4D = true;\n    batchImages = reshape(\n        $images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);\n  }\n\n  const [] = size;\n\n  const inputs: ResizeBilinearInputs = {images: batchImages};\n  const attrs: ResizeBilinearAttrs = {alignCorners, halfPixelCenters, size};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  ResizeBilinear, inputs as unknown as NamedTensorMap,\n                  attrs as unknown as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res;\n}\n\nexport const resizeBilinear = /* @__PURE__ */ op({resizeBilinear_});\n"],"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,cAAc;AACnC,SAAQC,cAAc,QAAkD,oBAAoB;AAI5F,SAAQC,eAAe,QAAO,uBAAuB;AAErD,OAAO,KAAKC,IAAI,MAAM,YAAY;AAElC,SAAQC,EAAE,QAAO,cAAc;AAC/B,SAAQC,OAAO,QAAO,YAAY;AAElC;;;;;;;;;;;;;;;;;AAiBA,SAASC,eAAeA,CACpBC,MAAoB,EAAEC,IAAsB,EACpB;EAAA,IADsBC,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAAA,IAClEG,gBAAgB,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAC1B,IAAMI,OAAO,GAAGZ,eAAe,CAACK,MAAM,EAAE,QAAQ,EAAE,gBAAgB,CAAC;EAEnEJ,IAAI,CAACY,MAAM,CACPD,OAAO,CAACE,IAAI,KAAK,CAAC,IAAIF,OAAO,CAACE,IAAI,KAAK,CAAC,EACxC;IAAA,OAAM,qEAAAC,MAAA,CACMH,OAAO,CAACE,IAAI,MAAG;EAAA,EAAC;EAChCb,IAAI,CAACY,MAAM,CACPP,IAAI,CAACG,MAAM,KAAK,CAAC,EACjB;IAAA,OAAM,kEAAAM,MAAA,CACCT,IAAI,MAAG;EAAA,EAAC;EACnBL,IAAI,CAACY,MAAM,CACPF,gBAAgB,KAAK,KAAK,IAAIJ,YAAY,KAAK,KAAK,EACpD;IAAA,OAAM,wFAC2B;EAAA,EAAC;EAEtC,IAAIS,WAAW,GAAGJ,OAAmB;EACrC,IAAIK,YAAY,GAAG,KAAK;EACxB,IAAIL,OAAO,CAACE,IAAI,KAAK,CAAC,EAAE;IACtBG,YAAY,GAAG,IAAI;IACnBD,WAAW,GAAGb,OAAO,CACjBS,OAAO,EAAE,CAAC,CAAC,EAAEA,OAAO,CAACM,KAAK,CAAC,CAAC,CAAC,EAAEN,OAAO,CAACM,KAAK,CAAC,CAAC,CAAC,EAAEN,OAAO,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;EAGzE,IAAAC,KAAA,GAAAC,cAAA,CAAWd,IAAI;EAEf,IAAMe,MAAM,GAAyB;IAAChB,MAAM,EAAEW;EAAW,CAAC;EAC1D,IAAMM,KAAK,GAAwB;IAACf,YAAY,EAAZA,YAAY;IAAEI,gBAAgB,EAAhBA,gBAAgB;IAAEL,IAAI,EAAJA;EAAI,CAAC;EAEzE;EACA,IAAMiB,GAAG,GAAGzB,MAAM,CAAC0B,SAAS,CACZzB,cAAc,EAAEsB,MAAmC,EACnDC,KAAgC,CAAM;EAEtD,IAAIL,YAAY,EAAE;IAChB,OAAOd,OAAO,CAACoB,GAAG,EAAE,CAACA,GAAG,CAACL,KAAK,CAAC,CAAC,CAAC,EAAEK,GAAG,CAACL,KAAK,CAAC,CAAC,CAAC,EAAEK,GAAG,CAACL,KAAK,CAAC,CAAC,CAAC,CAAC,CAAM;;EAEtE,OAAOK,GAAG;AACZ;AAEA,OAAO,IAAME,cAAc,GAAG,eAAgBvB,EAAE,CAAC;EAACE,eAAe,EAAfA;AAAe,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}