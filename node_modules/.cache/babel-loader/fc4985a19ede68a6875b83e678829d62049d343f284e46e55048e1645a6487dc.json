{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Pack } from '../kernel_names';\nimport { convertToTensorArray } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\r\n * Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2]);\r\n * const b = tf.tensor1d([3, 4]);\r\n * const c = tf.tensor1d([5, 6]);\r\n * tf.stack([a, b, c]).print();\r\n * ```\r\n *\r\n * @param tensors A list of tensor objects with the same shape and dtype.\r\n * @param axis The axis to stack along. Defaults to 0 (the first dim).\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\r\n */\nfunction stack_(tensors) {\n  var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var $tensors = convertToTensorArray(tensors, 'tensors', 'stack', 'string_or_numeric');\n  util.assert($tensors.length >= 1, function () {\n    return 'Pass at least one tensor to tf.stack';\n  });\n  if ($tensors.length > 0) {\n    util.assert(axis <= $tensors[0].rank, function () {\n      return 'Axis must be <= rank of the tensor';\n    });\n  }\n  var inputs = $tensors;\n  var attrs = {\n    axis: axis\n  };\n  return ENGINE.runKernel(Pack, inputs, attrs);\n}\nexport var stack = /* @__PURE__ */op({\n  stack_: stack_\n});","map":{"version":3,"names":["ENGINE","Pack","convertToTensorArray","util","op","stack_","tensors","axis","arguments","length","undefined","$tensors","assert","rank","inputs","attrs","runKernel","stack"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\stack.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Pack, PackAttrs, PackInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensorArray} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n * tf.stack([a, b, c]).print();\n * ```\n *\n * @param tensors A list of tensor objects with the same shape and dtype.\n * @param axis The axis to stack along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction stack_<T extends Tensor>(\n    tensors: Array<T|TensorLike>, axis = 0): Tensor {\n  const $tensors =\n      convertToTensorArray(tensors, 'tensors', 'stack', 'string_or_numeric');\n\n  util.assert(\n      $tensors.length >= 1, () => 'Pass at least one tensor to tf.stack');\n\n  if ($tensors.length > 0) {\n    util.assert(\n        axis <= $tensors[0].rank, () => 'Axis must be <= rank of the tensor');\n  }\n\n  const inputs: PackInputs = $tensors;\n  const attrs: PackAttrs = {axis};\n\n  return ENGINE.runKernel(\n      Pack, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const stack = /* @__PURE__ */ op({stack_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,IAAI,QAA8B,iBAAiB;AAI3D,SAAQC,oBAAoB,QAAO,oBAAoB;AAEvD,OAAO,KAAKC,IAAI,MAAM,SAAS;AAE/B,SAAQC,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;;;;;AAeA,SAASC,MAAMA,CACXC,OAA4B,EAAU;EAAA,IAARC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EACxC,IAAMG,QAAQ,GACVT,oBAAoB,CAACI,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,mBAAmB,CAAC;EAE1EH,IAAI,CAACS,MAAM,CACPD,QAAQ,CAACF,MAAM,IAAI,CAAC,EAAE;IAAA,OAAM,sCAAsC;EAAA,EAAC;EAEvE,IAAIE,QAAQ,CAACF,MAAM,GAAG,CAAC,EAAE;IACvBN,IAAI,CAACS,MAAM,CACPL,IAAI,IAAII,QAAQ,CAAC,CAAC,CAAC,CAACE,IAAI,EAAE;MAAA,OAAM,oCAAoC;IAAA,EAAC;;EAG3E,IAAMC,MAAM,GAAeH,QAAQ;EACnC,IAAMI,KAAK,GAAc;IAACR,IAAI,EAAJA;EAAI,CAAC;EAE/B,OAAOP,MAAM,CAACgB,SAAS,CACnBf,IAAI,EAAEa,MAAmC,EACzCC,KAAgC,CAAC;AACvC;AAEA,OAAO,IAAME,KAAK,GAAG,eAAgBb,EAAE,CAAC;EAACC,MAAM,EAANA;AAAM,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}