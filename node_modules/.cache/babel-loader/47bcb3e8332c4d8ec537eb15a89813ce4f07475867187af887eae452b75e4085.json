{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { getGlslDifferences } from './glsl_version';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport function createVertexShader(gl) {\n  var glsl = getGlslDifferences();\n  var vertexShaderSource = \"\".concat(glsl.version, \"\\n    precision highp float;\\n    \").concat(glsl.attribute, \" vec3 clipSpacePos;\\n    \").concat(glsl.attribute, \" vec2 uv;\\n    \").concat(glsl.varyingVs, \" vec2 resultUV;\\n\\n    void main() {\\n      gl_Position = vec4(clipSpacePos, 1);\\n      resultUV = uv;\\n    }\");\n  return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\nexport function createVertexBuffer(gl) {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  var vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\nexport function createIndexBuffer(gl) {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  var triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\nfunction createAndConfigureTexture(gl, width, height, internalFormat, textureFormat, textureType) {\n  webgl_util.validateTextureSize(width, height);\n  var texture = webgl_util.createTexture(gl);\n  var tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, function () {\n    return gl.bindTexture(tex2d, texture);\n  });\n  webgl_util.callAndCheck(gl, function () {\n    return gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  });\n  webgl_util.callAndCheck(gl, function () {\n    return gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  });\n  webgl_util.callAndCheck(gl, function () {\n    return gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  });\n  webgl_util.callAndCheck(gl, function () {\n    return gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  });\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    webgl_util.callAndCheck(gl, function () {\n      return gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, textureFormat, textureType, null);\n    });\n  } else {\n    webgl_util.callAndCheck(gl, function () {\n      return gl.texStorage2D(tex2d, 1, internalFormat, width, height);\n    });\n  }\n  webgl_util.callAndCheck(gl, function () {\n    return gl.bindTexture(gl.TEXTURE_2D, null);\n  });\n  return {\n    texture: texture,\n    texShape: [height, width]\n  };\n}\nexport function getInternalFormatForFloat32MatrixTexture(textureConfig) {\n  return textureConfig.internalFormatFloat;\n}\nexport function createFloat32MatrixTexture(gl, rows, columns, textureConfig) {\n  var _tex_util$getUnpacked = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns),\n    _tex_util$getUnpacked2 = _slicedToArray(_tex_util$getUnpacked, 2),\n    width = _tex_util$getUnpacked2[0],\n    height = _tex_util$getUnpacked2[1];\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat32MatrixTexture(textureConfig), textureConfig.textureFormatFloat, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16MatrixTexture(textureConfig) {\n  return textureConfig.internalFormatHalfFloat;\n}\nexport function createFloat16MatrixTexture(gl, rows, columns, textureConfig) {\n  var _tex_util$getUnpacked3 = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns),\n    _tex_util$getUnpacked4 = _slicedToArray(_tex_util$getUnpacked3, 2),\n    width = _tex_util$getUnpacked4[0],\n    height = _tex_util$getUnpacked4[1];\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16MatrixTexture(textureConfig), textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\nexport function getInternalFormatForUnsignedBytesMatrixTexture(textureConfig) {\n  return textureConfig.downloadTextureFormat;\n}\nexport function createUnsignedBytesMatrixTexture(gl, rows, columns, textureConfig) {\n  var _tex_util$getUnpacked5 = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns),\n    _tex_util$getUnpacked6 = _slicedToArray(_tex_util$getUnpacked5, 2),\n    width = _tex_util$getUnpacked6[0],\n    height = _tex_util$getUnpacked6[1];\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA, gl.UNSIGNED_BYTE);\n}\nexport function getInternalFormatForPackedMatrixTexture(textureConfig) {\n  return textureConfig.internalFormatPackedFloat;\n}\nexport function createPackedMatrixTexture(gl, rows, columns, textureConfig) {\n  var _tex_util$getPackedMa = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns),\n    _tex_util$getPackedMa2 = _slicedToArray(_tex_util$getPackedMa, 2),\n    width = _tex_util$getPackedMa2[0],\n    height = _tex_util$getPackedMa2[1];\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig), gl.RGBA, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16PackedMatrixTexture(textureConfig) {\n  return textureConfig.internalFormatPackedHalfFloat;\n}\nexport function createFloat16PackedMatrixTexture(gl, rows, columns, textureConfig) {\n  var _tex_util$getPackedMa3 = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns),\n    _tex_util$getPackedMa4 = _slicedToArray(_tex_util$getPackedMa3, 2),\n    width = _tex_util$getPackedMa4[0],\n    height = _tex_util$getPackedMa4[1];\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA, textureConfig.textureTypeHalfFloat);\n}\nexport function bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {\n  var posOffset = 0; // x is the first buffer element\n  var uvOffset = 3 * 4; // uv comes after [x y z]\n  var stride = 3 * 4 + 2 * 4; // xyz + uv, each entry is 4-byte float.\n  webgl_util.callAndCheck(gl, function () {\n    return gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n  });\n  var success = webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success && webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\nexport function uploadDenseMatrixToTexture(gl, texture, width, height, data, textureConfig) {\n  webgl_util.callAndCheck(gl, function () {\n    return gl.bindTexture(gl.TEXTURE_2D, texture);\n  });\n  var dataForUpload, texelDataType, internalFormat;\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n  dataForUpload.set(data);\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    webgl_util.callAndCheck(gl, function () {\n      return gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, gl.RGBA, texelDataType, dataForUpload);\n    });\n  } else {\n    webgl_util.callAndCheck(gl, function () {\n      return gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA, texelDataType, dataForUpload);\n    });\n  }\n  webgl_util.callAndCheck(gl, function () {\n    return gl.bindTexture(gl.TEXTURE_2D, null);\n  });\n}\nexport function uploadPixelDataToTexture(gl, texture, pixels) {\n  webgl_util.callAndCheck(gl, function () {\n    return gl.bindTexture(gl.TEXTURE_2D, texture);\n  });\n  if (pixels.data instanceof Uint8Array) {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(gl, function () {\n        return gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, pixels.width, pixels.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data);\n      });\n    } else {\n      webgl_util.callAndCheck(gl, function () {\n        return gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data);\n      });\n    }\n  } else {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(gl, function () {\n        return gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n      });\n    } else {\n      webgl_util.callAndCheck(gl, function () {\n        return gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n      });\n    }\n  }\n  webgl_util.callAndCheck(gl, function () {\n    return gl.bindTexture(gl.TEXTURE_2D, null);\n  });\n}\nexport function createBufferFromOutputTexture(gl2, rows, columns, textureConfig) {\n  // Create and bind the buffer.\n  var buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(gl2, function () {\n    return gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  });\n  // Initialize the buffer to the size of the texture in bytes.\n  var bytesPerFloat = 4;\n  var valuesPerTexel = 4;\n  var bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n  webgl_util.callAndCheck(gl2, function () {\n    return gl2.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ);\n  });\n  // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n  webgl_util.callAndCheck(gl2, function () {\n    return gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0);\n  });\n  webgl_util.callAndCheck(gl2, function () {\n    return gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n  });\n  return buffer;\n}\nexport function downloadFloat32MatrixFromBuffer(gl, buffer, size) {\n  var gl2 = gl;\n  var downloadTarget = new Float32Array(size);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n  return downloadTarget;\n}\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(gl, rows, columns, textureConfig) {\n  var _tex_util$getUnpacked7 = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns),\n    _tex_util$getUnpacked8 = _slicedToArray(_tex_util$getUnpacked7, 2),\n    w = _tex_util$getUnpacked8[0],\n    h = _tex_util$getUnpacked8[1];\n  var numChannels = 4;\n  var downloadTarget = new Uint8Array(tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n  webgl_util.callAndCheck(gl, function () {\n    return gl.readPixels(0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE, downloadTarget);\n  });\n  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n  return new Float32Array(downloadTarget.buffer);\n}\nexport function downloadPackedMatrixFromBuffer(gl, buffer, batch, rows, cols, physicalRows, physicalCols, textureConfig) {\n  var gl2 = gl;\n  var downloadTarget = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(physicalRows, physicalCols));\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n  return downloadTarget;\n}\nexport function downloadMatrixFromPackedOutputTexture(gl, physicalRows, physicalCols) {\n  var packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(gl, function () {\n    return gl.readPixels(0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA);\n  });\n  return packedRGBA;\n}","map":{"version":3,"names":["env","getGlslDifferences","tex_util","webgl_util","createVertexShader","gl","glsl","vertexShaderSource","concat","version","attribute","varyingVs","createVertexBuffer","vertexArray","Float32Array","createStaticVertexBuffer","createIndexBuffer","triangleVertexIndices","Uint16Array","createStaticIndexBuffer","createAndConfigureTexture","width","height","internalFormat","textureFormat","textureType","validateTextureSize","texture","createTexture","tex2d","TEXTURE_2D","callAndCheck","bindTexture","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","getNumber","texImage2D","texStorage2D","texShape","getInternalFormatForFloat32MatrixTexture","textureConfig","internalFormatFloat","createFloat32MatrixTexture","rows","columns","_tex_util$getUnpacked","getUnpackedMatrixTextureShapeWidthHeight","_tex_util$getUnpacked2","_slicedToArray","textureFormatFloat","FLOAT","getInternalFormatForFloat16MatrixTexture","internalFormatHalfFloat","createFloat16MatrixTexture","_tex_util$getUnpacked3","_tex_util$getUnpacked4","textureTypeHalfFloat","getInternalFormatForUnsignedBytesMatrixTexture","downloadTextureFormat","createUnsignedBytesMatrixTexture","_tex_util$getUnpacked5","_tex_util$getUnpacked6","RGBA","UNSIGNED_BYTE","getInternalFormatForPackedMatrixTexture","internalFormatPackedFloat","createPackedMatrixTexture","_tex_util$getPackedMa","getPackedMatrixTextureShapeWidthHeight","_tex_util$getPackedMa2","getInternalFormatForFloat16PackedMatrixTexture","internalFormatPackedHalfFloat","createFloat16PackedMatrixTexture","_tex_util$getPackedMa3","_tex_util$getPackedMa4","bindVertexProgramAttributeStreams","program","vertexBuffer","posOffset","uvOffset","stride","bindBuffer","ARRAY_BUFFER","success","bindVertexBufferToProgramAttribute","uploadDenseMatrixToTexture","data","dataForUpload","texelDataType","Uint8Array","set","texSubImage2D","uploadPixelDataToTexture","pixels","createBufferFromOutputTexture","gl2","buffer","createBuffer","PIXEL_PACK_BUFFER","bytesPerFloat","valuesPerTexel","bufferSizeBytes","bufferData","STREAM_READ","readPixels","downloadFloat32MatrixFromBuffer","size","downloadTarget","getBufferSubData","downloadByteEncodedFloatMatrixFromOutputTexture","_tex_util$getUnpacked7","_tex_util$getUnpacked8","w","h","numChannels","getUnpackedArraySizeFromMatrixSize","downloadPackedMatrixFromBuffer","batch","cols","physicalRows","physicalCols","getPackedRGBAArraySizeFromMatrixShape","downloadMatrixFromPackedOutputTexture","packedRGBA"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\gpgpu_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {getGlslDifferences} from './glsl_version';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureConfig} from './tex_util';\nimport * as webgl_util from './webgl_util';\n\nexport function createVertexShader(gl: WebGLRenderingContext): WebGLShader {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\n\nexport function createVertexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array(\n      [-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\n\nexport function createIndexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\n\nfunction createAndConfigureTexture(\n    gl: WebGLRenderingContext, width: number, height: number,\n    internalFormat: number, textureFormat: number,\n    textureType: number): Texture {\n  webgl_util.validateTextureSize(width, height);\n  const texture = webgl_util.createTexture(gl);\n\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            tex2d, 0, internalFormat, width, height, 0, textureFormat,\n            textureType, null));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => (gl as WebGL2RenderingContext)\n                  .texStorage2D(tex2d, 1, internalFormat, width, height));\n  }\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n\n  return {texture, texShape: [height, width]};\n}\n\nexport function getInternalFormatForFloat32MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatFloat;\n}\n\nexport function createFloat32MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat32MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatHalfFloat;\n}\n\nexport function createFloat16MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\n\nexport function getInternalFormatForUnsignedBytesMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.downloadTextureFormat;\n}\n\nexport function createUnsignedBytesMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA,\n      gl.UNSIGNED_BYTE);\n}\n\nexport function getInternalFormatForPackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedFloat;\n}\n\nexport function createPackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig),\n      gl.RGBA, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16PackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedHalfFloat;\n}\n\nexport function createFloat16PackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA,\n      textureConfig.textureTypeHalfFloat);\n}\n\nexport function bindVertexProgramAttributeStreams(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    vertexBuffer: WebGLBuffer): boolean {\n  const posOffset = 0;               // x is the first buffer element\n  const uvOffset = 3 * 4;            // uv comes after [x y z]\n  const stride = (3 * 4) + (2 * 4);  // xyz + uv, each entry is 4-byte float.\n  webgl_util.callAndCheck(\n      gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(\n      gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success &&\n      webgl_util.bindVertexBufferToProgramAttribute(\n          gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\n\nexport function uploadDenseMatrixToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture, width: number,\n    height: number, data: TypedArray, textureConfig: TextureConfig) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n\n  let dataForUpload: TypedArray, texelDataType: number, internalFormat: number;\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n\n  dataForUpload.set(data);\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texSubImage2D(\n            gl.TEXTURE_2D, 0, 0, 0, width, height, gl.RGBA, texelDataType,\n            dataForUpload));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA,\n            texelDataType, dataForUpload));\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function uploadPixelDataToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texSubImage2D(\n              gl.TEXTURE_2D, 0, 0, 0, pixels.width, pixels.height, gl.RGBA,\n              gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n    } else {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texImage2D(\n              gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0,\n              gl.RGBA, gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n    }\n  } else {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texSubImage2D(\n              gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE,\n              (pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n               HTMLVideoElement | ImageBitmap)));\n    } else {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texImage2D(\n              gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,\n              pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n                  HTMLVideoElement | ImageBitmap));\n    }\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function createBufferFromOutputTexture(\n    gl2: WebGL2RenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLBuffer {\n  // Create and bind the buffer.\n  const buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n\n  // Initialize the buffer to the size of the texture in bytes.\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n\n  webgl_util.callAndCheck(\n      gl2,\n      () => gl2.bufferData(\n          gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n\n  // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n  webgl_util.callAndCheck(\n      gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n\n  return buffer;\n}\n\nexport function downloadFloat32MatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer,\n    size: number): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget = new Float32Array(size);\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig) {\n  const [w, h] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(\n      tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE,\n          downloadTarget));\n\n  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n  return new Float32Array(downloadTarget.buffer);\n}\n\nexport function downloadPackedMatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer, batch: number, rows: number,\n    cols: number, physicalRows: number, physicalCols: number,\n    textureConfig: TextureConfig): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget =\n      new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(\n          physicalRows, physicalCols));\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadMatrixFromPackedOutputTexture(\n    gl: WebGLRenderingContext, physicalRows: number,\n    physicalCols: number): Float32Array {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n\n  return packedRGBA;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}