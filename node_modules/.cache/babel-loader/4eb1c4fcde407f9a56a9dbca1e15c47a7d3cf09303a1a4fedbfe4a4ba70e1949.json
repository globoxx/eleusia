{"ast":null,"code":"import _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport var MeanProgram = /*#__PURE__*/_createClass(function MeanProgram(reduceInfo, divisor) {\n  _classCallCheck(this, MeanProgram);\n  this.variableNames = ['x'];\n  var windowSize = reduceInfo.windowSize,\n    batchSize = reduceInfo.batchSize,\n    inSize = reduceInfo.inSize,\n    outSize = reduceInfo.outSize;\n  this.outputShape = [batchSize, outSize];\n  var windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n  var windowSizeVec4Remainder = windowSize % 4;\n  var updateSnippet = \"sumValue += dot(values, ones);\";\n  if (divisor != null) {\n    var denominator = 1 / divisor;\n    updateSnippet = \"sumValue += dot(values * \".concat(util.isInt(denominator) ? denominator.toPrecision(2) : denominator, \", ones);\");\n  }\n  var checkOutOfBounds = '';\n  if (inSize % windowSize > 0) {\n    checkOutOfBounds = \"\\n        if (inIdx < 0 || inIdx >= \".concat(inSize, \") {\\n          return 0.0;\\n        }\\n      \");\n  }\n  this.userCode = \"\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float getValue(int batch, int inIdx) {\\n        \".concat(checkOutOfBounds, \"\\n        return getX(batch, inIdx);\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * \").concat(windowSize, \";\\n\\n        float sumValue = 0.0;\\n\\n        for (int i = 0; i < \").concat(windowSizeNearestVec4, \"; i += 4) {\\n          int inIdx = inOffset + i;\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            getValue(batch, inIdx + 3)\\n          );\\n\\n          \").concat(updateSnippet, \"\\n        }\\n\\n        int inIdx = inOffset + \").concat(windowSizeNearestVec4, \";\\n        if (\").concat(windowSizeVec4Remainder === 1, \") {\\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\\n\\n          \").concat(updateSnippet, \"\\n        } else if (\").concat(windowSizeVec4Remainder === 2, \") {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1), 0.0, 0.0);\\n\\n          \").concat(updateSnippet, \"\\n        } else if (\").concat(windowSizeVec4Remainder === 3, \") {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2), 0.0);\\n\\n          \").concat(updateSnippet, \"\\n        }\\n        setOutput(sumValue);\\n      }\\n    \");\n});","map":{"version":3,"names":["util","MeanProgram","_createClass","reduceInfo","divisor","_classCallCheck","variableNames","windowSize","batchSize","inSize","outSize","outputShape","windowSizeNearestVec4","Math","floor","windowSizeVec4Remainder","updateSnippet","denominator","concat","isInt","toPrecision","checkOutOfBounds","userCode"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\mean_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MeanProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(reduceInfo: backend_util.ReduceInfo, divisor?: number) {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `sumValue += dot(values, ones);`;\n    if (divisor != null) {\n      const denominator = 1 / divisor;\n      updateSnippet = `sumValue += dot(values * ${\n          util.isInt(denominator) ? denominator.toPrecision(2) :\n                                    denominator}, ones);`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return 0.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${updateSnippet}\n        }\n        setOutput(sumValue);\n      }\n    `;\n  }\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAiBA,SAAsBA,IAAI,QAAO,uBAAuB;AAGxD,WAAaC,WAAW,gBAAAC,YAAA,CAKtB,SAAAD,YAAYE,UAAmC,EAAEC,OAAgB;EAAAC,eAAA,OAAAJ,WAAA;EAJjE,KAAAK,aAAa,GAAG,CAAC,GAAG,CAAC;EAKnB,IAAOC,UAAU,GAAgCJ,UAAU,CAApDI,UAAU;IAAEC,SAAS,GAAqBL,UAAU,CAAxCK,SAAS;IAAEC,MAAM,GAAaN,UAAU,CAA7BM,MAAM;IAAEC,OAAO,GAAIP,UAAU,CAArBO,OAAO;EAC7C,IAAI,CAACC,WAAW,GAAG,CAACH,SAAS,EAAEE,OAAO,CAAC;EAEvC,IAAME,qBAAqB,GAAGC,IAAI,CAACC,KAAK,CAACP,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC;EAC5D,IAAMQ,uBAAuB,GAAGR,UAAU,GAAG,CAAC;EAE9C,IAAIS,aAAa,mCAAmC;EACpD,IAAIZ,OAAO,IAAI,IAAI,EAAE;IACnB,IAAMa,WAAW,GAAG,CAAC,GAAGb,OAAO;IAC/BY,aAAa,+BAAAE,MAAA,CACTlB,IAAI,CAACmB,KAAK,CAACF,WAAW,CAAC,GAAGA,WAAW,CAACG,WAAW,CAAC,CAAC,CAAC,GAC1BH,WAAW,aAAU;;EAGrD,IAAII,gBAAgB,GAAG,EAAE;EACzB,IAAIZ,MAAM,GAAGF,UAAU,GAAG,CAAC,EAAE;IAC3Bc,gBAAgB,0CAAAH,MAAA,CACcT,MAAM,kDAGnC;;EAGH,IAAI,CAACa,QAAQ,mHAAAJ,MAAA,CAIPG,gBAAgB,wNAAAH,MAAA,CAQQX,UAAU,wEAAAW,MAAA,CAIdN,qBAAqB,gRAAAM,MAAA,CASvCF,aAAa,oDAAAE,MAAA,CAGQN,qBAAqB,qBAAAM,MAAA,CACxCH,uBAAuB,KAAK,CAAC,6FAAAG,MAAA,CAG/BF,aAAa,2BAAAE,MAAA,CACJH,uBAAuB,KAAK,CAAC,+IAAAG,MAAA,CAKtCF,aAAa,2BAAAE,MAAA,CACJH,uBAAuB,KAAK,CAAC,mLAAAG,MAAA,CAMtCF,aAAa,6DAIpB;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}