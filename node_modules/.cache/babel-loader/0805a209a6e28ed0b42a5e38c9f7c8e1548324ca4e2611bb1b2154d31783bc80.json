{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { ArgMinMaxProgram } from '../argminmax_gpu';\nimport { ArgMinMaxPackedProgram } from '../argminmax_packed_gpu';\nimport { reshape } from '../kernels/Reshape';\nfunction argReduce(backend, x, reduceType) {\n  var bestIndicesA = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var batchSize = x.shape[0];\n  var inSize = x.shape[1];\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n  var windowSize = backend_util.computeOptimalWindowSize(inSize);\n  var reduceInfo = {\n    windowSize: windowSize,\n    inSize: inSize,\n    batchSize: batchSize,\n    outSize: Math.ceil(inSize / windowSize)\n  };\n  var program = new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  var inputs = [x];\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n  var output = backend.runWebGLProgram(program, inputs, 'int32');\n  // No need to run another GPGPU program.\n  if (output.shape[1] === 1) {\n    return output;\n  }\n  var result = argReduce(backend, x, reduceType, output);\n  backend.disposeIntermediateTensorInfo(output);\n  return result;\n}\nfunction argReducePacked(backend, x, reduceType) {\n  var bestIndicesA = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  var inSize = inShape[inShape.length - 1];\n  var windowSize = backend_util.computeOptimalWindowSize(inSize);\n  var program = new ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);\n  var inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  var output = backend.runWebGLProgram(program, inputs, 'int32');\n  if (output.shape.length === x.shape.length) {\n    var result = argReducePacked(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n  return output;\n}\nexport function argMinMaxReduce(backend, x, axis, reduceType) {\n  var axes = [axis];\n  backend_util.assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.shape.length);\n  if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n    var intermediateTensorInfos = [];\n    // Eagerly unpack x input since it is passed in to all the shaders which\n    // require unpacked inputs.\n    var xtexData = backend.texData.get(x.dataId);\n    var xIsPacked = xtexData !== null && xtexData.isPacked;\n    var xUnPacked = x;\n    if (xIsPacked) {\n      xUnPacked = backend.unpackTensor(x);\n      intermediateTensorInfos.push(xUnPacked);\n    }\n    var _backend_util$compute = backend_util.computeOutAndReduceShapes(xUnPacked.shape, axes),\n      _backend_util$compute2 = _slicedToArray(_backend_util$compute, 2),\n      outShape = _backend_util$compute2[0],\n      reduceShape = _backend_util$compute2[1];\n    var inSize = util.sizeFromShape(reduceShape);\n    var a2D = reshape({\n      inputs: {\n        x: xUnPacked\n      },\n      backend: backend,\n      attrs: {\n        shape: [-1, inSize]\n      }\n    });\n    intermediateTensorInfos.push(a2D);\n    var reduced = argReduce(backend, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    var reshaped = reshape({\n      inputs: {\n        x: reduced\n      },\n      backend: backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n    intermediateTensorInfos.forEach(function (t) {\n      return backend.disposeIntermediateTensorInfo(t);\n    });\n    return reshaped;\n  }\n  return argReducePacked(backend, x, reduceType);\n}","map":{"version":3,"names":["backend_util","env","util","ArgMinMaxProgram","ArgMinMaxPackedProgram","reshape","argReduce","backend","x","reduceType","bestIndicesA","arguments","length","undefined","batchSize","shape","inSize","windowSize","computeOptimalWindowSize","reduceInfo","outSize","Math","ceil","program","inputs","push","output","runWebGLProgram","result","disposeIntermediateTensorInfo","argReducePacked","inShape","argMinMaxReduce","axis","axes","assertAxesAreInnerMostDims","charAt","toUpperCase","slice","getBool","intermediateTensorInfos","xtexData","texData","get","dataId","xIsPacked","isPacked","xUnPacked","unpackTensor","_backend_util$compute","computeOutAndReduceShapes","_backend_util$compute2","_slicedToArray","outShape","reduceShape","sizeFromShape","a2D","attrs","reduced","reshaped","forEach","t"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\kernel_utils\\arg_min_max.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_gpu';\nimport {ArgMinMaxPackedProgram} from '../argminmax_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from '../kernels/Reshape';\n\nfunction argReduce(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  let batchSize = x.shape[0];\n  let inSize = x.shape[1];\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const reduceInfo =\n      {windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize)};\n  const program =\n      new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  const inputs = [x];\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  // No need to run another GPGPU program.\n  if (output.shape[1] === 1) {\n    return output;\n  }\n  const result = argReduce(backend, x, reduceType, output);\n  backend.disposeIntermediateTensorInfo(output);\n  return result;\n}\n\nfunction argReducePacked(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  const inSize = inShape[inShape.length - 1];\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const program = new ArgMinMaxPackedProgram(\n      inShape, windowSize, reduceType, bestIndicesA == null);\n  const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  if (output.shape.length === x.shape.length) {\n    const result = argReducePacked(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n  return output;\n}\n\nexport function argMinMaxReduce(\n    backend: MathBackendWebGL, x: TensorInfo, axis: number,\n    reduceType: 'min'|'max'): TensorInfo {\n  const axes = [axis];\n  backend_util.assertAxesAreInnerMostDims(\n      'arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes,\n      x.shape.length);\n  if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n    const intermediateTensorInfos = [];\n    // Eagerly unpack x input since it is passed in to all the shaders which\n    // require unpacked inputs.\n    const xtexData = backend.texData.get(x.dataId);\n    const xIsPacked = xtexData !== null && xtexData.isPacked;\n    let xUnPacked = x;\n    if (xIsPacked) {\n      xUnPacked = backend.unpackTensor(x);\n      intermediateTensorInfos.push(xUnPacked);\n    }\n\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(xUnPacked.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: xUnPacked}, backend, attrs: {shape: [-1, inSize]}});\n    intermediateTensorInfos.push(a2D);\n\n    const reduced = argReduce(backend, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    const reshaped =\n        reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    intermediateTensorInfos.forEach(\n        t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n  }\n  return argReducePacked(backend, x, reduceType);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}