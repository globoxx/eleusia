{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { nearestDivisor } from '../util';\nimport { PARALLELIZE_THRESHOLD } from './reduce_util';\nexport function segOpComputeOptimalWindowSize(inSize, numSegments) {\n  var done = false;\n  var res;\n  if (inSize <= PARALLELIZE_THRESHOLD) {\n    res = inSize;\n    done = true;\n  } else {\n    res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n  }\n  while (!done) {\n    if (res > numSegments || res === inSize) {\n      done = true;\n    } else {\n      res = nearestDivisor(inSize, res + 1);\n    }\n  }\n  return res;\n}\nexport function computeOutShape(aShape, axis, numSegments) {\n  var outShape = [];\n  var rank = aShape.length;\n  for (var dim = 0; dim < rank; dim++) {\n    if (dim !== axis) {\n      outShape.push(aShape[dim]);\n    } else {\n      outShape.push(numSegments);\n    }\n  }\n  return outShape;\n}\nexport function collectGatherOpShapeInfo(x, indices, axis, batchDims) {\n  var indicesRank = indices.shape.length;\n  var xRank = x.shape.length;\n  if (batchDims !== 0) {\n    if (batchDims < -indicesRank || batchDims > indicesRank) {\n      throw new Error(\"Expect batchDims in the range of [-\".concat(indicesRank, \", \").concat(indicesRank, \"], but got \").concat(batchDims));\n    }\n  }\n  if (batchDims < 0) {\n    batchDims += indicesRank;\n  }\n  if (batchDims > xRank) {\n    throw new Error(\"batchDims (\".concat(batchDims, \") must be less than rank(x) (\\n    \").concat(xRank, \").\"));\n  }\n  if (axis < batchDims) {\n    throw new Error(\"batchDims (\".concat(batchDims, \") must be less than or equal to axis (\").concat(axis, \").\"));\n  }\n  for (var i = 0; i < batchDims; ++i) {\n    if (x.shape[i] !== indices.shape[i]) {\n      throw new Error(\"x.shape[\".concat(i, \"]: \").concat(x.shape[i], \" should be equal to indices.shape[\").concat(i, \"]: \").concat(indices.shape[i], \".\"));\n    }\n  }\n  var dimSize = x.shape[axis];\n  var outputShape = [];\n  var batchSize = 1;\n  var outerSize = 1;\n  var sliceSize = 1;\n  for (var _i = 0; _i < batchDims; ++_i) {\n    outputShape.push(x.shape[_i]);\n    batchSize *= x.shape[_i];\n  }\n  for (var _i2 = batchDims; _i2 < axis; _i2++) {\n    outputShape.push(x.shape[_i2]);\n    outerSize *= x.shape[_i2];\n  }\n  for (var _i3 = batchDims; _i3 < indicesRank; _i3++) {\n    outputShape.push(indices.shape[_i3]);\n  }\n  for (var _i4 = axis + 1; _i4 < xRank; _i4++) {\n    outputShape.push(x.shape[_i4]);\n    sliceSize *= x.shape[_i4];\n  }\n  return {\n    batchSize: batchSize,\n    sliceSize: sliceSize,\n    outerSize: outerSize,\n    dimSize: dimSize,\n    outputShape: outputShape\n  };\n}","map":{"version":3,"names":["nearestDivisor","PARALLELIZE_THRESHOLD","segOpComputeOptimalWindowSize","inSize","numSegments","done","res","Math","floor","sqrt","computeOutShape","aShape","axis","outShape","rank","length","dim","push","collectGatherOpShapeInfo","x","indices","batchDims","indicesRank","shape","xRank","Error","concat","i","dimSize","outputShape","batchSize","outerSize","sliceSize"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\segment_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport { TensorInfo } from '../tensor_info';\nimport {nearestDivisor} from '../util';\n\nimport {PARALLELIZE_THRESHOLD} from './reduce_util';\n\nexport interface SegOpInfo {\n  windowSize: number;\n  batchSize: number;\n  inSize: number;\n  numSegments: number;\n}\n\nexport function segOpComputeOptimalWindowSize(\n    inSize: number, numSegments: number): number {\n  let done = false;\n  let res;\n\n  if (inSize <= PARALLELIZE_THRESHOLD) {\n    res = inSize;\n    done = true;\n  } else {\n    res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n  }\n\n  while (!done) {\n    if (res > numSegments || res === inSize) {\n      done = true;\n    } else {\n      res = nearestDivisor(inSize, res + 1);\n    }\n  }\n  return res;\n}\n\nexport function computeOutShape(\n    aShape: number[], axis: number, numSegments: number): number[] {\n  const outShape = [];\n  const rank = aShape.length;\n  for (let dim = 0; dim < rank; dim++) {\n    if (dim !== axis) {\n      outShape.push(aShape[dim]);\n    } else {\n      outShape.push(numSegments);\n    }\n  }\n  return outShape;\n}\n\nexport interface GatherOpShapeInfo {\n  batchSize: number;\n  sliceSize: number;\n  outerSize: number;\n  dimSize: number;\n  outputShape: number[];\n}\n\nexport function collectGatherOpShapeInfo(\n    x: TensorInfo, indices: TensorInfo, axis: number,\n    batchDims: number): GatherOpShapeInfo {\n  const indicesRank = indices.shape.length;\n  const xRank = x.shape.length;\n\n  if (batchDims !== 0) {\n    if (batchDims < -indicesRank || batchDims > indicesRank) {\n      throw new Error(`Expect batchDims in the range of [-${indicesRank}, ${\n          indicesRank}], but got ${batchDims}`);\n    }\n  }\n\n  if (batchDims < 0) {\n    batchDims += indicesRank;\n  }\n\n  if (batchDims > xRank) {\n    throw new Error(`batchDims (${batchDims}) must be less than rank(x) (\n    ${xRank}).`);\n  }\n\n  if (axis < batchDims) {\n    throw new Error(`batchDims (${\n        batchDims}) must be less than or equal to axis (${axis}).`);\n  }\n\n  for (let i = 0; i < batchDims; ++i) {\n    if (x.shape[i] !== indices.shape[i]) {\n      throw new Error(\n          `x.shape[${i}]: ${x.shape[i]} should be equal to indices.shape[${\n              i}]: ${indices.shape[i]}.`);\n    }\n  }\n  const dimSize = x.shape[axis];\n\n  const outputShape: number[] = [];\n  let batchSize = 1;\n  let outerSize = 1;\n  let sliceSize = 1;\n\n  for (let i = 0; i < batchDims; ++i) {\n    outputShape.push(x.shape[i]);\n    batchSize *= x.shape[i];\n  }\n\n  for (let i = batchDims; i < axis; i++) {\n    outputShape.push(x.shape[i]);\n    outerSize *= x.shape[i];\n  }\n\n  for (let i = batchDims; i < indicesRank; i++) {\n    outputShape.push(indices.shape[i]);\n  }\n\n  for (let i = axis + 1; i < xRank; i++) {\n    outputShape.push(x.shape[i]);\n    sliceSize *= x.shape[i];\n  }\n\n  return {batchSize, sliceSize, outerSize, dimSize, outputShape};\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,cAAc,QAAO,SAAS;AAEtC,SAAQC,qBAAqB,QAAO,eAAe;AASnD,OAAM,SAAUC,6BAA6BA,CACzCC,MAAc,EAAEC,WAAmB;EACrC,IAAIC,IAAI,GAAG,KAAK;EAChB,IAAIC,GAAG;EAEP,IAAIH,MAAM,IAAIF,qBAAqB,EAAE;IACnCK,GAAG,GAAGH,MAAM;IACZE,IAAI,GAAG,IAAI;GACZ,MAAM;IACLC,GAAG,GAAGN,cAAc,CAACG,MAAM,EAAEI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,IAAI,CAACN,MAAM,CAAC,CAAC,CAAC;;EAG7D,OAAO,CAACE,IAAI,EAAE;IACZ,IAAIC,GAAG,GAAGF,WAAW,IAAIE,GAAG,KAAKH,MAAM,EAAE;MACvCE,IAAI,GAAG,IAAI;KACZ,MAAM;MACLC,GAAG,GAAGN,cAAc,CAACG,MAAM,EAAEG,GAAG,GAAG,CAAC,CAAC;;;EAGzC,OAAOA,GAAG;AACZ;AAEA,OAAM,SAAUI,eAAeA,CAC3BC,MAAgB,EAAEC,IAAY,EAAER,WAAmB;EACrD,IAAMS,QAAQ,GAAG,EAAE;EACnB,IAAMC,IAAI,GAAGH,MAAM,CAACI,MAAM;EAC1B,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGF,IAAI,EAAEE,GAAG,EAAE,EAAE;IACnC,IAAIA,GAAG,KAAKJ,IAAI,EAAE;MAChBC,QAAQ,CAACI,IAAI,CAACN,MAAM,CAACK,GAAG,CAAC,CAAC;KAC3B,MAAM;MACLH,QAAQ,CAACI,IAAI,CAACb,WAAW,CAAC;;;EAG9B,OAAOS,QAAQ;AACjB;AAUA,OAAM,SAAUK,wBAAwBA,CACpCC,CAAa,EAAEC,OAAmB,EAAER,IAAY,EAChDS,SAAiB;EACnB,IAAMC,WAAW,GAAGF,OAAO,CAACG,KAAK,CAACR,MAAM;EACxC,IAAMS,KAAK,GAAGL,CAAC,CAACI,KAAK,CAACR,MAAM;EAE5B,IAAIM,SAAS,KAAK,CAAC,EAAE;IACnB,IAAIA,SAAS,GAAG,CAACC,WAAW,IAAID,SAAS,GAAGC,WAAW,EAAE;MACvD,MAAM,IAAIG,KAAK,uCAAAC,MAAA,CAAuCJ,WAAW,QAAAI,MAAA,CAC7DJ,WAAW,iBAAAI,MAAA,CAAcL,SAAS,EAAG;;;EAI7C,IAAIA,SAAS,GAAG,CAAC,EAAE;IACjBA,SAAS,IAAIC,WAAW;;EAG1B,IAAID,SAAS,GAAGG,KAAK,EAAE;IACrB,MAAM,IAAIC,KAAK,eAAAC,MAAA,CAAeL,SAAS,yCAAAK,MAAA,CACrCF,KAAK,QAAK;;EAGd,IAAIZ,IAAI,GAAGS,SAAS,EAAE;IACpB,MAAM,IAAII,KAAK,eAAAC,MAAA,CACXL,SAAS,4CAAAK,MAAA,CAAyCd,IAAI,QAAK;;EAGjE,KAAK,IAAIe,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,SAAS,EAAE,EAAEM,CAAC,EAAE;IAClC,IAAIR,CAAC,CAACI,KAAK,CAACI,CAAC,CAAC,KAAKP,OAAO,CAACG,KAAK,CAACI,CAAC,CAAC,EAAE;MACnC,MAAM,IAAIF,KAAK,YAAAC,MAAA,CACAC,CAAC,SAAAD,MAAA,CAAMP,CAAC,CAACI,KAAK,CAACI,CAAC,CAAC,wCAAAD,MAAA,CACxBC,CAAC,SAAAD,MAAA,CAAMN,OAAO,CAACG,KAAK,CAACI,CAAC,CAAC,OAAI;;;EAGvC,IAAMC,OAAO,GAAGT,CAAC,CAACI,KAAK,CAACX,IAAI,CAAC;EAE7B,IAAMiB,WAAW,GAAa,EAAE;EAChC,IAAIC,SAAS,GAAG,CAAC;EACjB,IAAIC,SAAS,GAAG,CAAC;EACjB,IAAIC,SAAS,GAAG,CAAC;EAEjB,KAAK,IAAIL,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAGN,SAAS,EAAE,EAAEM,EAAC,EAAE;IAClCE,WAAW,CAACZ,IAAI,CAACE,CAAC,CAACI,KAAK,CAACI,EAAC,CAAC,CAAC;IAC5BG,SAAS,IAAIX,CAAC,CAACI,KAAK,CAACI,EAAC,CAAC;;EAGzB,KAAK,IAAIA,GAAC,GAAGN,SAAS,EAAEM,GAAC,GAAGf,IAAI,EAAEe,GAAC,EAAE,EAAE;IACrCE,WAAW,CAACZ,IAAI,CAACE,CAAC,CAACI,KAAK,CAACI,GAAC,CAAC,CAAC;IAC5BI,SAAS,IAAIZ,CAAC,CAACI,KAAK,CAACI,GAAC,CAAC;;EAGzB,KAAK,IAAIA,GAAC,GAAGN,SAAS,EAAEM,GAAC,GAAGL,WAAW,EAAEK,GAAC,EAAE,EAAE;IAC5CE,WAAW,CAACZ,IAAI,CAACG,OAAO,CAACG,KAAK,CAACI,GAAC,CAAC,CAAC;;EAGpC,KAAK,IAAIA,GAAC,GAAGf,IAAI,GAAG,CAAC,EAAEe,GAAC,GAAGH,KAAK,EAAEG,GAAC,EAAE,EAAE;IACrCE,WAAW,CAACZ,IAAI,CAACE,CAAC,CAACI,KAAK,CAACI,GAAC,CAAC,CAAC;IAC5BK,SAAS,IAAIb,CAAC,CAACI,KAAK,CAACI,GAAC,CAAC;;EAGzB,OAAO;IAACG,SAAS,EAATA,SAAS;IAAEE,SAAS,EAATA,SAAS;IAAED,SAAS,EAATA,SAAS;IAAEH,OAAO,EAAPA,OAAO;IAAEC,WAAW,EAAXA;EAAW,CAAC;AAChE"},"metadata":{},"sourceType":"module","externalDependencies":[]}