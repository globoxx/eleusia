{"ast":null,"code":"import _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\r\n * The StringNGramsOp class creates ngrams from ragged string data.\r\n * The constructor contains all attributes related to the operation such as\r\n * padding widths and strings, and the compute function can be used to\r\n * compute the ngrams for different ragged tensor inputs.\r\n */\nvar StringNGramsOp = /*#__PURE__*/function () {\n  function StringNGramsOp(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n    _classCallCheck(this, StringNGramsOp);\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n  _createClass(StringNGramsOp, [{\n    key: \"getPadWidth\",\n    value: function getPadWidth(nGramWidth) {\n      // Ngrams can be padded with either a fixed pad width or a dynamic pad\n      // width depending on the 'padWidth' arg, but in no case should the padding\n      // ever be wider than 'nGramWidth' - 1.\n      return Math.min(this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n    }\n  }, {\n    key: \"getNumNGrams\",\n    value: function getNumNGrams(length, nGramWidth) {\n      var padWidth = this.getPadWidth(nGramWidth);\n      return Math.max(0, length + 2 * padWidth - nGramWidth + 1);\n    }\n  }, {\n    key: \"createNGrams\",\n    value: function createNGrams(data, splitIndex, output, outputStartIndex, numNGrams, nGramWidth) {\n      var _this = this;\n      var _loop = function _loop() {\n        var padWidth = _this.getPadWidth(nGramWidth);\n        var leftPadding = Math.max(0, padWidth - nGramIndex);\n        var rightPadding = Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n        var numTokens = nGramWidth - (leftPadding + rightPadding);\n        var dataStartIndex = splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n        // Calculate the total expected size of the nGram so we can reserve the\n        // correct amount of space in the string.\n        var nGramSize = 0;\n        // Size of the left padding.\n        nGramSize += leftPadding * _this.leftPad.length;\n        // Size of the tokens.\n        for (var n = 0; n < numTokens; ++n) {\n          nGramSize += data[dataStartIndex + n].length;\n        }\n        // Size of the right padding.\n        nGramSize += rightPadding * _this.rightPad.length;\n        // Size of the separators.\n        var numSeparators = leftPadding + rightPadding + numTokens - 1;\n        nGramSize += numSeparators * _this.separator.length;\n        // Build the nGram.\n        output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n        var nGram = output[outputStartIndex + nGramIndex];\n        var nextNGramIndex = 0;\n        var appendToNGram = function appendToNGram(str) {\n          return str.forEach(function (value) {\n            return nGram[nextNGramIndex++] = value;\n          });\n        };\n        for (var _n = 0; _n < leftPadding; ++_n) {\n          appendToNGram(_this.leftPad);\n          appendToNGram(_this.separator);\n        }\n        // Only output first numTokens - 1 pairs of data and separator\n        for (var _n2 = 0; _n2 < numTokens - 1; ++_n2) {\n          appendToNGram(data[dataStartIndex + _n2]);\n          appendToNGram(_this.separator);\n        }\n        // Handle case when there are no tokens or no right padding as these\n        // can result in consecutive separators.\n        if (numTokens > 0) {\n          // If we have tokens, then output last and then pair each separator\n          // with the right padding that follows, to ensure nGram ends either with\n          // the token or with the right pad.\n          appendToNGram(data[dataStartIndex + numTokens - 1]);\n          for (var _n3 = 0; _n3 < rightPadding; ++_n3) {\n            appendToNGram(_this.separator);\n            appendToNGram(_this.rightPad);\n          }\n        } else {\n          // If we don't have tokens, then the last item inserted into the nGram\n          // has been the separator from the left padding loop above. Hence,\n          // output right pad and separator and make sure to finish with a\n          // padding, not a separator.\n          for (var _n4 = 0; _n4 < rightPadding - 1; ++_n4) {\n            appendToNGram(_this.rightPad);\n            appendToNGram(_this.separator);\n          }\n          appendToNGram(_this.rightPad);\n        }\n      };\n      for (var nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n        _loop();\n      }\n    }\n    // Data and splits together form the definition of the ragged tensor,\n    // where data is 1 dimensional and contains the values of the tensor\n    // and splits denotes the indices at which each row starts.\n  }, {\n    key: \"compute\",\n    value: function compute(data, splits) {\n      var _this2 = this;\n      // Validate that the splits are valid indices into data, only if there are\n      // splits specified.\n      var inputDataSize = data.length;\n      var splitsSize = splits.length;\n      if (splitsSize > 0) {\n        var prevSplit = splits[0];\n        if (prevSplit !== 0) {\n          throw new Error(\"First split value must be 0, got \".concat(prevSplit));\n        }\n        for (var i = 1; i < splitsSize; ++i) {\n          var validSplits = splits[i] >= prevSplit;\n          validSplits = validSplits && splits[i] <= inputDataSize;\n          if (!validSplits) {\n            throw new Error(\"Invalid split value \".concat(splits[i], \", must be in [\").concat(prevSplit, \", \").concat(inputDataSize, \"]\"));\n          }\n          prevSplit = splits[i];\n        }\n        if (prevSplit !== inputDataSize) {\n          throw new Error(\"Last split value must be data size. Expected \".concat(inputDataSize, \", got \").concat(prevSplit));\n        }\n      }\n      var numBatchItems = splitsSize - 1;\n      var nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n      // If there is no data or size, return an empty ragged tensor.\n      if (inputDataSize === 0 || splitsSize === 0) {\n        var empty = new Array(inputDataSize);\n        for (var _i = 0; _i <= numBatchItems; ++_i) {\n          nGramsSplits[_i] = 0;\n        }\n        return [empty, nGramsSplits];\n      }\n      nGramsSplits[0] = 0;\n      var _loop2 = function _loop2() {\n        var length = splits[_i2] - splits[_i2 - 1];\n        var numNGrams = 0;\n        _this2.nGramWidths.forEach(function (nGramWidth) {\n          numNGrams += _this2.getNumNGrams(length, nGramWidth);\n        });\n        if (_this2.preserveShort && length > 0 && numNGrams === 0) {\n          numNGrams = 1;\n        }\n        nGramsSplits[_i2] = nGramsSplits[_i2 - 1] + numNGrams;\n      };\n      for (var _i2 = 1; _i2 <= numBatchItems; ++_i2) {\n        _loop2();\n      }\n      var nGrams = new Array(nGramsSplits[numBatchItems]);\n      var _loop3 = function _loop3(_i3) {\n        var splitIndex = splits[_i3];\n        var outputStartIdx = nGramsSplits[_i3];\n        _this2.nGramWidths.forEach(function (nGramWidth) {\n          var length = splits[_i3 + 1] - splits[_i3];\n          var numNGrams = _this2.getNumNGrams(length, nGramWidth);\n          _this2.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n          outputStartIdx += numNGrams;\n        });\n        // If we're preserving short sequences, check to see if no sequence was\n        // generated by comparing the current output start idx to the original\n        // one (nGramSplitsdata). If no ngrams were generated, then they will\n        // be equal (since we increment outputStartIdx by numNGrams every\n        // time we create a set of ngrams.)\n        if (_this2.preserveShort && outputStartIdx === nGramsSplits[_i3]) {\n          var dataLength = splits[_i3 + 1] - splits[_i3];\n          // One legitimate reason to not have any ngrams when this.preserveShort\n          // is true is if the sequence itself is empty. In that case, move on.\n          if (dataLength === 0) {\n            return \"continue\";\n          }\n          // We don't have to worry about dynamic padding sizes here: if padding\n          // was dynamic, every sequence would have had sufficient padding to\n          // generate at least one nGram.\n          var nGramWidth = dataLength + 2 * _this2.padWidth;\n          var numNGrams = 1;\n          _this2.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        }\n      };\n      for (var _i3 = 0; _i3 < numBatchItems; ++_i3) {\n        var _ret = _loop3(_i3);\n        if (_ret === \"continue\") continue;\n      }\n      return [nGrams, nGramsSplits];\n    }\n  }]);\n  return StringNGramsOp;\n}();\nexport function stringNGramsImpl(data, dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n  return new StringNGramsOp(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences).compute(data, dataSplits);\n}","map":{"version":3,"names":["util","StringNGramsOp","separator","nGramWidths","leftPad","rightPad","padWidth","preserveShortSequences","_classCallCheck","encodeString","preserveShort","_createClass","key","value","getPadWidth","nGramWidth","Math","min","getNumNGrams","length","max","createNGrams","data","splitIndex","output","outputStartIndex","numNGrams","_this","_loop","leftPadding","nGramIndex","rightPadding","numTokens","dataStartIndex","nGramSize","n","numSeparators","Uint8Array","nGram","nextNGramIndex","appendToNGram","str","forEach","compute","splits","_this2","inputDataSize","splitsSize","prevSplit","Error","concat","i","validSplits","numBatchItems","nGramsSplits","getArrayFromDType","empty","Array","_loop2","nGrams","_loop3","_i3","outputStartIdx","dataLength","_ret","stringNGramsImpl","dataSplits"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-cpu\\src\\kernels\\StringNGrams_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}