{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { sizeFromShape } from '../util';\nimport { assertNonNegativeIntegerDimensions } from '../util_base';\nimport { op } from './operation';\n/**\r\n * Creates a `tf.Tensor` with values sampled from a random number generator\r\n * function defined by the user.\r\n *\r\n * @param shape An array of integers defining the output tensor shape.\r\n * @param randFunction A random number generator function which is called\r\n * for each element in the output tensor.\r\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Random'}\r\n */\nfunction rand_(shape, randFunction, dtype) {\n  assertNonNegativeIntegerDimensions(shape);\n  var size = sizeFromShape(shape);\n  var values = null;\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else {\n    throw new Error(\"Unknown data type \".concat(dtype));\n  }\n  for (var i = 0; i < size; i++) {\n    values[i] = randFunction();\n  }\n  return ENGINE.makeTensor(values, shape, dtype);\n}\nexport var rand = /* @__PURE__ */op({\n  rand_: rand_\n});","map":{"version":3,"names":["ENGINE","sizeFromShape","assertNonNegativeIntegerDimensions","op","rand_","shape","randFunction","dtype","size","values","Float32Array","Int32Array","Uint8Array","Error","concat","i","makeTensor","rand"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\rand.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {DataType, Rank, ShapeMap} from '../types';\nimport {sizeFromShape} from '../util';\nimport {assertNonNegativeIntegerDimensions} from '../util_base';\n\nimport {op} from './operation';\n\n/**\n * Creates a `tf.Tensor` with values sampled from a random number generator\n * function defined by the user.\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param randFunction A random number generator function which is called\n * for each element in the output tensor.\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction rand_<R extends Rank>(\n    shape: ShapeMap[R], randFunction: () => number,\n    dtype?: DataType): Tensor<R> {\n  assertNonNegativeIntegerDimensions(shape);\n  const size = sizeFromShape(shape);\n  let values = null;\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n  for (let i = 0; i < size; i++) {\n    values[i] = randFunction();\n  }\n  return ENGINE.makeTensor(values, shape, dtype) as Tensor<R>;\n}\n\nexport const rand = /* @__PURE__ */ op({rand_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,WAAW;AAGhC,SAAQC,aAAa,QAAO,SAAS;AACrC,SAAQC,kCAAkC,QAAO,cAAc;AAE/D,SAAQC,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;AAWA,SAASC,KAAKA,CACVC,KAAkB,EAAEC,YAA0B,EAC9CC,KAAgB;EAClBL,kCAAkC,CAACG,KAAK,CAAC;EACzC,IAAMG,IAAI,GAAGP,aAAa,CAACI,KAAK,CAAC;EACjC,IAAII,MAAM,GAAG,IAAI;EACjB,IAAIF,KAAK,IAAI,IAAI,IAAIA,KAAK,KAAK,SAAS,EAAE;IACxCE,MAAM,GAAG,IAAIC,YAAY,CAACF,IAAI,CAAC;GAChC,MAAM,IAAID,KAAK,KAAK,OAAO,EAAE;IAC5BE,MAAM,GAAG,IAAIE,UAAU,CAACH,IAAI,CAAC;GAC9B,MAAM,IAAID,KAAK,KAAK,MAAM,EAAE;IAC3BE,MAAM,GAAG,IAAIG,UAAU,CAACJ,IAAI,CAAC;GAC9B,MAAM;IACL,MAAM,IAAIK,KAAK,sBAAAC,MAAA,CAAsBP,KAAK,EAAG;;EAE/C,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,IAAI,EAAEO,CAAC,EAAE,EAAE;IAC7BN,MAAM,CAACM,CAAC,CAAC,GAAGT,YAAY,EAAE;;EAE5B,OAAON,MAAM,CAACgB,UAAU,CAACP,MAAM,EAAEJ,KAAK,EAAEE,KAAK,CAAc;AAC7D;AAEA,OAAO,IAAMU,IAAI,GAAG,eAAgBd,EAAE,CAAC;EAACC,KAAK,EAALA;AAAK,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}