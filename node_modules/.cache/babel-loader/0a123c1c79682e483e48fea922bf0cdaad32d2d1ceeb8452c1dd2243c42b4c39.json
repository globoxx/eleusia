{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from '../../glsl_version';\nexport var FromPixelsProgram = /*#__PURE__*/_createClass(function FromPixelsProgram(outputShape) {\n  _classCallCheck(this, FromPixelsProgram);\n  this.variableNames = ['A'];\n  var glsl = getGlslDifferences();\n  var _outputShape = _slicedToArray(outputShape, 2),\n    height = _outputShape[0],\n    width = _outputShape[1];\n  this.outputShape = outputShape;\n  this.userCode = \"\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        int texR = coords[0];\\n        int texC = coords[1];\\n        int depth = coords[2];\\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\".concat(width, \".0, \").concat(height, \".0);\\n\\n        vec4 values = \").concat(glsl.texture2D, \"(A, uv);\\n        float value;\\n        if (depth == 0) {\\n          value = values.r;\\n        } else if (depth == 1) {\\n          value = values.g;\\n        } else if (depth == 2) {\\n          value = values.b;\\n        } else if (depth == 3) {\\n          value = values.a;\\n        }\\n\\n        setOutput(floor(value * 255.0 + 0.5));\\n      }\\n    \");\n});","map":{"version":3,"names":["getGlslDifferences","FromPixelsProgram","_createClass","outputShape","_classCallCheck","variableNames","glsl","_outputShape","_slicedToArray","height","width","userCode","concat","texture2D"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\kernels\\FromPixels_utils\\from_pixels_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n  }\n}\n"],"mappings":";;;AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,kBAAkB,QAAO,oBAAoB;AAGrD,WAAaC,iBAAiB,gBAAAC,YAAA,CAK5B,SAAAD,kBAAYE,WAAqB;EAAAC,eAAA,OAAAH,iBAAA;EAJjC,KAAAI,aAAa,GAAG,CAAC,GAAG,CAAC;EAKnB,IAAMC,IAAI,GAAGN,kBAAkB,EAAE;EACjC,IAAAO,YAAA,GAAAC,cAAA,CAA0BL,WAAW;IAA9BM,MAAM,GAAAF,YAAA;IAAEG,KAAK,GAAAH,YAAA;EACpB,IAAI,CAACJ,WAAW,GAAGA,WAAW;EAC9B,IAAI,CAACQ,QAAQ,2NAAAC,MAAA,CAMsCF,KAAK,UAAAE,MAAA,CAAOH,MAAM,oCAAAG,MAAA,CAEjDN,IAAI,CAACO,SAAS,oWAcjC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}