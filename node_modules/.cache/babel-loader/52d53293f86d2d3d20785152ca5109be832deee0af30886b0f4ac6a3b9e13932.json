{"ast":null,"code":"import React from'react';import{Chart as ChartJS,LinearScale}from'chart.js';import{Line}from'react-chartjs-2';import{jsx as _jsx}from\"react/jsx-runtime\";ChartJS.register(LinearScale);export default function ScoreChart(_ref){var scores=_ref.scores;console.log(scores);var data={labels:Object.keys(scores[Object.keys(scores)[0]]),// Utilise les clés du premier joueur comme étiquettes\ndatasets:Object.keys(scores).map(function(player,index){return{label:\"Joueur \".concat(player),data:Object.values(scores[player]),// Utilise les valeurs de chaque joueur comme données\nbackgroundColor:\"rgba(\".concat(index*50,\", \").concat(index*100,\", \").concat(index*150,\", 0.5)\"),// Couleur de fond pour chaque joueur\nborderColor:\"rgba(\".concat(index*50,\", \").concat(index*100,\", \").concat(index*150,\", 1)\"),// Couleur de bordure pour chaque joueur\nborderWidth:1,fill:false};})};// Options de la chart\nvar options={scales:{y:{beginAtZero:true}}};return/*#__PURE__*/_jsx(Line,{data:data,options:options});}","map":{"version":3,"names":["React","Chart","ChartJS","LinearScale","Line","jsx","_jsx","register","ScoreChart","_ref","scores","console","log","data","labels","Object","keys","datasets","map","player","index","label","concat","values","backgroundColor","borderColor","borderWidth","fill","options","scales","y","beginAtZero"],"sources":["C:/Users/vince/OneDrive/Documents/GitHub/eleusia/src/components/ScoreChart.tsx"],"sourcesContent":["import React from 'react'\r\nimport {Chart as ChartJS, LinearScale} from 'chart.js'\r\nimport { Line } from 'react-chartjs-2'\r\n\r\nChartJS.register(LinearScale)\r\n\r\nexport default function ScoreChart({scores}: {scores: {[pseudo: string]: number[]}}){\r\n    console.log(scores)\r\n    const data = {\r\n        labels: Object.keys(scores[Object.keys(scores)[0]]), // Utilise les clés du premier joueur comme étiquettes\r\n        datasets: Object.keys(scores).map((player, index) => ({\r\n            label: `Joueur ${player}`,\r\n            data: Object.values(scores[player]), // Utilise les valeurs de chaque joueur comme données\r\n            backgroundColor: `rgba(${index * 50}, ${index * 100}, ${index * 150}, 0.5)`, // Couleur de fond pour chaque joueur\r\n            borderColor: `rgba(${index * 50}, ${index * 100}, ${index * 150}, 1)`, // Couleur de bordure pour chaque joueur\r\n            borderWidth: 1,\r\n            fill: false,\r\n        })),\r\n    }\r\n\r\n    // Options de la chart\r\n    const options = {\r\n    scales: {\r\n        y: {\r\n            beginAtZero: true,\r\n        },\r\n    },\r\n    }\r\n\r\n    return (\r\n        <Line data={data} options={options} />\r\n    )\r\n  }"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAAQC,KAAK,GAAI,CAAAC,OAAO,CAAEC,WAAW,KAAO,UAAU,CACtD,OAASC,IAAI,KAAQ,iBAAiB,QAAAC,GAAA,IAAAC,IAAA,yBAEtCJ,OAAO,CAACK,QAAQ,CAACJ,WAAW,CAAC,CAE7B,cAAe,SAAS,CAAAK,UAAUA,CAAAC,IAAA,CAAkD,IAAhD,CAAAC,MAAM,CAAAD,IAAA,CAANC,MAAM,CACtCC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC,CACnB,GAAM,CAAAG,IAAI,CAAG,CACTC,MAAM,CAAEC,MAAM,CAACC,IAAI,CAACN,MAAM,CAACK,MAAM,CAACC,IAAI,CAACN,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE;AACrDO,QAAQ,CAAEF,MAAM,CAACC,IAAI,CAACN,MAAM,CAAC,CAACQ,GAAG,CAAC,SAACC,MAAM,CAAEC,KAAK,QAAM,CAClDC,KAAK,WAAAC,MAAA,CAAYH,MAAM,CAAE,CACzBN,IAAI,CAAEE,MAAM,CAACQ,MAAM,CAACb,MAAM,CAACS,MAAM,CAAC,CAAC,CAAE;AACrCK,eAAe,SAAAF,MAAA,CAAUF,KAAK,CAAG,EAAE,OAAAE,MAAA,CAAKF,KAAK,CAAG,GAAG,OAAAE,MAAA,CAAKF,KAAK,CAAG,GAAG,UAAQ,CAAE;AAC7EK,WAAW,SAAAH,MAAA,CAAUF,KAAK,CAAG,EAAE,OAAAE,MAAA,CAAKF,KAAK,CAAG,GAAG,OAAAE,MAAA,CAAKF,KAAK,CAAG,GAAG,QAAM,CAAE;AACvEM,WAAW,CAAE,CAAC,CACdC,IAAI,CAAE,KACV,CAAC,EAAC,CACN,CAAC,CAED;AACA,GAAM,CAAAC,OAAO,CAAG,CAChBC,MAAM,CAAE,CACJC,CAAC,CAAE,CACCC,WAAW,CAAE,IACjB,CACJ,CACA,CAAC,CAED,mBACIzB,IAAA,CAACF,IAAI,EAACS,IAAI,CAAEA,IAAK,CAACe,OAAO,CAAEA,OAAQ,EAAG,CAE5C"},"metadata":{},"sourceType":"module","externalDependencies":[]}