{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { FileChunkIterator } from './file_chunk_iterator';\n/**\r\n * Provide a stream of chunks from a URL.\r\n *\r\n * Note this class first downloads the entire file into memory before providing\r\n * the first element from the stream.  This is because the Fetch API does not\r\n * yet reliably provide a reader stream for the response body.\r\n */\nexport function urlChunkIterator(_x) {\n  return _urlChunkIterator.apply(this, arguments);\n}\n// Generate RequestInit from Request to match tf.util.fetch signature.\nfunction _urlChunkIterator() {\n  _urlChunkIterator = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url) {\n    var options,\n      fetchFunc,\n      urlString,\n      requestInit,\n      response,\n      uint8Array,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          fetchFunc = _args.length > 2 ? _args[2] : undefined;\n          if (typeof url === 'string') {\n            urlString = url;\n          } else {\n            urlString = url.url;\n            requestInit = getRequestInitFromRequest(url);\n          }\n          _context.next = 5;\n          return (fetchFunc || util.fetch)(urlString, requestInit);\n        case 5:\n          response = _context.sent;\n          if (!response.ok) {\n            _context.next = 15;\n            break;\n          }\n          _context.t0 = Uint8Array;\n          _context.next = 10;\n          return response.arrayBuffer();\n        case 10:\n          _context.t1 = _context.sent;\n          uint8Array = new _context.t0(_context.t1);\n          return _context.abrupt(\"return\", new FileChunkIterator(uint8Array, options));\n        case 15:\n          throw new Error(response.statusText);\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _urlChunkIterator.apply(this, arguments);\n}\nvar getRequestInitFromRequest = function getRequestInitFromRequest(request) {\n  var init = {\n    method: request.method,\n    headers: request.headers,\n    body: request.body,\n    mode: request.mode,\n    credentials: request.credentials,\n    cache: request.cache,\n    redirect: request.redirect,\n    referrer: request.referrer,\n    integrity: request.integrity\n  };\n  return init;\n};","map":{"version":3,"names":["util","FileChunkIterator","urlChunkIterator","_x","_urlChunkIterator","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","options","fetchFunc","urlString","requestInit","response","uint8Array","_args","wrap","_callee$","_context","prev","next","length","undefined","getRequestInitFromRequest","fetch","sent","ok","t0","Uint8Array","arrayBuffer","t1","abrupt","Error","statusText","stop","request","init","method","headers","body","mode","credentials","cache","redirect","referrer","integrity"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-data\\src\\iterators\\url_chunk_iterator.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\nimport {FileChunkIterator, FileChunkIteratorOptions} from './file_chunk_iterator';\n\n/**\n * Provide a stream of chunks from a URL.\n *\n * Note this class first downloads the entire file into memory before providing\n * the first element from the stream.  This is because the Fetch API does not\n * yet reliably provide a reader stream for the response body.\n */\nexport async function urlChunkIterator(\n    url: RequestInfo, options: FileChunkIteratorOptions = {},\n    fetchFunc?: Function) {\n  let urlString;\n  let requestInit;\n  if ((typeof url) === 'string') {\n    urlString = url as string;\n  } else {\n    urlString = (url as Request).url;\n    requestInit = getRequestInitFromRequest(url as Request);\n  }\n  const response = await (fetchFunc || util.fetch)(urlString, requestInit);\n  if (response.ok) {\n    const uint8Array = new Uint8Array(await response.arrayBuffer());\n    return new FileChunkIterator(uint8Array, options);\n  } else {\n    throw new Error(response.statusText);\n  }\n}\n\n// Generate RequestInit from Request to match tf.util.fetch signature.\nconst getRequestInitFromRequest = (request: Request) => {\n  const init = {\n    method: request.method,\n    headers: request.headers,\n    body: request.body,\n    mode: request.mode,\n    credentials: request.credentials,\n    cache: request.cache,\n    redirect: request.redirect,\n    referrer: request.referrer,\n    integrity: request.integrity,\n  };\n  return init;\n};\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;AAkBA,SAAQA,IAAI,QAAO,uBAAuB;AAC1C,SAAQC,iBAAiB,QAAiC,uBAAuB;AAEjF;;;;;;;AAOA,gBAAsBC,gBAAgBA,CAAAC,EAAA;EAAA,OAAAC,iBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAoBtC;AAAA,SAAAF,kBAAA;EAAAA,iBAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CApBO,SAAAC,QACHC,GAAgB;IAAA,IAAAC,OAAA;MAAAC,SAAA;MAAAC,SAAA;MAAAC,WAAA;MAAAC,QAAA;MAAAC,UAAA;MAAAC,KAAA,GAAAZ,SAAA;IAAA,OAAAE,mBAAA,GAAAW,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAEX,OAAA,GAAAM,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAoC,EAAE;UACxDL,SAAoB,GAAAK,KAAA,CAAAM,MAAA,OAAAN,KAAA,MAAAO,SAAA;UAGtB,IAAK,OAAOd,GAAG,KAAM,QAAQ,EAAE;YAC7BG,SAAS,GAAGH,GAAa;WAC1B,MAAM;YACLG,SAAS,GAAIH,GAAe,CAACA,GAAG;YAChCI,WAAW,GAAGW,yBAAyB,CAACf,GAAc,CAAC;;UACxDU,QAAA,CAAAE,IAAA;UAAA,OACsB,CAACV,SAAS,IAAIb,IAAI,CAAC2B,KAAK,EAAEb,SAAS,EAAEC,WAAW,CAAC;QAAA;UAAlEC,QAAQ,GAAAK,QAAA,CAAAO,IAAA;UAAA,KACVZ,QAAQ,CAACa,EAAE;YAAAR,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAAF,QAAA,CAAAS,EAAA,GACUC,UAAU;UAAAV,QAAA,CAAAE,IAAA;UAAA,OAAOP,QAAQ,CAACgB,WAAW,EAAE;QAAA;UAAAX,QAAA,CAAAY,EAAA,GAAAZ,QAAA,CAAAO,IAAA;UAAxDX,UAAU,OAAAI,QAAA,CAAAS,EAAA,CAAAT,QAAA,CAAAY,EAAA;UAAA,OAAAZ,QAAA,CAAAa,MAAA,WACT,IAAIjC,iBAAiB,CAACgB,UAAU,EAAEL,OAAO,CAAC;QAAA;UAAA,MAE3C,IAAIuB,KAAK,CAACnB,QAAQ,CAACoB,UAAU,CAAC;QAAA;QAAA;UAAA,OAAAf,QAAA,CAAAgB,IAAA;MAAA;IAAA,GAAA3B,OAAA;EAAA,CAEvC;EAAA,OAAAN,iBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAGD,IAAMoB,yBAAyB,GAAG,SAA5BA,yBAAyBA,CAAIY,OAAgB,EAAI;EACrD,IAAMC,IAAI,GAAG;IACXC,MAAM,EAAEF,OAAO,CAACE,MAAM;IACtBC,OAAO,EAAEH,OAAO,CAACG,OAAO;IACxBC,IAAI,EAAEJ,OAAO,CAACI,IAAI;IAClBC,IAAI,EAAEL,OAAO,CAACK,IAAI;IAClBC,WAAW,EAAEN,OAAO,CAACM,WAAW;IAChCC,KAAK,EAAEP,OAAO,CAACO,KAAK;IACpBC,QAAQ,EAAER,OAAO,CAACQ,QAAQ;IAC1BC,QAAQ,EAAET,OAAO,CAACS,QAAQ;IAC1BC,SAAS,EAAEV,OAAO,CAACU;GACpB;EACD,OAAOT,IAAI;AACb,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}