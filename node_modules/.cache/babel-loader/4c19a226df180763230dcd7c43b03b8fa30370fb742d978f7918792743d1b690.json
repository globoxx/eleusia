{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { whereImpl } from '../backends/where_impl';\nimport { convertToTensor } from '../tensor_util_env';\n/**\r\n * Returns the coordinates of true elements of condition.\r\n *\r\n * The coordinates are returned in a 2-D tensor where the first dimension (rows)\r\n * represents the number of true elements, and the second dimension (columns)\r\n * represents the coordinates of the true elements. Keep in mind, the shape of\r\n * the output tensor can vary depending on how many true values there are in\r\n * input. Indices are output in row-major order. The resulting tensor has the\r\n * shape `[numTrueElems, condition.rank]`.\r\n *\r\n * This is analogous to calling the python `tf.where(cond)` without an x or y.\r\n *\r\n * ```js\r\n * const cond = tf.tensor1d([false, false, true], 'bool');\r\n * const result = await tf.whereAsync(cond);\r\n * result.print();\r\n * ```\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Logical'}\r\n */\nfunction whereAsync_(_x) {\n  return _whereAsync_.apply(this, arguments);\n}\nfunction _whereAsync_() {\n  _whereAsync_ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(condition) {\n    var $condition, vals, res;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          $condition = convertToTensor(condition, 'condition', 'whereAsync', 'bool');\n          _context.next = 3;\n          return $condition.data();\n        case 3:\n          vals = _context.sent;\n          res = whereImpl($condition.shape, vals);\n          if (condition !== $condition) {\n            $condition.dispose();\n          }\n          return _context.abrupt(\"return\", res);\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _whereAsync_.apply(this, arguments);\n}\nexport var whereAsync = whereAsync_;","map":{"version":3,"names":["whereImpl","convertToTensor","whereAsync_","_x","_whereAsync_","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","condition","$condition","vals","res","wrap","_callee$","_context","prev","next","data","sent","shape","dispose","abrupt","stop","whereAsync"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\where_async.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {whereImpl} from '../backends/where_impl';\nimport {Tensor, Tensor2D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\n/**\n * Returns the coordinates of true elements of condition.\n *\n * The coordinates are returned in a 2-D tensor where the first dimension (rows)\n * represents the number of true elements, and the second dimension (columns)\n * represents the coordinates of the true elements. Keep in mind, the shape of\n * the output tensor can vary depending on how many true values there are in\n * input. Indices are output in row-major order. The resulting tensor has the\n * shape `[numTrueElems, condition.rank]`.\n *\n * This is analogous to calling the python `tf.where(cond)` without an x or y.\n *\n * ```js\n * const cond = tf.tensor1d([false, false, true], 'bool');\n * const result = await tf.whereAsync(cond);\n * result.print();\n * ```\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nasync function whereAsync_(condition: Tensor|TensorLike): Promise<Tensor2D> {\n  const $condition =\n      convertToTensor(condition, 'condition', 'whereAsync', 'bool');\n  const vals = await $condition.data();\n  const res = whereImpl($condition.shape, vals);\n  if (condition !== $condition) {\n    $condition.dispose();\n  }\n  return res;\n}\n\nexport const whereAsync = whereAsync_;\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,SAAS,QAAO,wBAAwB;AAEhD,SAAQC,eAAe,QAAO,oBAAoB;AAGlD;;;;;;;;;;;;;;;;;;;;AAAA,SAoBeC,WAAWA,CAAAC,EAAA;EAAA,OAAAC,YAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,aAAA;EAAAA,YAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAA1B,SAAAC,QAA2BC,SAA4B;IAAA,IAAAC,UAAA,EAAAC,IAAA,EAAAC,GAAA;IAAA,OAAAN,mBAAA,GAAAO,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAC/CP,UAAU,GACZX,eAAe,CAACU,SAAS,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,CAAC;UAAAM,QAAA,CAAAE,IAAA;UAAA,OAC9CP,UAAU,CAACQ,IAAI,EAAE;QAAA;UAA9BP,IAAI,GAAAI,QAAA,CAAAI,IAAA;UACJP,GAAG,GAAGd,SAAS,CAACY,UAAU,CAACU,KAAK,EAAET,IAAI,CAAC;UAC7C,IAAIF,SAAS,KAAKC,UAAU,EAAE;YAC5BA,UAAU,CAACW,OAAO,EAAE;;UACrB,OAAAN,QAAA,CAAAO,MAAA,WACMV,GAAG;QAAA;QAAA;UAAA,OAAAG,QAAA,CAAAQ,IAAA;MAAA;IAAA,GAAAf,OAAA;EAAA,CACX;EAAA,OAAAN,YAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAED,OAAO,IAAMoB,UAAU,GAAGxB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}