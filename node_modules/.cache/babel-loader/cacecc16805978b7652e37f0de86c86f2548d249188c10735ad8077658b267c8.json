{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { AddN } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\r\n * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2]);\r\n * const b = tf.tensor1d([3, 4]);\r\n * const c = tf.tensor1d([5, 6]);\r\n *\r\n * tf.addN([a, b, c]).print();\r\n * ```\r\n * @param tensors A list of tensors with the same shape and dtype.\r\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\r\n */\nfunction addN_(tensors) {\n  util.assert(Array.isArray(tensors), function () {\n    return 'The argument passed to tf.addN() must be a list of tensors';\n  });\n  util.assert(tensors.length >= 1, function () {\n    return \"Must pass at least one tensor to tf.addN(), but got \" + \"\".concat(tensors.length);\n  });\n  var $tensors = tensors.map(function (t, i) {\n    return convertToTensor(t, \"tensors\".concat(i), 'addN');\n  });\n  var firstTensor = $tensors[0];\n  $tensors.forEach(function (t) {\n    if (t.dtype !== firstTensor.dtype) {\n      throw new Error('All tensors passed to tf.addN() must have the same dtype');\n    }\n  });\n  $tensors.forEach(function (t) {\n    if (!util.arraysEqual(t.shape, firstTensor.shape)) {\n      throw new Error('All tensors passed to tf.addN() must have the same shape');\n    }\n  });\n  var inputs = $tensors;\n  return ENGINE.runKernel(AddN, inputs);\n}\nexport var addN = /* @__PURE__ */op({\n  addN_: addN_\n});","map":{"version":3,"names":["ENGINE","AddN","convertToTensor","util","op","addN_","tensors","assert","Array","isArray","length","concat","$tensors","map","t","i","firstTensor","forEach","dtype","Error","arraysEqual","shape","inputs","runKernel","addN"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\add_n.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {AddN, AddNInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n *\n * tf.addN([a, b, c]).print();\n * ```\n * @param tensors A list of tensors with the same shape and dtype.\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction addN_<T extends Tensor>(tensors: Array<T|TensorLike>): T {\n  util.assert(\n      Array.isArray(tensors),\n      () => 'The argument passed to tf.addN() must be a list of tensors');\n  util.assert(\n      tensors.length >= 1,\n      () => `Must pass at least one tensor to tf.addN(), but got ` +\n          `${tensors.length}`);\n\n  const $tensors =\n      tensors.map((t, i) => convertToTensor(t, `tensors${i}`, 'addN'));\n\n  const firstTensor = $tensors[0];\n  $tensors.forEach(t => {\n    if (t.dtype !== firstTensor.dtype) {\n      throw new Error(\n          'All tensors passed to tf.addN() must have the same dtype');\n    }\n  });\n\n  $tensors.forEach(t => {\n    if (!util.arraysEqual(t.shape, firstTensor.shape)) {\n      throw new Error(\n          'All tensors passed to tf.addN() must have the same shape');\n    }\n  });\n\n  const inputs: AddNInputs = $tensors;\n\n  return ENGINE.runKernel(AddN, inputs as unknown as NamedTensorMap);\n}\n\nexport const addN = /* @__PURE__ */ op({addN_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,IAAI,QAAmB,iBAAiB;AAGhD,SAAQC,eAAe,QAAO,oBAAoB;AAElD,OAAO,KAAKC,IAAI,MAAM,SAAS;AAE/B,SAAQC,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;;;AAaA,SAASC,KAAKA,CAAmBC,OAA4B;EAC3DH,IAAI,CAACI,MAAM,CACPC,KAAK,CAACC,OAAO,CAACH,OAAO,CAAC,EACtB;IAAA,OAAM,4DAA4D;EAAA,EAAC;EACvEH,IAAI,CAACI,MAAM,CACPD,OAAO,CAACI,MAAM,IAAI,CAAC,EACnB;IAAA,OAAM,4DAAAC,MAAA,CACCL,OAAO,CAACI,MAAM,CAAE;EAAA,EAAC;EAE5B,IAAME,QAAQ,GACVN,OAAO,CAACO,GAAG,CAAC,UAACC,CAAC,EAAEC,CAAC;IAAA,OAAKb,eAAe,CAACY,CAAC,YAAAH,MAAA,CAAYI,CAAC,GAAI,MAAM,CAAC;EAAA,EAAC;EAEpE,IAAMC,WAAW,GAAGJ,QAAQ,CAAC,CAAC,CAAC;EAC/BA,QAAQ,CAACK,OAAO,CAAC,UAAAH,CAAC,EAAG;IACnB,IAAIA,CAAC,CAACI,KAAK,KAAKF,WAAW,CAACE,KAAK,EAAE;MACjC,MAAM,IAAIC,KAAK,CACX,0DAA0D,CAAC;;EAEnE,CAAC,CAAC;EAEFP,QAAQ,CAACK,OAAO,CAAC,UAAAH,CAAC,EAAG;IACnB,IAAI,CAACX,IAAI,CAACiB,WAAW,CAACN,CAAC,CAACO,KAAK,EAAEL,WAAW,CAACK,KAAK,CAAC,EAAE;MACjD,MAAM,IAAIF,KAAK,CACX,0DAA0D,CAAC;;EAEnE,CAAC,CAAC;EAEF,IAAMG,MAAM,GAAeV,QAAQ;EAEnC,OAAOZ,MAAM,CAACuB,SAAS,CAACtB,IAAI,EAAEqB,MAAmC,CAAC;AACpE;AAEA,OAAO,IAAME,IAAI,GAAG,eAAgBpB,EAAE,CAAC;EAACC,KAAK,EAALA;AAAK,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}