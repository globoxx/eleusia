{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RaggedGather } from '@tensorflow/tfjs-core';\nimport { raggedGatherImplCPU } from '../kernel_utils/shared';\nexport function raggedGather(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var paramsNestedSplits = inputs.paramsNestedSplits,\n    paramsDenseValues = inputs.paramsDenseValues,\n    indices = inputs.indices;\n  var outputRaggedRank = attrs.outputRaggedRank;\n  var $paramsNestedSplits = paramsNestedSplits.map(function (t) {\n    return backend.readSync(t.dataId);\n  });\n  var $paramsNestedSplitsShapes = paramsNestedSplits.map(function (t) {\n    return t.shape;\n  });\n  var $paramsDenseValues = backend.readSync(paramsDenseValues.dataId);\n  var $indices = backend.readSync(indices.dataId);\n  var _raggedGatherImplCPU = raggedGatherImplCPU($paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues, paramsDenseValues.shape, paramsDenseValues.dtype, $indices, indices.shape, outputRaggedRank),\n    _raggedGatherImplCPU2 = _slicedToArray(_raggedGatherImplCPU, 3),\n    outputNestedSplits = _raggedGatherImplCPU2[0],\n    outputDenseValues = _raggedGatherImplCPU2[1],\n    outputDenseValuesShape = _raggedGatherImplCPU2[2];\n  var outputNestedSplitsTensors = outputNestedSplits.map(function (splits) {\n    return backend.makeTensorInfo([splits.length], 'int32', splits);\n  });\n  var outputDenseValuesTensor = backend.makeTensorInfo(outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\nexport var raggedGatherConfig = {\n  kernelName: RaggedGather,\n  backendName: 'webgl',\n  kernelFunc: raggedGather\n};","map":{"version":3,"names":["RaggedGather","raggedGatherImplCPU","raggedGather","args","inputs","backend","attrs","paramsNestedSplits","paramsDenseValues","indices","outputRaggedRank","$paramsNestedSplits","map","t","readSync","dataId","$paramsNestedSplitsShapes","shape","$paramsDenseValues","$indices","_raggedGatherImplCPU","dtype","_raggedGatherImplCPU2","_slicedToArray","outputNestedSplits","outputDenseValues","outputDenseValuesShape","outputNestedSplitsTensors","splits","makeTensorInfo","length","outputDenseValuesTensor","concat","raggedGatherConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\kernels\\RaggedGather.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedGather, RaggedGatherAttrs, RaggedGatherInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {raggedGatherImplCPU} from '../kernel_utils/shared';\n\nexport function raggedGather(args: {\n  inputs: RaggedGatherInputs,\n  backend: MathBackendWebGL,\n  attrs: RaggedGatherAttrs\n}): TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {paramsNestedSplits, paramsDenseValues, indices} = inputs;\n  const {outputRaggedRank} = attrs;\n\n  const $paramsNestedSplits =\n      paramsNestedSplits.map(t => backend.readSync(t.dataId) as TypedArray);\n  const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);\n  const $paramsDenseValues =\n      backend.readSync(paramsDenseValues.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n\n  const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] =\n      raggedGatherImplCPU(\n          $paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues,\n          paramsDenseValues.shape, paramsDenseValues.dtype, $indices,\n          indices.shape, outputRaggedRank);\n\n  const outputNestedSplitsTensors = outputNestedSplits.map(\n      (splits) => backend.makeTensorInfo([splits.length], 'int32', splits));\n\n  const outputDenseValuesTensor = backend.makeTensorInfo(\n      outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n\n  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\n\nexport const raggedGatherConfig: KernelConfig = {\n  kernelName: RaggedGather,\n  backendName: 'webgl',\n  kernelFunc: raggedGather as unknown as KernelFunc,\n};\n"],"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,YAAY,QAAsE,uBAAuB;AAG3I,SAAQC,mBAAmB,QAAO,wBAAwB;AAE1D,OAAM,SAAUC,YAAYA,CAACC,IAI5B;EACC,IAAOC,MAAM,GAAoBD,IAAI,CAA9BC,MAAM;IAAEC,OAAO,GAAWF,IAAI,CAAtBE,OAAO;IAAEC,KAAK,GAAIH,IAAI,CAAbG,KAAK;EAC7B,IAAOC,kBAAkB,GAAgCH,MAAM,CAAxDG,kBAAkB;IAAEC,iBAAiB,GAAaJ,MAAM,CAApCI,iBAAiB;IAAEC,OAAO,GAAIL,MAAM,CAAjBK,OAAO;EACrD,IAAOC,gBAAgB,GAAIJ,KAAK,CAAzBI,gBAAgB;EAEvB,IAAMC,mBAAmB,GACrBJ,kBAAkB,CAACK,GAAG,CAAC,UAAAC,CAAC;IAAA,OAAIR,OAAO,CAACS,QAAQ,CAACD,CAAC,CAACE,MAAM,CAAe;EAAA,EAAC;EACzE,IAAMC,yBAAyB,GAAGT,kBAAkB,CAACK,GAAG,CAAC,UAAAC,CAAC;IAAA,OAAIA,CAAC,CAACI,KAAK;EAAA,EAAC;EACtE,IAAMC,kBAAkB,GACpBb,OAAO,CAACS,QAAQ,CAACN,iBAAiB,CAACO,MAAM,CAAe;EAC5D,IAAMI,QAAQ,GAAGd,OAAO,CAACS,QAAQ,CAACL,OAAO,CAACM,MAAM,CAAe;EAE/D,IAAAK,oBAAA,GACInB,mBAAmB,CACfU,mBAAmB,EAAEK,yBAAyB,EAAEE,kBAAkB,EAClEV,iBAAiB,CAACS,KAAK,EAAET,iBAAiB,CAACa,KAAK,EAAEF,QAAQ,EAC1DV,OAAO,CAACQ,KAAK,EAAEP,gBAAgB,CAAC;IAAAY,qBAAA,GAAAC,cAAA,CAAAH,oBAAA;IAJjCI,kBAAkB,GAAAF,qBAAA;IAAEG,iBAAiB,GAAAH,qBAAA;IAAEI,sBAAsB,GAAAJ,qBAAA;EAMpE,IAAMK,yBAAyB,GAAGH,kBAAkB,CAACZ,GAAG,CACpD,UAACgB,MAAM;IAAA,OAAKvB,OAAO,CAACwB,cAAc,CAAC,CAACD,MAAM,CAACE,MAAM,CAAC,EAAE,OAAO,EAAEF,MAAM,CAAC;EAAA,EAAC;EAEzE,IAAMG,uBAAuB,GAAG1B,OAAO,CAACwB,cAAc,CAClDH,sBAAsB,EAAElB,iBAAiB,CAACa,KAAK,EAAEI,iBAAiB,CAAC;EAEvE,OAAOE,yBAAyB,CAACK,MAAM,CAAC,CAACD,uBAAuB,CAAC,CAAC;AACpE;AAEA,OAAO,IAAME,kBAAkB,GAAiB;EAC9CC,UAAU,EAAElC,YAAY;EACxBmC,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAElC;CACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}