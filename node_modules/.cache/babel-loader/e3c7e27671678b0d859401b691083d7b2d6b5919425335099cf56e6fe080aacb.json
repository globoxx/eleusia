{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { cloneTensor, getParamValue, getTensor } from './utils';\nexport var executeOp = function executeOp(node, tensorMap, context) {\n  var ops = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : tfOps;\n  switch (node.op) {\n    case 'Const':\n      {\n        return tensorMap[node.name];\n      }\n    case 'PlaceholderWithDefault':\n      var def = getParamValue('default', node, tensorMap, context);\n      return [getTensor(node.name, tensorMap, context) || def];\n    case 'Placeholder':\n      return [getTensor(node.name, tensorMap, context)];\n    case 'Identity':\n    case 'StopGradient':\n    case 'FakeQuantWithMinMaxVars':\n      {\n        // This op is currently ignored.\n        var _data = getParamValue('x', node, tensorMap, context);\n        return [cloneTensor(_data)];\n      }\n    case 'IdentityN':\n      return getParamValue('x', node, tensorMap, context).map(function (t) {\n        return cloneTensor(t);\n      });\n    case 'Snapshot':\n      var snapshot = getParamValue('x', node, tensorMap, context);\n      return [cloneTensor(snapshot)];\n    case 'Shape':\n      return [ops.tensor1d(getParamValue('x', node, tensorMap, context).shape, 'int32')];\n    case 'ShapeN':\n      return getParamValue('x', node, tensorMap, context).map(function (t) {\n        return ops.tensor1d(t.shape);\n      });\n    case 'Size':\n      return [ops.scalar(getParamValue('x', node, tensorMap, context).size, 'int32')];\n    case 'Rank':\n      return [ops.scalar(getParamValue('x', node, tensorMap, context).rank, 'int32')];\n    case 'NoOp':\n      return [ops.scalar(1)];\n    case 'Print':\n      var input = getParamValue('x', node, tensorMap, context);\n      var data = getParamValue('data', node, tensorMap, context);\n      var message = getParamValue('message', node, tensorMap, context);\n      var summarize = getParamValue('summarize', node, tensorMap, context);\n      console.warn('The graph has a tf.print() operation,' + 'usually used for debugging, which slows down performance.');\n      console.log(message);\n      for (var i = 0; i < data.length; i++) {\n        console.log(Array.prototype.slice.call(data[i].dataSync()).slice(0, summarize));\n      }\n      return [input];\n    default:\n      throw TypeError(\"Node type \".concat(node.op, \" is not implemented\"));\n  }\n};\nexport var CATEGORY = 'graph';","map":{"version":3,"names":["tfOps","cloneTensor","getParamValue","getTensor","executeOp","node","tensorMap","context","ops","arguments","length","undefined","op","name","def","data","map","t","snapshot","tensor1d","shape","scalar","size","rank","input","message","summarize","console","warn","log","i","Array","prototype","slice","call","dataSync","TypeError","concat","CATEGORY"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-converter\\src\\operations\\executors\\graph_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {cloneTensor, getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'Const': {\n          return tensorMap[node.name];\n        }\n        case 'PlaceholderWithDefault':\n          const def =\n              getParamValue('default', node, tensorMap, context) as Tensor;\n          return [getTensor(node.name, tensorMap, context) || def];\n        case 'Placeholder':\n          return [getTensor(node.name, tensorMap, context)];\n        case 'Identity':\n        case 'StopGradient':\n        case 'FakeQuantWithMinMaxVars': {  // This op is currently ignored.\n          const data = getParamValue('x', node, tensorMap, context) as Tensor;\n          return [cloneTensor(data)];\n        }\n        case 'IdentityN':\n          return (getParamValue('x', node, tensorMap, context) as Tensor[])\n              .map((t: Tensor) => cloneTensor(t));\n        case 'Snapshot':\n          const snapshot =\n              (getParamValue('x', node, tensorMap, context) as Tensor);\n          return [cloneTensor(snapshot)];\n        case 'Shape':\n          return [ops.tensor1d(\n              (getParamValue('x', node, tensorMap, context) as Tensor).shape,\n              'int32')];\n        case 'ShapeN':\n          return (getParamValue('x', node, tensorMap, context) as Tensor[])\n              .map((t: Tensor) => ops.tensor1d(t.shape));\n        case 'Size':\n          return [ops.scalar(\n              (getParamValue('x', node, tensorMap, context) as Tensor).size,\n              'int32')];\n        case 'Rank':\n          return [ops.scalar(\n              (getParamValue('x', node, tensorMap, context) as Tensor).rank,\n              'int32')];\n        case 'NoOp':\n          return [ops.scalar(1)];\n        case 'Print':\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          const data =\n              getParamValue('data', node, tensorMap, context) as Tensor[];\n          const message =\n              getParamValue('message', node, tensorMap, context) as string;\n          const summarize =\n              getParamValue('summarize', node, tensorMap, context) as number;\n          console.warn(\n              'The graph has a tf.print() operation,' +\n              'usually used for debugging, which slows down performance.');\n          console.log(message);\n          for (let i = 0; i < data.length; i++) {\n            console.log(Array.prototype.slice.call(data[i].dataSync())\n                            .slice(0, summarize));\n          }\n          return [input];\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'graph';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}