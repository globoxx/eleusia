{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BitwiseAnd, env } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nimport { bitwiseAndImplCPU as cpuBitwiseAnd } from '../kernel_utils/shared';\nexport var BITWISEAND = \"\\n  int r = int(a.r) & int(b.r);\\n  int g = int(a.g) & int(b.g);\\n  int rb = int(a.b) & int(b.b);\\n  int ra = int(a.a) & int(b.a);\\n  return vec4(r, g, rb, ra);\\n\";\nexport var BITWISEAND_UNPACKED = \"\\n  return float(int(a.r) & int(b.r));\\n\";\nexport function bitwiseAnd(args) {\n  var inputs = args.inputs,\n    backend = args.backend;\n  var a = inputs.a,\n    b = inputs.b;\n  var shouldUsePackedProgram = env().getBool('WEBGL_PACK_BINARY_OPERATIONS');\n  var versionNumber = env().getNumber('WEBGL_VERSION');\n  // The type of a and b are ensured to be `int32` in core, therefore no need to\n  // consider other type situations.\n  if (backend.shouldExecuteOnCPU([a, b]) || versionNumber === 1) {\n    var aVals = backend.texData.get(a.dataId).values;\n    var bVals = backend.texData.get(b.dataId).values;\n    var _cpuBitwiseAnd = cpuBitwiseAnd(a.shape, b.shape, aVals, bVals, a.dtype),\n      _cpuBitwiseAnd2 = _slicedToArray(_cpuBitwiseAnd, 2),\n      outValues = _cpuBitwiseAnd2[0],\n      outShape = _cpuBitwiseAnd2[1];\n    var out = backend.makeTensorInfo(outShape, a.dtype);\n    var outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n  var program;\n  if (shouldUsePackedProgram) {\n    program = new BinaryOpPackedProgram(BITWISEAND, a.shape, b.shape, false);\n  } else {\n    program = new BinaryOpProgram(BITWISEAND_UNPACKED, a.shape, b.shape);\n  }\n  return backend.runWebGLProgram(program, [a, b], a.dtype);\n}\nexport var bitwiseAndConfig = {\n  kernelName: BitwiseAnd,\n  backendName: 'webgl',\n  kernelFunc: bitwiseAnd\n};","map":{"version":3,"names":["BitwiseAnd","env","BinaryOpProgram","BinaryOpPackedProgram","bitwiseAndImplCPU","cpuBitwiseAnd","BITWISEAND","BITWISEAND_UNPACKED","bitwiseAnd","args","inputs","backend","a","b","shouldUsePackedProgram","getBool","versionNumber","getNumber","shouldExecuteOnCPU","aVals","texData","get","dataId","values","bVals","_cpuBitwiseAnd","shape","dtype","_cpuBitwiseAnd2","_slicedToArray","outValues","outShape","out","makeTensorInfo","outData","program","runWebGLProgram","bitwiseAndConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\kernels\\BitwiseAnd.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BitwiseAnd, BitwiseAndInputs, env, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {bitwiseAndImplCPU as cpuBitwiseAnd} from '../kernel_utils/shared';\n\nexport const BITWISEAND = `\n  int r = int(a.r) & int(b.r);\n  int g = int(a.g) & int(b.g);\n  int rb = int(a.b) & int(b.b);\n  int ra = int(a.a) & int(b.a);\n  return vec4(r, g, rb, ra);\n`;\n\nexport const BITWISEAND_UNPACKED = `\n  return float(int(a.r) & int(b.r));\n`;\n\nexport function bitwiseAnd(args: {\n  inputs: BitwiseAndInputs,\n  backend: MathBackendWebGL,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {a, b} = inputs;\n  const shouldUsePackedProgram = env().getBool('WEBGL_PACK_BINARY_OPERATIONS');\n  const versionNumber = env().getNumber('WEBGL_VERSION');\n\n  // The type of a and b are ensured to be `int32` in core, therefore no need to\n  // consider other type situations.\n  if ((backend.shouldExecuteOnCPU([a, b])) || versionNumber === 1) {\n    const aVals = backend.texData.get(a.dataId).values as TypedArray;\n    const bVals = backend.texData.get(b.dataId).values as TypedArray;\n    const [outValues, outShape] =\n        cpuBitwiseAnd(a.shape, b.shape, aVals, bVals, a.dtype);\n\n    const out = backend.makeTensorInfo(outShape, a.dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n\n  let program: BinaryOpProgram|BinaryOpPackedProgram;\n  if (shouldUsePackedProgram) {\n    program = new BinaryOpPackedProgram(BITWISEAND, a.shape, b.shape, false);\n  } else {\n    program = new BinaryOpProgram(BITWISEAND_UNPACKED, a.shape, b.shape);\n  }\n\n  return backend.runWebGLProgram(program, [a, b], a.dtype);\n}\n\nexport const bitwiseAndConfig: KernelConfig = {\n  kernelName: BitwiseAnd,\n  backendName: 'webgl',\n  kernelFunc: bitwiseAnd as unknown as KernelFunc\n};\n"],"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,UAAU,EAAoBC,GAAG,QAAyD,uBAAuB;AAEzH,SAAQC,eAAe,QAAO,iBAAiB;AAC/C,SAAQC,qBAAqB,QAAO,wBAAwB;AAC5D,SAAQC,iBAAiB,IAAIC,aAAa,QAAO,wBAAwB;AAEzE,OAAO,IAAMC,UAAU,uKAMtB;AAED,OAAO,IAAMC,mBAAmB,6CAE/B;AAED,OAAM,SAAUC,UAAUA,CAACC,IAG1B;EACC,IAAOC,MAAM,GAAaD,IAAI,CAAvBC,MAAM;IAAEC,OAAO,GAAIF,IAAI,CAAfE,OAAO;EACtB,IAAOC,CAAC,GAAOF,MAAM,CAAdE,CAAC;IAAEC,CAAC,GAAIH,MAAM,CAAXG,CAAC;EACX,IAAMC,sBAAsB,GAAGb,GAAG,EAAE,CAACc,OAAO,CAAC,8BAA8B,CAAC;EAC5E,IAAMC,aAAa,GAAGf,GAAG,EAAE,CAACgB,SAAS,CAAC,eAAe,CAAC;EAEtD;EACA;EACA,IAAKN,OAAO,CAACO,kBAAkB,CAAC,CAACN,CAAC,EAAEC,CAAC,CAAC,CAAC,IAAKG,aAAa,KAAK,CAAC,EAAE;IAC/D,IAAMG,KAAK,GAAGR,OAAO,CAACS,OAAO,CAACC,GAAG,CAACT,CAAC,CAACU,MAAM,CAAC,CAACC,MAAoB;IAChE,IAAMC,KAAK,GAAGb,OAAO,CAACS,OAAO,CAACC,GAAG,CAACR,CAAC,CAACS,MAAM,CAAC,CAACC,MAAoB;IAChE,IAAAE,cAAA,GACIpB,aAAa,CAACO,CAAC,CAACc,KAAK,EAAEb,CAAC,CAACa,KAAK,EAAEP,KAAK,EAAEK,KAAK,EAAEZ,CAAC,CAACe,KAAK,CAAC;MAAAC,eAAA,GAAAC,cAAA,CAAAJ,cAAA;MADnDK,SAAS,GAAAF,eAAA;MAAEG,QAAQ,GAAAH,eAAA;IAG1B,IAAMI,GAAG,GAAGrB,OAAO,CAACsB,cAAc,CAACF,QAAQ,EAAEnB,CAAC,CAACe,KAAK,CAAC;IACrD,IAAMO,OAAO,GAAGvB,OAAO,CAACS,OAAO,CAACC,GAAG,CAACW,GAAG,CAACV,MAAM,CAAC;IAC/CY,OAAO,CAACX,MAAM,GAAGO,SAAS;IAC1B,OAAOE,GAAG;;EAGZ,IAAIG,OAA8C;EAClD,IAAIrB,sBAAsB,EAAE;IAC1BqB,OAAO,GAAG,IAAIhC,qBAAqB,CAACG,UAAU,EAAEM,CAAC,CAACc,KAAK,EAAEb,CAAC,CAACa,KAAK,EAAE,KAAK,CAAC;GACzE,MAAM;IACLS,OAAO,GAAG,IAAIjC,eAAe,CAACK,mBAAmB,EAAEK,CAAC,CAACc,KAAK,EAAEb,CAAC,CAACa,KAAK,CAAC;;EAGtE,OAAOf,OAAO,CAACyB,eAAe,CAACD,OAAO,EAAE,CAACvB,CAAC,EAAEC,CAAC,CAAC,EAAED,CAAC,CAACe,KAAK,CAAC;AAC1D;AAEA,OAAO,IAAMU,gBAAgB,GAAiB;EAC5CC,UAAU,EAAEtC,UAAU;EACtBuC,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAEhC;CACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}