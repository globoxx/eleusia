{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2022 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { RaggedTensorToTensor } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Create a dense tensor from a ragged tensor, possibly altering its shape.\r\n *\r\n * The raggedTensorToTensor op creates a dense tensor from am array of row\r\n * partition tensors, a value vector, and default values. If the shape is\r\n * unspecified, the minimal shape required to contain all the elements in the\r\n * ragged tensor (the natural shape) will be used. If some dimensions are left\r\n * unspecified, then the size of the natural shape is used in that dimension.\r\n *\r\n * The defaultValue will be broadcast to the output shape. After that, the\r\n * values from the ragged tensor overwrite the default values. Note that the\r\n * defaultValue must have less dimensions than the value.\r\n *\r\n * The row partition tensors are in the order of the dimensions. At present, the\r\n * types can be: \"ROW_SPLITS\": the row_splits tensor from the ragged tensor.\r\n *   \"VALUE_ROWIDS\": the value_rowids tensor from the ragged tensor.\r\n *   \"FIRST_DIM_SIZE\": if value_rowids is used for the first dimension, then it\r\n * is preceded by \"FIRST_DIM_SIZE\".\r\n * ```\r\n * @param shape: A Tensor. Must be one of the following types: 'int32'. The\r\n *     desired shape of the output tensor. If left unspecified (empty), the\r\n *     minimal shape required to contain all the elements in the ragged tensor\r\n *     (the natural shape) will be used. If some dimensions are left\r\n *     unspecified, then the size of the natural shape is used in that\r\n *     dimension.\r\n *\r\n *     Note that dense dimensions cannot be modified by the shape argument.\r\n *     Trying to change the size of a dense dimension will cause the op to fail.\r\n *     Examples: natural shape: [4, 5, 6] shape: -1 output shape: [4, 5, 6]\r\n *\r\n *     natural shape: [4, 5, 6] shape: [3, -1, 2] output shape: [3, 5, 2]\r\n *\r\n *     natural shape: [4, 5, 6] shape: [3, 7, 2] output shape: [3, 7, 2]\r\n * @param values: A Tensor. A 1D tensor representing the values of the ragged\r\n *     tensor.\r\n * @param defaultValue: A Tensor. Must have the same type as values. The\r\n *     defaultValue when the shape is larger than the ragged tensor. The\r\n *     defaultValue is broadcast until it is the shape of the output tensor,\r\n *     and then overwritten by values in the ragged tensor. The default value\r\n *     must be compatible with this broadcast operation, and must have fewer\r\n *     dimensions than the value tensor.\r\n * @param rowPartitionTensors: A list of at least 1 Tensor objects with the same\r\n *     type in: 'int32'.\r\n * @param rowPartitionTypes: A list of strings. The types of the row partition\r\n *     tensors. At present, these can be:\r\n *     \"ROW_SPLITS\": the row_splits tensor from the ragged tensor.\r\n *     \"VALUE_ROWIDS\": the value_rowids tensor from the ragged tensor.\r\n *     \"FIRST_DIM_SIZE\": if value_rowids is used for the first dimension, then\r\n *         it is preceeded by \"FIRST_DIM_SIZE\". The tensors are in the order of\r\n *         the dimensions.\r\n * @return A Tensor. Has the same type as values.\r\n * @doc {heading: 'Operations', subheading: 'Ragged'}\r\n */\nfunction raggedTensorToTensor_(shape, values, defaultValue, rowPartitionTensors, rowPartitionTypes) {\n  var $shape = convertToTensor(shape, 'shape', 'raggedTensorToTensor', 'int32');\n  var $values = convertToTensor(values, 'values', 'raggedTensorToTensor');\n  var $defaultValue = convertToTensor(defaultValue, 'defaultValue', 'raggedTensorToTensor', $values.dtype);\n  var $rowPartitionTensors = rowPartitionTensors.map(function (t, i) {\n    return convertToTensor(t, \"tensors\".concat(i), 'raggedTensorToTensor', 'int32');\n  });\n  var inputs = {\n    shape: $shape,\n    values: $values,\n    defaultValue: $defaultValue,\n    rowPartitionTensors: $rowPartitionTensors\n  };\n  var attrs = {\n    rowPartitionTypes: rowPartitionTypes\n  };\n  return ENGINE.runKernel(RaggedTensorToTensor, inputs, attrs);\n}\nexport var raggedTensorToTensor = /* @__PURE__ */op({\n  raggedTensorToTensor_: raggedTensorToTensor_\n});","map":{"version":3,"names":["ENGINE","RaggedTensorToTensor","convertToTensor","op","raggedTensorToTensor_","shape","values","defaultValue","rowPartitionTensors","rowPartitionTypes","$shape","$values","$defaultValue","dtype","$rowPartitionTensors","map","t","i","concat","inputs","attrs","runKernel","raggedTensorToTensor"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\ragged_tensor_to_tensor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {RaggedTensorToTensor, RaggedTensorToTensorAttrs, RaggedTensorToTensorInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * Create a dense tensor from a ragged tensor, possibly altering its shape.\n *\n * The raggedTensorToTensor op creates a dense tensor from am array of row\n * partition tensors, a value vector, and default values. If the shape is\n * unspecified, the minimal shape required to contain all the elements in the\n * ragged tensor (the natural shape) will be used. If some dimensions are left\n * unspecified, then the size of the natural shape is used in that dimension.\n *\n * The defaultValue will be broadcast to the output shape. After that, the\n * values from the ragged tensor overwrite the default values. Note that the\n * defaultValue must have less dimensions than the value.\n *\n * The row partition tensors are in the order of the dimensions. At present, the\n * types can be: \"ROW_SPLITS\": the row_splits tensor from the ragged tensor.\n *   \"VALUE_ROWIDS\": the value_rowids tensor from the ragged tensor.\n *   \"FIRST_DIM_SIZE\": if value_rowids is used for the first dimension, then it\n * is preceded by \"FIRST_DIM_SIZE\".\n * ```\n * @param shape: A Tensor. Must be one of the following types: 'int32'. The\n *     desired shape of the output tensor. If left unspecified (empty), the\n *     minimal shape required to contain all the elements in the ragged tensor\n *     (the natural shape) will be used. If some dimensions are left\n *     unspecified, then the size of the natural shape is used in that\n *     dimension.\n *\n *     Note that dense dimensions cannot be modified by the shape argument.\n *     Trying to change the size of a dense dimension will cause the op to fail.\n *     Examples: natural shape: [4, 5, 6] shape: -1 output shape: [4, 5, 6]\n *\n *     natural shape: [4, 5, 6] shape: [3, -1, 2] output shape: [3, 5, 2]\n *\n *     natural shape: [4, 5, 6] shape: [3, 7, 2] output shape: [3, 7, 2]\n * @param values: A Tensor. A 1D tensor representing the values of the ragged\n *     tensor.\n * @param defaultValue: A Tensor. Must have the same type as values. The\n *     defaultValue when the shape is larger than the ragged tensor. The\n *     defaultValue is broadcast until it is the shape of the output tensor,\n *     and then overwritten by values in the ragged tensor. The default value\n *     must be compatible with this broadcast operation, and must have fewer\n *     dimensions than the value tensor.\n * @param rowPartitionTensors: A list of at least 1 Tensor objects with the same\n *     type in: 'int32'.\n * @param rowPartitionTypes: A list of strings. The types of the row partition\n *     tensors. At present, these can be:\n *     \"ROW_SPLITS\": the row_splits tensor from the ragged tensor.\n *     \"VALUE_ROWIDS\": the value_rowids tensor from the ragged tensor.\n *     \"FIRST_DIM_SIZE\": if value_rowids is used for the first dimension, then\n *         it is preceeded by \"FIRST_DIM_SIZE\". The tensors are in the order of\n *         the dimensions.\n * @return A Tensor. Has the same type as values.\n * @doc {heading: 'Operations', subheading: 'Ragged'}\n */\nfunction raggedTensorToTensor_(\n    shape: Tensor|TensorLike, values: Tensor|TensorLike,\n    defaultValue: Tensor|TensorLike, rowPartitionTensors: Tensor[],\n    rowPartitionTypes: string[]): Tensor {\n  const $shape =\n      convertToTensor(shape, 'shape', 'raggedTensorToTensor', 'int32');\n  const $values = convertToTensor(values, 'values', 'raggedTensorToTensor');\n  const $defaultValue = convertToTensor(\n      defaultValue, 'defaultValue', 'raggedTensorToTensor', $values.dtype);\n  const $rowPartitionTensors = rowPartitionTensors.map(\n      (t, i) =>\n          convertToTensor(t, `tensors${i}`, 'raggedTensorToTensor', 'int32'));\n\n  const inputs: RaggedTensorToTensorInputs = {\n    shape: $shape,\n    values: $values,\n    defaultValue: $defaultValue,\n    rowPartitionTensors: $rowPartitionTensors\n  };\n  const attrs: RaggedTensorToTensorAttrs = {rowPartitionTypes};\n\n  return ENGINE.runKernel(RaggedTensorToTensor, inputs as {}, attrs as {});\n}\n\nexport const raggedTensorToTensor = /* @__PURE__ */ op({raggedTensorToTensor_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,oBAAoB,QAA8D,iBAAiB;AAE3G,SAAQC,eAAe,QAAO,oBAAoB;AAElD,SAAQC,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA,SAASC,qBAAqBA,CAC1BC,KAAwB,EAAEC,MAAyB,EACnDC,YAA+B,EAAEC,mBAA6B,EAC9DC,iBAA2B;EAC7B,IAAMC,MAAM,GACRR,eAAe,CAACG,KAAK,EAAE,OAAO,EAAE,sBAAsB,EAAE,OAAO,CAAC;EACpE,IAAMM,OAAO,GAAGT,eAAe,CAACI,MAAM,EAAE,QAAQ,EAAE,sBAAsB,CAAC;EACzE,IAAMM,aAAa,GAAGV,eAAe,CACjCK,YAAY,EAAE,cAAc,EAAE,sBAAsB,EAAEI,OAAO,CAACE,KAAK,CAAC;EACxE,IAAMC,oBAAoB,GAAGN,mBAAmB,CAACO,GAAG,CAChD,UAACC,CAAC,EAAEC,CAAC;IAAA,OACDf,eAAe,CAACc,CAAC,YAAAE,MAAA,CAAYD,CAAC,GAAI,sBAAsB,EAAE,OAAO,CAAC;EAAA,EAAC;EAE3E,IAAME,MAAM,GAA+B;IACzCd,KAAK,EAAEK,MAAM;IACbJ,MAAM,EAAEK,OAAO;IACfJ,YAAY,EAAEK,aAAa;IAC3BJ,mBAAmB,EAAEM;GACtB;EACD,IAAMM,KAAK,GAA8B;IAACX,iBAAiB,EAAjBA;EAAiB,CAAC;EAE5D,OAAOT,MAAM,CAACqB,SAAS,CAACpB,oBAAoB,EAAEkB,MAAY,EAAEC,KAAW,CAAC;AAC1E;AAEA,OAAO,IAAME,oBAAoB,GAAG,eAAgBnB,EAAE,CAAC;EAACC,qBAAqB,EAArBA;AAAqB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}