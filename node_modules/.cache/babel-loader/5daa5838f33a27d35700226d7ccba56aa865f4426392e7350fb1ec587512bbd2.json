{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Neg, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { multiplyImpl } from './Multiply';\nexport function negImpl(xVals, xShape, xDtype) {\n  var minusOne = util.createScalarValue(-1, xDtype);\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\nexport function neg(args) {\n  var inputs = args.inputs,\n    backend = args.backend;\n  var x = inputs.x;\n  assertNotComplex(x, 'neg');\n  var xVals = backend.data.get(x.dataId).values;\n  var _negImpl = negImpl(xVals, x.shape, x.dtype),\n    _negImpl2 = _slicedToArray(_negImpl, 2),\n    res = _negImpl2[0],\n    newShape = _negImpl2[1];\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\nexport var negConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg\n};","map":{"version":3,"names":["Neg","util","assertNotComplex","multiplyImpl","negImpl","xVals","xShape","xDtype","minusOne","createScalarValue","neg","args","inputs","backend","x","data","get","dataId","values","_negImpl","shape","dtype","_negImpl2","_slicedToArray","res","newShape","makeTensorInfo","negConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-cpu\\src\\kernels\\Neg.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as unknown as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as unknown as KernelFunc\n};\n"],"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAA4CA,GAAG,EAAuCC,IAAI,QAAO,uBAAuB;AAGxH,SAAQC,gBAAgB,QAAO,aAAa;AAC5C,SAAQC,YAAY,QAAO,YAAY;AAEvC,OAAM,SAAUC,OAAOA,CAACC,KAAiB,EAAEC,MAAgB,EAAEC,MAAgB;EAE3E,IAAMC,QAAQ,GACVP,IAAI,CAACQ,iBAAiB,CAAC,CAAC,CAAyB,EAAEF,MAAM,CAAe;EAC5E,OAAOJ,YAAY,CAAC,EAAE,EAAEG,MAAM,EAAEE,QAAQ,EAAEH,KAAK,EAAEE,MAAM,CAAC;AAC1D;AAEA,OAAM,SAAUG,GAAGA,CAACC,IAAoD;EAEtE,IAAOC,MAAM,GAAaD,IAAI,CAAvBC,MAAM;IAAEC,OAAO,GAAIF,IAAI,CAAfE,OAAO;EACtB,IAAOC,CAAC,GAAIF,MAAM,CAAXE,CAAC;EAERZ,gBAAgB,CAACY,CAAC,EAAE,KAAK,CAAC;EAE1B,IAAMT,KAAK,GAAGQ,OAAO,CAACE,IAAI,CAACC,GAAG,CAACF,CAAC,CAACG,MAAM,CAAC,CAACC,MAAoB;EAC7D,IAAAC,QAAA,GAAwBf,OAAO,CAACC,KAAK,EAAES,CAAC,CAACM,KAAK,EAAEN,CAAC,CAACO,KAAK,CAAC;IAAAC,SAAA,GAAAC,cAAA,CAAAJ,QAAA;IAAjDK,GAAG,GAAAF,SAAA;IAAEG,QAAQ,GAAAH,SAAA;EAEpB,OAAOT,OAAO,CAACa,cAAc,CAACD,QAAQ,EAAEX,CAAC,CAACO,KAAK,EAAEG,GAAG,CAAC;AACvD;AAEA,OAAO,IAAMG,SAAS,GAAiB;EACrCC,UAAU,EAAE5B,GAAG;EACf6B,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAEpB;CACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}