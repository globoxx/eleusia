{"ast":null,"code":"import _createClass from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport var ScatterProgram = /*#__PURE__*/_createClass(function ScatterProgram(updateSize, sliceDim, indicesRank, updatesRank, strides, shape) {\n  var summingDupeIndex = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;\n  var defaultIsTensor = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n  _classCallCheck(this, ScatterProgram);\n  this.variableNames = ['updates', 'indices', 'defaultValue'];\n  this.outputShape = shape;\n  var stridesType = getCoordsDataType(strides.length);\n  var dtype = getCoordsDataType(shape.length);\n  var indicesString = '';\n  if (indicesRank === 1) {\n    indicesString = 'i';\n  } else if (indicesRank === 2) {\n    indicesString = 'i, j';\n  }\n  var indicesSnippet = \"getIndices(\".concat(indicesString, \")\");\n  var updatesString = '';\n  if (updatesRank === 1) {\n    updatesString = 'i';\n  } else if (updatesRank === 2) {\n    updatesString = 'i, coords[1]';\n  }\n  var updatesSnippet = \"getUpdates(\".concat(updatesString, \")\");\n  var defaultValuesString = '';\n  if (defaultIsTensor) {\n    defaultValuesString = 'coords[0], coords[1]';\n  }\n  var defaultValueSnippet = \"getDefaultValue(\".concat(defaultValuesString, \")\");\n  var strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n  this.userCode = \"\\n        \".concat(stridesType, \" strides = \").concat(stridesType, \"(\").concat(strides, \");\\n\\n        void main() {\\n          \").concat(dtype, \" coords = getOutputCoords();\\n          float sum = 0.0;\\n          bool found = false;\\n          for (int i = 0; i < \").concat(updateSize, \"; i++) {\\n            int flattenedIndex = 0;\\n            for (int j = 0; j < \").concat(sliceDim, \"; j++) {\\n              int index = round(\").concat(indicesSnippet, \");\\n              flattenedIndex += index * \").concat(strideString, \";\\n            }\\n            if (flattenedIndex == coords[0]) {\\n              sum += \").concat(updatesSnippet, \";\\n              found = true;\\n            }\\n          }\\n          setOutput(mix(\").concat(defaultValueSnippet, \", sum, float(found)));\\n        }\\n      \");\n});","map":{"version":3,"names":["getCoordsDataType","ScatterProgram","_createClass","updateSize","sliceDim","indicesRank","updatesRank","strides","shape","summingDupeIndex","arguments","length","undefined","defaultIsTensor","_classCallCheck","variableNames","outputShape","stridesType","dtype","indicesString","indicesSnippet","concat","updatesString","updatesSnippet","defaultValuesString","defaultValueSnippet","strideString","userCode"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\scatter_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ScatterProgram implements GPGPUProgram {\n  variableNames = ['updates', 'indices', 'defaultValue'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      updateSize: number, sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      summingDupeIndex = true, defaultIsTensor = false) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n\n    let defaultValuesString = '';\n    if (defaultIsTensor) {\n      defaultValuesString = 'coords[0], coords[1]';\n    }\n    const defaultValueSnippet = `getDefaultValue(${defaultValuesString})`;\n\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(${defaultValueSnippet}, sum, float(found)));\n        }\n      `;\n  }\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,iBAAiB,QAAO,mBAAmB;AAEnD,WAAaC,cAAc,gBAAAC,YAAA,CAKzB,SAAAD,eACIE,UAAkB,EAAEC,QAAgB,EAAEC,WAAmB,EACzDC,WAAmB,EAAEC,OAAiB,EAAEC,KAAe,EACP;EAAA,IAAhDC,gBAAgB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAAA,IAAEG,eAAe,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAAAI,eAAA,OAAAb,cAAA;EAPpD,KAAAc,aAAa,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,cAAc,CAAC;EAQpD,IAAI,CAACC,WAAW,GAAGR,KAAK;EACxB,IAAMS,WAAW,GAAGjB,iBAAiB,CAACO,OAAO,CAACI,MAAM,CAAC;EACrD,IAAMO,KAAK,GAAGlB,iBAAiB,CAACQ,KAAK,CAACG,MAAM,CAAC;EAC7C,IAAIQ,aAAa,GAAG,EAAE;EACtB,IAAId,WAAW,KAAK,CAAC,EAAE;IACrBc,aAAa,GAAG,GAAG;GACpB,MAAM,IAAId,WAAW,KAAK,CAAC,EAAE;IAC5Bc,aAAa,GAAG,MAAM;;EAExB,IAAMC,cAAc,iBAAAC,MAAA,CAAiBF,aAAa,MAAG;EAErD,IAAIG,aAAa,GAAG,EAAE;EACtB,IAAIhB,WAAW,KAAK,CAAC,EAAE;IACrBgB,aAAa,GAAG,GAAG;GACpB,MAAM,IAAIhB,WAAW,KAAK,CAAC,EAAE;IAC5BgB,aAAa,GAAG,cAAc;;EAEhC,IAAMC,cAAc,iBAAAF,MAAA,CAAiBC,aAAa,MAAG;EAErD,IAAIE,mBAAmB,GAAG,EAAE;EAC5B,IAAIX,eAAe,EAAE;IACnBW,mBAAmB,GAAG,sBAAsB;;EAE9C,IAAMC,mBAAmB,sBAAAJ,MAAA,CAAsBG,mBAAmB,MAAG;EAErE,IAAME,YAAY,GAAGtB,QAAQ,GAAG,CAAC,GAAG,YAAY,GAAG,SAAS;EAC5D,IAAI,CAACuB,QAAQ,gBAAAN,MAAA,CACPJ,WAAW,iBAAAI,MAAA,CAAcJ,WAAW,OAAAI,MAAA,CAAId,OAAO,6CAAAc,MAAA,CAG7CH,KAAK,6HAAAG,MAAA,CAGelB,UAAU,qFAAAkB,MAAA,CAERjB,QAAQ,gDAAAiB,MAAA,CACRD,cAAc,kDAAAC,MAAA,CACNK,YAAY,6FAAAL,MAAA,CAG/BE,cAAc,0FAAAF,MAAA,CAIXI,mBAAmB,8CAEtC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}