{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { complex } from '../kernels/Complex';\n/**\r\n * Generates a tensorInfo with all zeros value.\r\n * @param backend cpu backend.\r\n * @param shape Shape for the zeros tensor.\r\n * @param dtype Optional. If set, the result has this dtype.\r\n */\nexport function zeros(backend, shape) {\n  var dtype = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'float32';\n  if (dtype === 'complex64') {\n    var real = zeros(backend, shape, 'float32');\n    var imag = zeros(backend, shape, 'float32');\n    return complex({\n      inputs: {\n        real: real,\n        imag: imag\n      },\n      backend: backend\n    });\n  }\n  var values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n  return backend.makeTensorInfo(shape, dtype, values);\n}","map":{"version":3,"names":["util","complex","zeros","backend","shape","dtype","arguments","length","undefined","real","imag","inputs","values","makeZerosTypedArray","sizeFromShape","makeTensorInfo"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-cpu\\src\\utils\\zeros_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from '../kernels/Complex';\n\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nexport function zeros(\n    backend: MathBackendCPU, shape: number[],\n    dtype: DataType = 'float32'): TensorInfo {\n  if (dtype === 'complex64') {\n    const real = zeros(backend, shape, 'float32');\n    const imag = zeros(backend, shape, 'float32');\n\n    return complex({inputs: {real, imag}, backend});\n  }\n\n  const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n\n  return backend.makeTensorInfo(shape, dtype, values);\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAA8BA,IAAI,QAAO,uBAAuB;AAEhE,SAAQC,OAAO,QAAO,oBAAoB;AAE1C;;;;;;AAMA,OAAM,SAAUC,KAAKA,CACjBC,OAAuB,EAAEC,KAAe,EACb;EAAA,IAA3BC,KAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAkB,SAAS;EAC7B,IAAID,KAAK,KAAK,WAAW,EAAE;IACzB,IAAMI,IAAI,GAAGP,KAAK,CAACC,OAAO,EAAEC,KAAK,EAAE,SAAS,CAAC;IAC7C,IAAMM,IAAI,GAAGR,KAAK,CAACC,OAAO,EAAEC,KAAK,EAAE,SAAS,CAAC;IAE7C,OAAOH,OAAO,CAAC;MAACU,MAAM,EAAE;QAACF,IAAI,EAAJA,IAAI;QAAEC,IAAI,EAAJA;MAAI,CAAC;MAAEP,OAAO,EAAPA;IAAO,CAAC,CAAC;;EAGjD,IAAMS,MAAM,GAAGZ,IAAI,CAACa,mBAAmB,CAACb,IAAI,CAACc,aAAa,CAACV,KAAK,CAAC,EAAEC,KAAK,CAAC;EAEzE,OAAOF,OAAO,CAACY,cAAc,CAACX,KAAK,EAAEC,KAAK,EAAEO,MAAM,CAAC;AACrD"},"metadata":{},"sourceType":"module","externalDependencies":[]}