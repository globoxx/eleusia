{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Multinomial } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\r\n * Creates a `tf.Tensor` with values drawn from a multinomial distribution.\r\n *\r\n * ```js\r\n * const probs = tf.tensor([.75, .25]);\r\n * tf.multinomial(probs, 3).print();\r\n * ```\r\n *\r\n * @param logits 1D array with unnormalized log-probabilities, or\r\n *     2D array of shape `[batchSize, numOutcomes]`. See the `normalized`\r\n *     parameter.\r\n * @param numSamples Number of samples to draw for each row slice.\r\n * @param seed The seed number.\r\n * @param normalized Whether the provided `logits` are normalized true\r\n *     probabilities (sum to 1). Defaults to false.\r\n * @return 1D array of shape `[numSamples]`, or 2D array of shape\r\n *     `[batchSize, numSamples]`, depending on the rank of the input.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Random'}\r\n */\nfunction multinomial_(logits, numSamples, seed) {\n  var normalized = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var $logits = convertToTensor(logits, 'logits', 'multinomial');\n  var numOutcomes = $logits.size;\n  var origRank = $logits.rank;\n  if (numOutcomes < 2) {\n    throw new Error(\"Error in multinomial: you need at least 2 outcomes, but got \" + \"\".concat(numOutcomes, \".\"));\n  }\n  if (origRank > 2) {\n    throw new Error(\"Rank of probabilities must be 1 or 2, but is \".concat(origRank));\n  }\n  // TODO(lina128): Investigate correct seed behavior. The code seems not allow\n  // setting see to 0.\n  seed = seed || Math.random();\n  // The kernel only accepts (and returns) rank 2 tensors.\n  var logits2D = origRank === 1 ? reshape($logits, [1, -1]) : $logits;\n  var inputs = {\n    logits: logits2D\n  };\n  var attrs = {\n    numSamples: numSamples,\n    seed: seed,\n    normalized: normalized\n  };\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  var res = ENGINE.runKernel(Multinomial, inputs, attrs);\n  // tslint:disable-next-line:no-unnecessary-type-assertion\n  return origRank === 1 ? reshape(res, [res.size]) : res;\n}\nexport var multinomial = /* @__PURE__ */op({\n  multinomial_: multinomial_\n});","map":{"version":3,"names":["ENGINE","Multinomial","convertToTensor","op","reshape","multinomial_","logits","numSamples","seed","normalized","arguments","length","undefined","$logits","numOutcomes","size","origRank","rank","Error","concat","Math","random","logits2D","inputs","attrs","res","runKernel","multinomial"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\multinomial.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Multinomial, MultinomialAttrs, MultinomialInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor1D, Tensor2D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Creates a `tf.Tensor` with values drawn from a multinomial distribution.\n *\n * ```js\n * const probs = tf.tensor([.75, .25]);\n * tf.multinomial(probs, 3).print();\n * ```\n *\n * @param logits 1D array with unnormalized log-probabilities, or\n *     2D array of shape `[batchSize, numOutcomes]`. See the `normalized`\n *     parameter.\n * @param numSamples Number of samples to draw for each row slice.\n * @param seed The seed number.\n * @param normalized Whether the provided `logits` are normalized true\n *     probabilities (sum to 1). Defaults to false.\n * @return 1D array of shape `[numSamples]`, or 2D array of shape\n *     `[batchSize, numSamples]`, depending on the rank of the input.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction multinomial_(\n    logits: Tensor1D|Tensor2D|TensorLike, numSamples: number, seed?: number,\n    normalized = false): Tensor1D|Tensor2D {\n  const $logits = convertToTensor(logits, 'logits', 'multinomial');\n  const numOutcomes = $logits.size;\n  const origRank = $logits.rank;\n  if (numOutcomes < 2) {\n    throw new Error(\n        `Error in multinomial: you need at least 2 outcomes, but got ` +\n        `${numOutcomes}.`);\n  }\n  if (origRank > 2) {\n    throw new Error(`Rank of probabilities must be 1 or 2, but is ${origRank}`);\n  }\n  // TODO(lina128): Investigate correct seed behavior. The code seems not allow\n  // setting see to 0.\n  seed = seed || Math.random();\n\n  // The kernel only accepts (and returns) rank 2 tensors.\n  const logits2D: Tensor2D =\n      origRank === 1 ? reshape($logits, [1, -1]) : $logits as Tensor2D;\n\n  const inputs: MultinomialInputs = {logits: logits2D};\n  const attrs: MultinomialAttrs = {numSamples, seed, normalized};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  Multinomial, inputs as unknown as NamedTensorMap,\n                  attrs as unknown as NamedAttrMap) as Tensor2D;\n\n  // tslint:disable-next-line:no-unnecessary-type-assertion\n  return origRank === 1 ? reshape(res, [res.size]) as Tensor1D : res;\n}\n\nexport const multinomial = /* @__PURE__ */ op({multinomial_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,WAAW,QAA4C,iBAAiB;AAIhF,SAAQC,eAAe,QAAO,oBAAoB;AAGlD,SAAQC,EAAE,QAAO,aAAa;AAC9B,SAAQC,OAAO,QAAO,WAAW;AAEjC;;;;;;;;;;;;;;;;;;;;AAoBA,SAASC,YAAYA,CACjBC,MAAoC,EAAEC,UAAkB,EAAEC,IAAa,EACrD;EAAA,IAAlBC,UAAU,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EACpB,IAAMG,OAAO,GAAGX,eAAe,CAACI,MAAM,EAAE,QAAQ,EAAE,aAAa,CAAC;EAChE,IAAMQ,WAAW,GAAGD,OAAO,CAACE,IAAI;EAChC,IAAMC,QAAQ,GAAGH,OAAO,CAACI,IAAI;EAC7B,IAAIH,WAAW,GAAG,CAAC,EAAE;IACnB,MAAM,IAAII,KAAK,CACX,oEAAAC,MAAA,CACGL,WAAW,MAAG,CAAC;;EAExB,IAAIE,QAAQ,GAAG,CAAC,EAAE;IAChB,MAAM,IAAIE,KAAK,iDAAAC,MAAA,CAAiDH,QAAQ,EAAG;;EAE7E;EACA;EACAR,IAAI,GAAGA,IAAI,IAAIY,IAAI,CAACC,MAAM,EAAE;EAE5B;EACA,IAAMC,QAAQ,GACVN,QAAQ,KAAK,CAAC,GAAGZ,OAAO,CAACS,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAGA,OAAmB;EAEpE,IAAMU,MAAM,GAAsB;IAACjB,MAAM,EAAEgB;EAAQ,CAAC;EACpD,IAAME,KAAK,GAAqB;IAACjB,UAAU,EAAVA,UAAU;IAAEC,IAAI,EAAJA,IAAI;IAAEC,UAAU,EAAVA;EAAU,CAAC;EAE9D;EACA,IAAMgB,GAAG,GAAGzB,MAAM,CAAC0B,SAAS,CACZzB,WAAW,EAAEsB,MAAmC,EAChDC,KAAgC,CAAa;EAE7D;EACA,OAAOR,QAAQ,KAAK,CAAC,GAAGZ,OAAO,CAACqB,GAAG,EAAE,CAACA,GAAG,CAACV,IAAI,CAAC,CAAa,GAAGU,GAAG;AACpE;AAEA,OAAO,IAAME,WAAW,GAAG,eAAgBxB,EAAE,CAAC;EAACE,YAAY,EAAZA;AAAY,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}