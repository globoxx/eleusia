{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../../engine';\nimport { FFT } from '../../kernel_names';\nimport { assert } from '../../util';\nimport { op } from '../operation';\n/**\r\n * Fast Fourier transform.\r\n *\r\n * Computes the 1-dimensional discrete Fourier transform over the inner-most\r\n * dimension of input.\r\n *\r\n * ```js\r\n * const real = tf.tensor1d([1, 2, 3]);\r\n * const imag = tf.tensor1d([1, 2, 3]);\r\n * const x = tf.complex(real, imag);\r\n *\r\n * x.fft().print();  // tf.spectral.fft(x).print();\r\n * ```\r\n * @param input The complex input to compute an fft over.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\r\n */\nfunction fft_(input) {\n  assert(input.dtype === 'complex64', function () {\n    return \"The dtype for tf.spectral.fft() must be complex64 \" + \"but got \".concat(input.dtype, \".\");\n  });\n  var inputs = {\n    input: input\n  };\n  return ENGINE.runKernel(FFT, inputs);\n}\nexport var fft = /* @__PURE__ */op({\n  fft_: fft_\n});","map":{"version":3,"names":["ENGINE","FFT","assert","op","fft_","input","dtype","concat","inputs","runKernel","fft"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\spectral\\fft.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {FFT, FFTInputs} from '../../kernel_names';\nimport {Tensor} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {assert} from '../../util';\nimport {op} from '../operation';\n\n/**\n * Fast Fourier transform.\n *\n * Computes the 1-dimensional discrete Fourier transform over the inner-most\n * dimension of input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([1, 2, 3]);\n * const x = tf.complex(real, imag);\n *\n * x.fft().print();  // tf.spectral.fft(x).print();\n * ```\n * @param input The complex input to compute an fft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction fft_(input: Tensor): Tensor {\n  assert(\n      input.dtype === 'complex64',\n      () => `The dtype for tf.spectral.fft() must be complex64 ` +\n          `but got ${input.dtype}.`);\n\n  const inputs: FFTInputs = {input};\n\n  return ENGINE.runKernel(FFT, inputs as unknown as NamedTensorMap);\n}\n\nexport const fft = /* @__PURE__ */ op({fft_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,cAAc;AACnC,SAAQC,GAAG,QAAkB,oBAAoB;AAGjD,SAAQC,MAAM,QAAO,YAAY;AACjC,SAAQC,EAAE,QAAO,cAAc;AAE/B;;;;;;;;;;;;;;;;;AAiBA,SAASC,IAAIA,CAACC,KAAa;EACzBH,MAAM,CACFG,KAAK,CAACC,KAAK,KAAK,WAAW,EAC3B;IAAA,OAAM,kEAAAC,MAAA,CACSF,KAAK,CAACC,KAAK,MAAG;EAAA,EAAC;EAElC,IAAME,MAAM,GAAc;IAACH,KAAK,EAALA;EAAK,CAAC;EAEjC,OAAOL,MAAM,CAACS,SAAS,CAACR,GAAG,EAAEO,MAAmC,CAAC;AACnE;AAEA,OAAO,IAAME,GAAG,GAAG,eAAgBP,EAAE,CAAC;EAACC,IAAI,EAAJA;AAAI,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}