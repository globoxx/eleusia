{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SparseToDense, util } from '@tensorflow/tfjs-core';\nimport { scatterImpl } from './Scatter_impl';\nexport function sparseToDense(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var sparseIndices = inputs.sparseIndices,\n    sparseValues = inputs.sparseValues,\n    defaultValue = inputs.defaultValue;\n  var outputShape = attrs.outputShape;\n  var _backend_util$calcula = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape),\n    sliceRank = _backend_util$calcula.sliceRank,\n    numUpdates = _backend_util$calcula.numUpdates,\n    sliceSize = _backend_util$calcula.sliceSize,\n    strides = _backend_util$calcula.strides,\n    outputSize = _backend_util$calcula.outputSize;\n  var sumDupeIndices = false;\n  var indicesBuf = backend.bufferSync(sparseIndices);\n  var outBuf;\n  switch (sparseValues.dtype) {\n    case 'bool':\n      {\n        var updatesBuf = backend.bufferSync(sparseValues);\n        var $defaultValue = Boolean(backend.data.get(defaultValue.dataId).values[0]);\n        outBuf = scatterImpl(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n        break;\n      }\n    case 'float32':\n      {\n        var _updatesBuf = backend.bufferSync(sparseValues);\n        var _$defaultValue = backend.data.get(defaultValue.dataId).values[0];\n        outBuf = scatterImpl(indicesBuf, _updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, _$defaultValue, sumDupeIndices);\n        break;\n      }\n    case 'int32':\n      {\n        var _updatesBuf2 = backend.bufferSync(sparseValues);\n        var _$defaultValue2 = backend.data.get(defaultValue.dataId).values[0];\n        outBuf = scatterImpl(indicesBuf, _updatesBuf2, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, _$defaultValue2, sumDupeIndices);\n        break;\n      }\n    case 'string':\n      {\n        var _updatesBuf3 = backend.bufferSync(sparseValues);\n        var _$defaultValue3 = util.decodeString(backend.data.get(defaultValue.dataId).values[0]);\n        outBuf = scatterImpl(indicesBuf, _updatesBuf3, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, _$defaultValue3, sumDupeIndices);\n        break;\n      }\n    default:\n      throw new Error(\"Unsupported type \".concat(sparseValues.dtype));\n  }\n  return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\nexport var sparseToDenseConfig = {\n  kernelName: SparseToDense,\n  backendName: 'cpu',\n  kernelFunc: sparseToDense\n};","map":{"version":3,"names":["backend_util","SparseToDense","util","scatterImpl","sparseToDense","args","inputs","backend","attrs","sparseIndices","sparseValues","defaultValue","outputShape","_backend_util$calcula","calculateShapes","sliceRank","numUpdates","sliceSize","strides","outputSize","sumDupeIndices","indicesBuf","bufferSync","outBuf","dtype","updatesBuf","$defaultValue","Boolean","data","get","dataId","values","decodeString","Error","concat","makeTensorInfo","sparseToDenseConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-cpu\\src\\kernels\\SparseToDense.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendCPU,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  const indicesBuf = backend.bufferSync<Rank, 'int32'>(sparseIndices);\n\n  let outBuf;\n  switch (sparseValues.dtype) {\n    case 'bool': {\n      const updatesBuf = backend.bufferSync<Rank, 'bool'>(sparseValues);\n      const $defaultValue =\n          Boolean(backend.data.get(defaultValue.dataId).values[0]);\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'float32': {\n      const updatesBuf = backend.bufferSync<Rank, 'float32'>(sparseValues);\n      const $defaultValue =\n          backend.data.get(defaultValue.dataId).values[0] as number;\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'int32': {\n      const updatesBuf = backend.bufferSync<Rank, 'int32'>(sparseValues);\n      const $defaultValue =\n          backend.data.get(defaultValue.dataId).values[0] as number;\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'string': {\n      const updatesBuf = backend.bufferSync<Rank, 'string'>(sparseValues);\n      const $defaultValue = util.decodeString(\n          backend.data.get(defaultValue.dataId).values[0] as Uint8Array);\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    default:\n      throw new Error(`Unsupported type ${sparseValues.dtype}`);\n  }\n  return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'cpu',\n  kernelFunc: sparseToDense as unknown as KernelFunc\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}