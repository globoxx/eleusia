{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Sub } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Subtracts two `tf.Tensor`s element-wise, A - B. Supports broadcasting.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([10, 20, 30, 40]);\r\n * const b = tf.tensor1d([1, 2, 3, 4]);\r\n *\r\n * a.sub(b).print();  // or tf.sub(a, b)\r\n * ```\r\n *\r\n * ```js\r\n * // Broadcast subtract a with b.\r\n * const a = tf.tensor1d([10, 20, 30, 40]);\r\n * const b = tf.scalar(5);\r\n *\r\n * a.sub(b).print();  // or tf.sub(a, b)\r\n * ```\r\n * @param a The first `tf.Tensor` to subtract from.\r\n * @param b The second `tf.Tensor` to be subtracted. Must have the same dtype as\r\n * `a`.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\r\n */\nfunction sub_(a, b) {\n  var $a = convertToTensor(a, 'a', 'sub');\n  var $b = convertToTensor(b, 'b', 'sub');\n  var _makeTypesMatch = makeTypesMatch($a, $b);\n  var _makeTypesMatch2 = _slicedToArray(_makeTypesMatch, 2);\n  $a = _makeTypesMatch2[0];\n  $b = _makeTypesMatch2[1];\n  var inputs = {\n    a: $a,\n    b: $b\n  };\n  return ENGINE.runKernel(Sub, inputs);\n}\nexport var sub = /* @__PURE__ */op({\n  sub_: sub_\n});","map":{"version":3,"names":["ENGINE","Sub","makeTypesMatch","convertToTensor","op","sub_","a","b","$a","$b","_makeTypesMatch","_makeTypesMatch2","_slicedToArray","inputs","runKernel","sub"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-core\\src\\ops\\sub.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Sub, SubInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Subtracts two `tf.Tensor`s element-wise, A - B. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([10, 20, 30, 40]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n *\n * a.sub(b).print();  // or tf.sub(a, b)\n * ```\n *\n * ```js\n * // Broadcast subtract a with b.\n * const a = tf.tensor1d([10, 20, 30, 40]);\n * const b = tf.scalar(5);\n *\n * a.sub(b).print();  // or tf.sub(a, b)\n * ```\n * @param a The first `tf.Tensor` to subtract from.\n * @param b The second `tf.Tensor` to be subtracted. Must have the same dtype as\n * `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction sub_<T extends Tensor>(a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'sub');\n  let $b = convertToTensor(b, 'b', 'sub');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const inputs: SubInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(Sub, inputs as unknown as NamedTensorMap);\n}\n\nexport const sub = /* @__PURE__ */ op({sub_});\n"],"mappings":";AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,GAAG,QAAkB,iBAAiB;AAG9C,SAAQC,cAAc,QAAO,gBAAgB;AAC7C,SAAQC,eAAe,QAAO,oBAAoB;AAGlD,SAAQC,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAASC,IAAIA,CAAmBC,CAAoB,EAAEC,CAAoB;EACxE,IAAIC,EAAE,GAAGL,eAAe,CAACG,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC;EACvC,IAAIG,EAAE,GAAGN,eAAe,CAACI,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC;EAAC,IAAAG,eAAA,GAC7BR,cAAc,CAACM,EAAE,EAAEC,EAAE,CAAC;EAAA,IAAAE,gBAAA,GAAAC,cAAA,CAAAF,eAAA;EAAhCF,EAAE,GAAAG,gBAAA;EAAEF,EAAE,GAAAE,gBAAA;EAEP,IAAME,MAAM,GAAc;IAACP,CAAC,EAAEE,EAAE;IAAED,CAAC,EAAEE;EAAE,CAAC;EAExC,OAAOT,MAAM,CAACc,SAAS,CAACb,GAAG,EAAEY,MAAmC,CAAC;AACnE;AAEA,OAAO,IAAME,GAAG,GAAG,eAAgBX,EAAE,CAAC;EAACC,IAAI,EAAJA;AAAI,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}