{"ast":null,"code":"import _slicedToArray from \"C:/Users/vince/OneDrive/Documents/GitHub/eleusia/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseSegmentMean } from '@tensorflow/tfjs-core';\nimport { sparseSegmentReductionImplCPU } from '../kernel_utils/shared';\nexport function sparseSegmentMean(args) {\n  var inputs = args.inputs,\n    backend = args.backend;\n  var data = inputs.data,\n    indices = inputs.indices,\n    segmentIds = inputs.segmentIds;\n  if (data.shape.length < 1) {\n    throw new Error(\"Data should be at least 1 dimensional but received scalar\");\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(\"Indices should be a vector but received shape\\n              \".concat(indices.shape));\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(\"Segment ids should be a vector but received shape\\n              \".concat(segmentIds.shape));\n  }\n  var $data = backend.readSync(data.dataId);\n  var $indices = backend.readSync(indices.dataId);\n  var $segmentIds = backend.readSync(segmentIds.dataId);\n  var _sparseSegmentReducti = sparseSegmentReductionImplCPU($data, data.shape, data.dtype, $indices, $segmentIds, true),\n    _sparseSegmentReducti2 = _slicedToArray(_sparseSegmentReducti, 2),\n    outputData = _sparseSegmentReducti2[0],\n    outputDataShape = _sparseSegmentReducti2[1];\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\nexport var sparseSegmentMeanConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentMean\n};","map":{"version":3,"names":["SparseSegmentMean","sparseSegmentReductionImplCPU","sparseSegmentMean","args","inputs","backend","data","indices","segmentIds","shape","length","Error","concat","$data","readSync","dataId","$indices","$segmentIds","_sparseSegmentReducti","dtype","_sparseSegmentReducti2","_slicedToArray","outputData","outputDataShape","makeTensorInfo","sparseSegmentMeanConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\vince\\OneDrive\\Documents\\GitHub\\tfjs-backend-webgl\\src\\kernels\\SparseSegmentMean.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n              ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n              ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentMean as unknown as KernelFunc,\n};\n"],"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,iBAAiB,QAAwD,uBAAuB;AAGlI,SAAQC,6BAA6B,QAAO,wBAAwB;AAEpE,OAAM,SAAUC,iBAAiBA,CAC7BC,IAAkE;EAEpE,IAAOC,MAAM,GAAaD,IAAI,CAAvBC,MAAM;IAAEC,OAAO,GAAIF,IAAI,CAAfE,OAAO;EACtB,IAAOC,IAAI,GAAyBF,MAAM,CAAnCE,IAAI;IAAEC,OAAO,GAAgBH,MAAM,CAA7BG,OAAO;IAAEC,UAAU,GAAIJ,MAAM,CAApBI,UAAU;EAChC,IAAIF,IAAI,CAACG,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;IACzB,MAAM,IAAIC,KAAK,6DACiD;;EAElE,IAAIJ,OAAO,CAACE,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IAC9B,MAAM,IAAIC,KAAK,iEAAAC,MAAA,CACHL,OAAO,CAACE,KAAK,EAAG;;EAE9B,IAAID,UAAU,CAACC,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IACjC,MAAM,IAAIC,KAAK,qEAAAC,MAAA,CACHJ,UAAU,CAACC,KAAK,EAAG;;EAGjC,IAAMI,KAAK,GAAGR,OAAO,CAACS,QAAQ,CAACR,IAAI,CAACS,MAAM,CAAe;EACzD,IAAMC,QAAQ,GAAGX,OAAO,CAACS,QAAQ,CAACP,OAAO,CAACQ,MAAM,CAAe;EAC/D,IAAME,WAAW,GAAGZ,OAAO,CAACS,QAAQ,CAACN,UAAU,CAACO,MAAM,CAAe;EAErE,IAAAG,qBAAA,GAAsCjB,6BAA6B,CAC/DY,KAAK,EAAEP,IAAI,CAACG,KAAK,EAAEH,IAAI,CAACa,KAAK,EAAEH,QAAQ,EAAEC,WAAW,EAAE,IAAI,CAAC;IAAAG,sBAAA,GAAAC,cAAA,CAAAH,qBAAA;IADxDI,UAAU,GAAAF,sBAAA;IAAEG,eAAe,GAAAH,sBAAA;EAElC,OAAOf,OAAO,CAACmB,cAAc,CAACD,eAAe,EAAEjB,IAAI,CAACa,KAAK,EAAEG,UAAU,CAAC;AACxE;AAEA,OAAO,IAAMG,uBAAuB,GAAiB;EACnDC,UAAU,EAAE1B,iBAAiB;EAC7B2B,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAE1B;CACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}